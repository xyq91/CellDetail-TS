function Celldetail
% get screensize to make decision of how GUI is shown / scrollable
% is designed for 1700 pixels width, 980 pixels height

screensize = get(groot, 'Screensize');

% introduce button value for decision between two modes of view:
% seeing all parameters at once or clicking through with panels and
% instruction images easing the
% interaction for first time users
% variable notoallatonce_parameters == 0: easing interaction
% variable notoallatonce_parameters == 1: see all at once
global notoallatonce_parameters
notoallatonce_parameters = 0;

f = uifigure( ...
    'Visible', 'on', ...
    'Position', [50, 50, 1700, 980], 'Color', 'k', ...
    'NextPlot', 'add');


% decide on how GUI is shown based on screensize
% if screensize is bigger or equal to design: scrollable is off
% if screensize is smaller: scrollable is on
if screensize(4) >= 980 && screensize(3) >= 1700
    
    f.Resize = 'off';
end


if screensize(4) < 980 || screensize(3) < 1700
    notoallatonce_parameters = 0;
    
    
    f.Scrollable = 'on';
    f.Resize = 'off';
end

% introduce colors of lab logo
R = 0;
G = 158 / 255;
B = 224 / 255;
geigerlabblue = [R G B];

geigerlabwhite = [1 1 1];

R = 187 / 255;
G = 51 / 255;
B = 108 / 255;
geigerlabpink = [R G B];

R = 77 / 255;
G = 77 / 255;
B = 77 / 255;
geigerlabdarkgrey = [R G B];

R = 123 / 255;
G = 137 / 255;
B = 159 / 255;
bluishgreymid = [R G B];

R = 173 / 255;
G = 187 / 255;
B = 209 / 255;
bluishgrey = [R G B];

R = 44 / 255;
G = 112 / 255;
B = 141 / 255;
darkbluishgrey = [R G B];


% name GUI
f.Name = 'Cell Detection and Analysis of Intensity Lounge';

% introduce how to respond to close requests (see function my_closereq)
% cancellable or close, needs click of user
f.CloseRequestFcn = @(f, event) my_closereq(f);

% design size
a = [0, 0, 1700, 980];

% introduce main tabs:
% TAB 1: Import and Export settings as well as Measurement settings,
% channel information, rerun options
% TAB 2: Adjust Parameters and Pre-View of cell detection.
% Adaptation possibility for user to see for which parameters cell
% detection performs best. Settings for total run-through. No individual
% settings can be set.
% TAB 3: Results.
% Go through cells and see detection. Individual settings can be
% set and rerun, cells excluded, channels of single cells deleted, ...
% export button can be pushed to save results
tabgp = uitabgroup(f, 'Position', a);
tab1 = uitab(tabgp, 'Title', 'Import and Export settings');
tab2 = uitab(tabgp, 'Title', 'Adjust Parameters and Pre-View of cell detection');
tab3 = uitab(tabgp, 'Title', 'Results');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TAB 1

% Import and Export settings

% panel of first tab
p1 = uipanel(tab1, 'Position', [0 0 1700 960] , 'BackgroundColor',bluishgrey);

% logo image
axcdetail = uiaxes('Parent', p1, 'Position', [630+15 a(4)-545 375 150 ], 'BackgroundColor', bluishgrey);
axcdetail.Toolbar.Visible = 'off';
axcdetail.Interactions = [];
matlabImage = imread('GUIimagee.png');
imshow(matlabImage, 'Parent', axcdetail);

% decision on which view to ease interaction
global decisionviewoption
decisionviewoption = 1;

% set panels to introduce axes (uiaxes) to show image instructions of
% what user possibilities are below panel hiding options

%%%
if notoallatonce_parameters == 0
    % if not looked at all parameters at once:
    % introduce panels; but if screensize is smaller: it is not possible as
    % well
    
    if decisionviewoption == 1
        % set colors of panels
        hiddenpanelcolor1 = geigerlabpink;
        hiddenpanelcolor2 = geigerlabdarkgrey;
        hiddenpanelcolor3 = geigerlabwhite;
        hiddenpanelcolor4 = geigerlabblue;
        hiddenpanelcolor5 = bluishgreymid;
        hiddenpanelcolor6 = darkbluishgrey;
        
        % set panels to introduce axes (uiaxes) to show image instructions of
        % what user possibilities are below panel hiding options
        paneltohideimportexport = uipanel(tab1, 'Position', [50 a(4)-600 615 550], ...
            'BackgroundColor', hiddenpanelcolor1, 'BorderType', 'none');
        paneltohidechannel = uipanel(tab1, 'Position', [50 a(4)-950 615 320], 'BackgroundColor', hiddenpanelcolor2, 'BorderType', 'none');
        paneltohidemeasurementsettings = uipanel(tab1, 'Position', [700, a(4)-370 250 280], 'BackgroundColor', hiddenpanelcolor3, 'BorderType', 'none');
        paneltohidedetectionoption = uipanel(tab1, 'Position', [700, a(4)-750 250 150], 'BackgroundColor', hiddenpanelcolor4, 'BorderType', 'none');
        paneltohideanalysisoption = uipanel(tab1, 'Position', [700, a(4)-950 250 180], 'BackgroundColor', hiddenpanelcolor5, 'BorderType', 'none');
        paneltohidedatasetrerunoptions = uipanel(tab1, 'Position', [1020, a(4)-500 660 450], 'BackgroundColor', hiddenpanelcolor6, 'BorderType', 'none');
        
        %%%
        % introduce axes in each panel, show image on top and give a number to
        % panel
        %%%
        axes_panelimportexport = uiaxes('Parent', paneltohideimportexport, 'Position', [-60 -20 650*1.05 550*1.05], 'BackgroundColor', hiddenpanelcolor1, 'Clipping', 'off');
        axes_panelimportexport.Toolbar.Visible = 'off';
        axes_panelimportexport.Interactions = [];
        %%%
        global image_panelimportexport
        image_panelimportexport = imshow('importpanel_testwritten.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
        
        
        describpanel_1 = uitextarea(paneltohideimportexport, 'Position', [0 522 30 30], 'Value','1)');
        describpanel_1.FontSize = 16;
        describpanel_1.FontName = 'Arial Rounded MT Bold';
        describpanel_1.BackgroundColor = [1.0 1.0 1.0];
        describpanel_1.FontColor = geigerlabpink;
        describpanel_1.FontWeight = 'bold';
        global image_panelchannel
        %
        axes_panelchannel = uiaxes('Parent', paneltohidechannel, 'Position', [-80 -85 615*1.3 320*1.3], 'BackgroundColor', hiddenpanelcolor2, 'Clipping', 'off');
        axes_panelchannel.Toolbar.Visible = 'off';
        axes_panelchannel.Interactions = [];
        %
        image_panelchannel = imshow('channelpanelb800dpitestwritten.png', 'Parent', axes_panelchannel, 'Border', 'tight');
        
        describpanel_2 = uitextarea(paneltohidechannel, 'Position', [0 292 30 30], 'Value','2)');
        describpanel_2.FontSize = 16;
        describpanel_2.FontName = 'Arial Rounded MT Bold';
        describpanel_2.BackgroundColor = [1.0 1.0 1.0];
        describpanel_2.FontColor = hiddenpanelcolor2;
        describpanel_2.FontWeight = 'bold';
        global image_paneltohidemeasurementsettings
        axes_paneltohidemeasurementsettings = uiaxes('Parent', paneltohidemeasurementsettings, 'Position', [-35 -45 250*1.2 280*1.2], 'BackgroundColor', hiddenpanelcolor3);
        axes_paneltohidemeasurementsettings.Toolbar.Visible = 'off';
        axes_paneltohidemeasurementsettings.Interactions = [];
        %
        image_paneltohidemeasurementsettings = imshow('panel_measurementsettingswritten.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
        
        describpanel_3 = uitextarea(paneltohidemeasurementsettings, 'Position', [0 252 30 30], 'Value','3)');
        describpanel_3.FontSize = 16;
        describpanel_3.FontName = 'Arial Rounded MT Bold';
        describpanel_3.BackgroundColor = [0 0 0];
        describpanel_3.FontColor = hiddenpanelcolor3;
        describpanel_3.FontWeight = 'bold';
        
        global image_paneltohidedetectionoption
        axes_paneltohidedetectionoption = uiaxes('Parent', paneltohidedetectionoption, 'Position', [-25 -45 250*1.3 150*1.3], 'BackgroundColor', hiddenpanelcolor4);
        axes_paneltohidedetectionoption.Toolbar.Visible = 'off';
        axes_paneltohidedetectionoption.Interactions = [];
        %
        image_paneltohidedetectionoption = imshow('confocalpaneltestwritten.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
        
        describpanel_4 = uitextarea(paneltohidedetectionoption, 'Position', [0 122 30 30], 'Value','4)');
        describpanel_4.FontSize = 16;
        describpanel_4.FontName = 'Arial Rounded MT Bold';
        describpanel_4.BackgroundColor = geigerlabwhite;
        describpanel_4.FontColor = hiddenpanelcolor4;
        describpanel_4.FontWeight = 'bold';
        global image_paneltohideanalysisoption
        axes_paneltohideanalysisoption = uiaxes('Parent', paneltohideanalysisoption, 'Position', [-25 -35 250*1.3 180*1.3], 'BackgroundColor', hiddenpanelcolor5);
        axes_paneltohideanalysisoption.Toolbar.Visible = 'off';
        axes_paneltohideanalysisoption.Interactions = [];
        
        image_paneltohideanalysisoption = imshow('panel_analysisoptionb.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
        describpanel_5 = uitextarea(paneltohideanalysisoption, 'Position', [0 152 30 30], 'Value','5)');
        describpanel_5.FontSize = 16;
        describpanel_5.FontName = 'Arial Rounded MT Bold';
        describpanel_5.BackgroundColor = geigerlabwhite;
        describpanel_5.FontColor = hiddenpanelcolor5;
        describpanel_5.FontWeight = 'bold';
        global image_paneltohidedatasetrerunoptions
        %
        axes_paneltohidedatasetrerunoptions = uiaxes('Parent', paneltohidedatasetrerunoptions, 'Position', [-25 -35 660*1.2 450*1.2], 'BackgroundColor', hiddenpanelcolor6);
        axes_paneltohidedatasetrerunoptions.Toolbar.Visible = 'off';
        axes_paneltohidedatasetrerunoptions.Interactions = [];
        %
        image_paneltohidedatasetrerunoptions = imshow('panel_rerunwritten.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
        describpanel_6 = uitextarea(paneltohidedatasetrerunoptions, 'Position', [0 422 30 30], 'Value','6)');
        describpanel_6.FontSize = 16;
        describpanel_6.FontName = 'Arial Rounded MT Bold';
        describpanel_6.BackgroundColor = geigerlabwhite;
        describpanel_6.FontColor = hiddenpanelcolor6;
        describpanel_6.FontWeight = 'bold';
        %%%
    end
    
    
    
    
end


% Description and inserts of TAB 1

% Heading
describ1 = uitextarea(p1, 'Position', [50 a(4)-130 250 30], 'Value', 'Import');
describ1.Enable = 'on';
describ1.Editable = 'off';
describ1.FontSize = 18;
describ1.BackgroundColor =[0.2 0.2 0.2];
describ1.FontWeight = 'bold';

% Description of Heading
describ1b = uitextarea(p1, 'Position', [50 a(4)-160 550 30], 'Value', ...
    'Expected: Pathway to folder with single cell image files for analysis');
describ1b.Enable = 'on';
describ1b.Editable = 'off';
describ1b.FontSize = 14;
describ1b.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
t1 = uitextarea(p1, 'Position', [50 a(4)-210 200 25], 'Value', 'Pathway to Data Folder');
t1.Enable = 'on';
t1.Editable = 'off';
t1.FontSize = 16;
t1.BackgroundColor = [0.1 0.1 0.1];

% Description of input field
t1b = uitextarea(p1, 'Position', [50 a(4)-260 200 25], 'Value', 'Same word in every file');
t1b.Enable = 'on';
t1b.Editable = 'off';
t1b.FontSize = 16;
t1b.BackgroundColor = [0.1 0.1 0.1];

% Heading
describ2 = uitextarea(p1, 'Position', [50 a(4)-350 250 30], 'Value', 'Export');
describ2.Enable = 'on';
describ2.Editable = 'off';
describ2.FontSize = 18;
describ2.BackgroundColor = [0.2 0.2 0.2];
describ2.FontWeight = 'bold';

% Description of Heading
describ1export = uitextarea(p1, 'Position', [50 a(4)-390 550 40], 'Value', ...
    'Expected: Pathway to folder for saving data files (txt and mat), cell detection and further images');
describ1export.Enable = 'on';
describ1export.Editable = 'off';
describ1export.FontSize = 14;
describ1export.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
t2 = uitextarea(p1, 'Position', [50 a(4)-440 200 25], 'Value', 'Pathway to save images');
t2.Enable = 'on';
t2.Editable = 'off';
t2.FontSize = 16;
t2.BackgroundColor = [0.1 0.1 0.1];

% Input field for image saving pathway
ef2 = uieditfield(p1, 'Text', 'Position', [250 a(4)-440 350 25], 'Value', '', ...
    'ValueChangedFcn', @(ef2, event) pathwaytosaveimages(ef2));

% Description of input field
t3 = uitextarea(p1, 'Position', [50 a(4)-490 200 25], 'Value', 'Pathway to save data');
t3.Enable = 'on';
t3.Editable = 'off';
t3.FontSize = 16;
t3.BackgroundColor = [0.1 0.1 0.1];

% Input field for data saving pathway
ef3 = uieditfield(p1, 'Text', 'Position', [250 a(4)-490 350 25], 'Value', '', ...
    'ValueChangedFcn', @(ef3,event) pathwaytosavedata(ef3));

% Input field for phrase to look for
global phrasetofind
ef1b = uieditfield(p1, 'Text', 'Position', [250 a(4)-260 200 25], 'Value', '.tif', ...
    'ValueChangedFcn', @(ef1b,event) phraserunthroughfolders(ef1b, event));
phrasetofind = ef1b.Value;

% Checkbox if single layer data is taken for analysis
global buttonsinglelayer
ef1c = uicheckbox(p1, 'Position', [250 a(4)-290 100 15], 'Text', 'Single layer', 'Value', 0, ...
    'ValueChangedFcn', @(ef1c, event) singlelayercellsfct(ef1c,event));
buttonsinglelayer = ef1c.Value;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Heading
describ3 = uitextarea(p1, 'Position', [50 a(4)-700 250 30], 'Value', 'Channel information');
describ3.Enable = 'on';
describ3.Editable = 'off';
describ3.FontSize = 18;
describ3.BackgroundColor = [0.2 0.2 0.2];
describ3.FontWeight = 'bold';

% Description of Heading
describ4 = uitextarea(p1, 'Position', [50 a(4)-730 550 30], 'Value', ...
    'Name channels not to take as none, separate by comma');
describ4.Enable = 'on';
describ4.Editable = 'off';
describ4.FontSize = 14;
describ4.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
t4 = uitextarea(p1, 'Position', [50 a(4)-780 200 25], 'Value', 'Name Channels');
t4.Enable = 'on';
t4.Editable = 'off';
t4.FontSize = 16;
t4.BackgroundColor = [0.1 0.1 0.1];

% Description of input field
describ4b = uitextarea(p1, 'Position', [50 a(4)-855 320 50], 'Value', ...
    'Which channel shall be taken for cell detection? (Just number, e.g. if Dapi is Channel 1, type 1)');
describ4b.Enable = 'on';
describ4b.Editable = 'off';
describ4b.FontSize = 14;
describ4b.BackgroundColor = [0.1 0.1 0.1];

% Input field
global whichchannelforcelldetect
ef4b = uieditfield(p1, 'numeric', 'Position', [370 a(4)-855 50 50], 'Value', 1, ...
    'ValueChangedFcn', @(ef4b, event) whichchannelforcelldetection(ef4b));
whichchannelforcelldetect = ef4b.Value;

% Heading
p1_feedback = uitextarea(p1, 'Position', [1040 a(4)-650 500 30], 'Value', 'Feedback to user');
p1_feedback.Enable = 'on';
p1_feedback.Editable = 'off';
p1_feedback.FontSize = 16;
p1_feedback.BackgroundColor = [0.5 0.5 0.5];

% Output field
% As output field needed for several functions:
% placed ahead
p1_feedbackfield = uitextarea(p1, 'Position', [1040 10 500 a(4)-650-10], 'Value', 'Here Text should appear'); %,...
p1_feedbackfield.Enable = 'on';
p1_feedbackfield.Editable = 'off';
p1_feedbackfield.FontSize = 12;
p1_feedbackfield.BackgroundColor = [0.5 0.5 0.5];


%%%%%%%%%%%
% missing input field: later introduced as introduced fct needs other
% parameters that are later introduced

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Heading
describpix = uitextarea(p1, 'Position', [700 a(4)-130 250 30], 'Value', 'Measurement settings');
describpix.Enable = 'on';
describpix.Editable = 'off';
describpix.FontSize = 18;
describpix.BackgroundColor = [0.2 0.2 0.2];
describpix.FontWeight = 'bold';

% Description of Heading
describ1settingpix = uitextarea(p1, 'Position', [700 a(4)-190 250 60], 'Value', ...
    'Voxel values of microscope. Bit depth is taken automatically from tiff, but not for 14 bit (extra button).');
describ1settingpix.Enable = 'on';
describ1settingpix.Editable = 'off';
describ1settingpix.FontSize = 14;
describ1settingpix.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
t1ca = uitextarea(p1, 'Position', [700 a(4)-240 200 25], 'Value', 'Pixel width x (nm)');
t1ca.Enable = 'on';
t1ca.Editable = 'off';
t1ca.FontSize = 16;
t1ca.BackgroundColor = [0.1 0.1 0.1];

% Input field for pixel width x value in nm
global pixel_x
efpixx = uieditfield(p1, 'numeric', 'Position', [900 a(4)-240 50 25], 'Value', 113.5, ...
    'ValueChangedFcn', @(efpixx, event ) pixelx(efpixx, p1_feedbackfield));
pixel_x = efpixx.Value;

% Description of input field
t1cb = uitextarea(p1, 'Position', [700 a(4)-290 200 25], 'Value', 'Pixel height y (nm)');
t1cb.Enable = 'on';
t1cb.Editable = 'off';
t1cb.FontSize = 16;
t1cb.BackgroundColor = [0.1 0.1 0.1];

% Input field for pixel height y in nm
global pixel_y
efpixy = uieditfield(p1, 'numeric', 'Position', [900 a(4)-290 50 25], 'Value', 113.5, ...
    'ValueChangedFcn', @(efpixy, event ) pixely(efpixy, p1_feedbackfield));
pixel_y = efpixy.Value;

% Description of input field
t1cc = uitextarea(p1, 'Position', [700 a(4)-340 200 25], 'Value', 'Voxel depth z (nm)');
t1cc.Enable = 'on';
t1cc.Editable = 'off';
t1cc.FontSize = 16;
t1cc.BackgroundColor = [0.1 0.1 0.1];

% Input field for voxel depth in nm
global voxel_z
efpixz = uieditfield(p1, 'numeric', 'Position', [900 a(4)-340 50 25], 'Value', 500, ...
    'ValueChangedFcn', @(efpixz, event ) pixelz(efpixz, p1_feedbackfield));
voxel_z = efpixz.Value;

% Checkbox field for bit depth special case 14 bit.
% important for charge normalization if normalization is bit-dependent
% chosen (1) and (2)
global bitsize14
describ_bit14 = uicheckbox(p1, 'Position', [700, a(4)-370 70 20], 'Text', '14 bit', 'Value', 0, ...
    'FontSize', 16);
bitsize14 = describ_bit14.Value;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%  Heading
describoptionpar = uitextarea(p1, 'Position', [700 a(4)-800 250 30], 'Value', 'Analysis options');
describoptionpar.Enable = 'on';
describoptionpar.Editable = 'off';
describoptionpar.FontSize = 18;
describoptionpar.BackgroundColor = [0.2 0.2 0.2];
describoptionpar.FontWeight = 'bold';

% Description of Heading
describ1analysis = uitextarea(p1, 'Position', [700 a(4)-880 250 80], 'Value', ...
    'Calculating all parameters (needs more time). Cell detection done separatedly from analysis (analysis done when export button pushed).');
describ1analysis.Enable = 'on';
describ1analysis.Editable = 'off';
describ1analysis.FontSize = 14;
describ1analysis.BackgroundColor = [0.7 0.7 0.7];

% Checkbox for analysis of important or further paramters of polarity
global  buttonforallparameters
allparametersoption = uicheckbox(p1, 'Position', [700 a(4)-910 200 20], 'Text', ...
    'Take all parameters', 'Value', 0, 'Enable', 'on', 'FontSize', 16, ...
    'ValueChangedFcn', @(allparametersoption, event) ...
    allparametersoption_fct(allparametersoption, event)) ;
buttonforallparameters  = allparametersoption.Value;

% Checkbox for how to organize order of cell detection and analysis.
% If analysis of a cell takes more time, it is best to choose first cell detection
% and afterwards analysis.
global  buttonforcellsviewbeforerunbyexport
viewandexportoption = uicheckbox(p1, 'Position', [700 a(4)-940 400 20], 'Text', 'Cell detection separated', ...
    'Value', 0, 'Enable', 'on',  'FontSize', 16, ...
    'ValueChangedFcn', @(viewandexportoption, event) viewandexportoption_fct(viewandexportoption, event)) ;
buttonforcellsviewbeforerunbyexport  = viewandexportoption.Value;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Heading
describoptionalsheading = uitextarea(p1, 'Position', [1040 a(4)-130 250 30], 'Value', ...
    'Data set rerun options');
describoptionalsheading.Enable = 'on';
describoptionalsheading.Editable = 'off';
describoptionalsheading.FontSize = 18;
describoptionalsheading.BackgroundColor = [0.2 0.2 0.2];
describoptionalsheading.FontWeight = 'bold';

% Description of Heading
describoptionals = uitextarea(p1, 'Position', [1040 a(4)-160 550 30], 'Value', ...
    'Options if already run through data set or have masks (cell pixel 1, background pixel 0)');
describoptionals.Enable = 'on';
describoptionals.Editable = 'off';
describoptionals.FontSize = 14;
describoptionals.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
describ4c = uitextarea(p1, 'Position', [1040 a(4)-250 550 40], 'Value', '1) Optional: Pathway to import individual cell detection parameters from previous run-through (.mat file) (savingofsettingsofcertaincells.mat)');
describ4c.Enable = 'on';
describ4c.Editable = 'off';
describ4c.FontSize = 14;
describ4c.BackgroundColor = [0.7 0.7 0.7];

%%%%%%%%%%%


% button for importing of saved analysis settings of previous run-through
global buttonimportsavingparametersofcells
savingparametersofcellimport = uicheckbox(p1, 'Position', [1040 a(4)-280 550 20], 'Text',...
    'Saved individual cell parameters import option', 'Value', 0, ...
    'FontSize', 16, 'Enable', 'on',...
    'ValueChangedFcn', @(savingparametersofcellimport, event) ...
    savingparametersofcellimport_fct(savingparametersofcellimport, event, p1_feedbackfield));
buttonimportsavingparametersofcells = savingparametersofcellimport.Value;

% button for importing cell numbers not to take
global buttonimportcellnottotake
nottotakeofcellimport = uicheckbox(p1, 'Position', [1040 a(4)-300 550 20], 'Text',...
    'Saved indexofcellsnottaken.mat parameter import option', 'Value', 0, ...
    'FontSize', 16, 'Enable', 'on',...
    'ValueChangedFcn', @(nottotakeofcellimport, event) ...
    nottotakeofcellimport_fct(nottotakeofcellimport, event, p1_feedbackfield));
buttonimportcellnottotake = nottotakeofcellimport.Value;

%%%%%%%%%%%%

% Description of input field
describ4mask = uitextarea(p1, 'Position', [1040 a(4)-370 550 40], 'Value', ...
    '2) Optional: Pathway to import predefined masks as tiffs (no need for cell detection, just directly proceed with run-through for evaluation)');
describ4mask.Enable = 'on';
describ4mask.Editable = 'off';
describ4mask.FontSize = 14;
describ4mask.BackgroundColor = [0.7 0.7 0.7];

% Description of input field
tmask = uitextarea(p1, 'Position', [1040 a(4)-435 200 25], 'Value', 'Pathway to Mask Folder');
tmask.Enable = 'off';
tmask.Editable = 'off';
tmask.FontSize = 16;
tmask.BackgroundColor = [0.1 0.1 0.1];


% Checkbox to use option with pre-defined masks
global buttonimportmasksofcells
maskimport = uicheckbox(p1, 'Position', [1040 a(4)-400 550 20], 'Text',...
    'Predefined mask import option', 'Value', 0, 'Enable', 'on', ...
    'FontSize', 16);
buttonimportmasksofcells = maskimport.Value;
maskimport.Value

% Input field. Import pathway to masks
efmaskpathway = uieditfield(p1, 'Text', 'Position', [1240 a(4)-435 370 25], 'Value', '', ...
    'ValueChangedFcn', @(efmaskpathway, event) pathwaytoimportmask(efmaskpathway, maskimport, p1_feedbackfield));
efmaskpathway.Enable = 'off';
efmaskpathway.Editable = 'off';

% Checkbox to find mask folder pathway by user clicking
checkboxpathwaytosaveimportmaskfolder = uicheckbox(p1, 'Position', [1620, a(4)-435 350 25], ...
    'Text', 'Browse', 'ValueChangedFcn', ...
    @(checkboxpathwaytosaveimportmaskfolder, event) ...
    checkboxpathwaytosaveimportmaskfolderfcn(checkboxpathwaytosaveimportmaskfolder, efmaskpathway, maskimport, p1_feedbackfield));
checkboxpathwaytosaveimportmaskfolder.Enable = 'off';

% Description of input field. Phrase to find masks in folder.
tmaskphrase = uitextarea(p1, 'Position', [1040 a(4)-485 200 25], 'Value', 'Same word in every file');
tmaskphrase.Enable = 'off';
tmaskphrase.Editable = 'off';
tmaskphrase.FontSize = 16;
tmaskphrase.BackgroundColor = [0.1 0.1 0.1];

% Phrase to find masks in folder.
global maskimportphrasetofind
efmaskphrase = uieditfield(p1, 'Text', 'Position', [1240 a(4)-485 200 25], 'Value', 'Mask', ...
    'ValueChangedFcn', @(efmaskphrase,event) phraserunthroughfoldersmask(efmaskphrase, event));
maskimportphrasetofind = efmaskphrase.Value;
efmaskphrase.Enable = 'off';
efmaskphrase.Editable = 'off';

% Fct belonging to maskimport
maskimport.ValueChangedFcn = @(maskimport, event) maskimport_fct(maskimport, event, tmask, efmaskpathway,tmaskphrase, efmaskphrase, p1_feedbackfield, checkboxpathwaytosaveimportmaskfolder);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% some input fields of TAB1 are later introduced as their functions are referring
% to parameters that are introduced in other tabs.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

threshfrontier1_values = [0.1, 0.1];
threshfrontier2_values = [0.4, 50000];
anpassungotsuthreshK1_values = [0.06, 0.1];
anpassungotsuthreshK2_values = [0.03, 0.1];
anpassungotsuthreshK3_values = [0.15, 0.1];
thresholdnumpixelsforrangefilt_values = [1500, 250];
text_anpassungintensotsuthresh2 = {'Threshold addition 1: If layer threshold > Threshold frontier I1', ...
    'Threshold addition: If program internally mean value used for determining layers'};
anpassungotsuthresh2_values = [0, 0.01];
outoffocusoption_values = [1, 0];
maxpixnumlayer_text = {'Maximum number of pixels in layer', 'Imbinarize Threshold for Confocal'};
maxpixnumlayer_values = [6000 0.1];
texts_threshfront2pixlayer = {'Threshold frontier 2', ...
    'Select layers differently if mean of pixel number is bigger than this value: depending on being bigger than mean value rather than on minimum value and Minimum number of pixels per layer for Range filter'};

% TAB 2
% panel
p2 = uipanel(tab2, 'Position', [0 0 880 960], 'BackgroundColor', bluishgrey);

% introduce tab group of Tab 2 for decision to give user basic options for cell
% detection or additional parameters
tabgp2 = uitabgroup(p2, 'Position', [0 0 880 960]);
tabparameters1 = uitab(tabgp2, 'Title', 'Basic Parameters', 'BackgroundColor',bluishgrey);
tabparameters2 = uitab(tabgp2, 'Title', 'Additional Parameters');
pparameters2 = uipanel(tabparameters2, 'Position', [0 0 880 960], 'BackgroundColor',bluishgrey);

%%%
% Heading
p2_feedback = uitextarea(p2, 'Position', [350 a(4)-880 500 30], 'Value', 'Feedback to user');
p2_feedback.Enable = 'on';
p2_feedback.Editable = 'off';
p2_feedback.FontSize = 16;
p2_feedback.BackgroundColor = [0.5 0.5 0.5];

% Output field
p2_feedbackfield = uitextarea(p2, 'Position', [350 10 500 a(4)-880-10], 'Value', 'Here Text should appear'); %,...
p2_feedbackfield.Enable = 'on';
p2_feedbackfield.Editable = 'off';
p2_feedbackfield.FontSize = 12;
p2_feedbackfield.BackgroundColor = [0.5 0.5 0.5];
%%%

% Heading
tp2_1 = uitextarea(p2, 'Position', [10 a(4)-80 300 30], 'Value', 'Parameters for cell detection');
tp2_1.Enable = 'on';
tp2_1.Editable = 'off';
tp2_1.FontSize = 18;
tp2_1.BackgroundColor = [0.2 0.2 0.2];
tp2_1.FontWeight = 'bold';

%%%
% if screen size is sufficient: panels are introduced
% (notoallatonce_parameters == 0)
% else: text is seen
% (notoallatonce_parameters == 1)
if notoallatonce_parameters == 0
    
    % help for annotation textbox offset
    versatz_x = 1/36;
    versatz_y = 1/36;
    
    % position of layer thresholding annotations of tabs
    dim_structurebasic = [1.2/18-versatz_x 1-3.75/20*1.34-versatz_y 4.1/18+2*versatz_x 1.05/20*2+2*versatz_y];
    dim_structureadditional = [1.2/18-versatz_x 1-14.43/20*1.09-versatz_y 4.1/18+2*versatz_x 11.3/20*1.1+2*versatz_y];
    annotation(tabparameters1, 'rectangle', dim_structurebasic, 'Color',geigerlabblue); % only visible for basic parameters
    annotation(pparameters2, 'rectangle', dim_structureadditional, 'Color',geigerlabblue); % only visible for additional parameters
    
    % position of intensity thresholding annotations of tabs
    dim_intensitybasic = [11.65/18-versatz_x 1-3.75/20-versatz_y 4.1/18+2*versatz_x 1.05/20+2*versatz_y];
    dim_intensityadditional = [350/880-versatz_x (a(4)-360+15)/a(4)-versatz_y (770-350)/880+2*versatz_x 188/960+2*versatz_y];
    annotation(tabparameters1, 'rectangle', dim_intensitybasic, 'Color',geigerlabpink); % only visible for basic parameters
    annotation(pparameters2, 'rectangle', dim_intensityadditional, 'Color',geigerlabpink); % only visible for additional parameters
    
    % position of general thresholding annotations
    dim_generalbasic = [350/880-versatz_x (a(4)-640+15)/a(4)-versatz_y (770-350)/880+2*versatz_x 186/960+2*versatz_y];
    dim_generaladditional = [350/880-versatz_x (a(4)-640+15)/a(4)-versatz_y-8/960 (770-350)/880+2*versatz_x 186/960+2*versatz_y-5/960];
    annotation(tabparameters1, 'rectangle', dim_generalbasic, 'Color',darkbluishgrey); % only visible for basic parameters
    annotation(pparameters2, 'rectangle', dim_generaladditional, 'Color',darkbluishgrey); % only visible for additional parameters
    
end



% if screen size is not sufficient (notoallatonce_parameters == 1) text is
% seen

describp2_1 = uitextarea(p2, 'Position', [10 a(4)-140 300 25], 'Value', ...
    'Layer thresholding'); % by Otsu`s method and user-defined improvements');
describp2_1.Enable = 'on';
describp2_1.Editable = 'off';
describp2_1.FontSize = 16;
describp2_1.BackgroundColor = [0.7 0.7 0.7];
describp2_1.FontColor = geigerlabblue;
describp2_1.FontWeight = 'bold';
describp2_1.HorizontalAlignment = 'center';

describp2_1t = uitextarea(p2, 'Position', [400 a(4)-140 300 25], 'Value', ...
    'Cell pixel thresholding'); % by Otsu`s method and user-defined improvements');
describp2_1t.Enable = 'on';
describp2_1t.Editable = 'off';
describp2_1t.FontSize = 16;
describp2_1t.BackgroundColor = [0.7 0.7 0.7];
describp2_1t.FontColor = geigerlabpink;
describp2_1t.FontWeight = 'bold';
describp2_1t.HorizontalAlignment = 'center';

decidestructurecolor = [0 0 0];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% structure-based layer thresholding

% Description of input field
describstructurethresh = uitextarea(pparameters2, 'Position', [60 a(4)-360 150 50], 'Value', ...
    'Threshold frontier 1');
describstructurethresh.Enable = 'off';
describstructurethresh.Editable = 'off';
describstructurethresh.FontSize = 14;
describstructurethresh.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh.FontColor = decidestructurecolor;

% for first run of GUI buttonifconfocal is initialized as 1 which
% is later needed for how descriptions of input fields are shown
global buttonifconfocal
buttonifconfocal = 1;

% Input field
global frontierthrshK1
efstructthreshfrontier1 = uieditfield(pparameters2, 'numeric', 'Position', [210 a(4)-360 50 50], ...
    'Value', threshfrontier1_values(buttonifconfocal +1), 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructthreshfrontier1,  event) ...
    structurethreshfrontier1(efstructthreshfrontier1, p2_feedbackfield));
frontierthrshK1 = efstructthreshfrontier1.Value;

% Description of input field
describstructurethresh2 = uitextarea(pparameters2, 'Position', [60 a(4)-430 150 50], ...
    'Value', texts_threshfront2pixlayer{buttonifconfocal + 1});
describstructurethresh2.Enable = 'off';
describstructurethresh2.Editable = 'off';
describstructurethresh2.FontSize = 14;
describstructurethresh2.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh2.FontColor = decidestructurecolor;

% Input field
global frontierthrshK2
efstructthreshfrontier2 = uieditfield(pparameters2, 'numeric', 'Position', ...
    [210 a(4)-430 50 50], 'Value', threshfrontier2_values(buttonifconfocal + 1), 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructthreshfrontier2,  event) ...
    structurethreshfrontier2(efstructthreshfrontier2,  p2_feedbackfield));
frontierthrshK2 = efstructthreshfrontier2.Value;

% Description of input field
describstructurethresh3 = uitextarea(pparameters2, 'Position', [60 a(4)-500 150 50], ...
    'Value', 'Threshold addition 1: If global threshold > Threshold frontier 1');
describstructurethresh3.Enable = 'on';
describstructurethresh3.Editable = 'off';
describstructurethresh3.FontSize = 12;
describstructurethresh3.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh3.FontColor = decidestructurecolor;

% Input field
global anpassungotsuthreshK1
efstructurethresh3 = uieditfield(pparameters2, 'numeric', 'Position', [210 a(4)-500 50 50], ...
    'Value', anpassungotsuthreshK1_values(buttonifconfocal +1), ...
    'ValueChangedFcn', @(efstructurethresh3,  event) structurethresh3(efstructurethresh3,  p2_feedbackfield));
anpassungotsuthreshK1 = efstructurethresh3.Value;

% Description of input field
describstructurethresh4 = uitextarea(pparameters2, 'Position', [60 a(4)-570 150 50], 'Value', ...
    'Threshold addition 2: If global threshold < Threshold frontier 1');
describstructurethresh4.Enable = 'on';
describstructurethresh4.Editable = 'off';
describstructurethresh4.FontSize = 12;
describstructurethresh4.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh4.FontColor = decidestructurecolor;

% Input field
global anpassungotsuthreshK2
efstructurethresh4 = uieditfield(pparameters2, 'numeric', 'Position', [210 a(4)-570 50 50], ...
    'Value', anpassungotsuthreshK2_values(buttonifconfocal+1), ...
    'ValueChangedFcn', @(efstructurethresh4,  event) structurethresh4(efstructurethresh4, p2_feedbackfield));
anpassungotsuthreshK2 = efstructurethresh4.Value;

% Description of input field
describstructurethresh5 = uitextarea(pparameters2, 'Position', [60 a(4)-640 150 50], 'Value', ...
    'Threshold 3: If global threshold > Threshold frontier 2');
describstructurethresh5.Enable = 'on';
describstructurethresh5.Editable = 'off';
describstructurethresh5.FontSize = 12;
describstructurethresh5.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh5.FontColor = decidestructurecolor;

% Input field
global anpassungotsuthreshK3
efstructurethresh5 = uieditfield(pparameters2, 'numeric', 'Position', [210 a(4)-640 50 50], ...
    'Value', anpassungotsuthreshK3_values(buttonifconfocal+1), ...
    'ValueChangedFcn', @(efstructurethresh5,  event) structurethresh5(efstructurethresh5, ...
    p2_feedbackfield));
anpassungotsuthreshK3 = efstructurethresh5.Value;

% Description of input field
describstructurethresh6a = uitextarea(pparameters2, 'Position', [60 a(4)-710 150 50], ...
    'Value', 'Threshold frontier after no cell detection');
describstructurethresh6a.Enable = 'off';
describstructurethresh6a.Editable = 'off';
describstructurethresh6a.FontSize = 12; % 15
describstructurethresh6a.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh6a.FontColor = decidestructurecolor;

% Input field
global frontier3
efstructthreshfrontierafternocell = uieditfield(pparameters2, 'numeric', 'Position', ...
    [210 a(4)-710 50 50], 'Value', 0.1, 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructthreshfrontierafternocell, event) ...
    structurethreshfrontierafternocell(efstructthreshfrontierafternocell, p2_feedbackfield));
frontier3 = efstructthreshfrontierafternocell.Value;

% Description of input field
describstructurethresh6 = uitextarea(pparameters2, 'Position', [60 a(4)-780 150 50], ...
    'Value', 'Threshold subtraction from global threshold after no cell detection');
describstructurethresh6.Enable = 'off';
describstructurethresh6.Editable = 'off';
describstructurethresh6.FontSize = 12;
describstructurethresh6.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh6.FontColor = decidestructurecolor;

% Input field
global anpassungotsuthreshKsubtr
efstructurethresh6 = uieditfield(pparameters2, 'numeric', 'Position', [210 a(4)-780 50 50], ...
    'Value', 0.1, 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructurethresh6,  event) structurethresh6(efstructurethresh6, ...
    p2_feedbackfield));
anpassungotsuthreshKsubtr = efstructurethresh6.Value;

% Description of input field
describstructurethresh7 = uitextarea(p2, 'Position', [60 a(4)-220 150 50], 'Value', ...
    'Minimum number of pixels per layer for Range filter ');
describstructurethresh7.Enable = 'off';
describstructurethresh7.Editable = 'off';
describstructurethresh7.FontSize = 12;
describstructurethresh7.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh7.FontColor = decidestructurecolor;

% Input field
global thresholdnumpixelsforrangefilt
efstructurethresh7 = uieditfield(p2, 'numeric', 'Position', [210 a(4)-220 50 50], 'Value', ...
    thresholdnumpixelsforrangefilt_values(buttonifconfocal +1), 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructurethresh7,  event) ...
    structurethresh7(efstructurethresh7, p2_feedbackfield));
thresholdnumpixelsforrangefilt = efstructurethresh7.Value;

% Description of input field
describstructurethresh7b = uitextarea(p2, 'Position', [60 a(4)-290 150 50], 'Value', ...
    'Maximum number of pixels per layer for Range filter ');
describstructurethresh7b.Enable = 'off';
describstructurethresh7b.Editable = 'off';
describstructurethresh7b.FontSize = 12;
describstructurethresh7b.BackgroundColor = [0.7 0.7 0.7];
describstructurethresh7b.FontColor = decidestructurecolor;


thresholdnumpixelsforrangefilt_valuesmaximum = [2500, 55000];

% Input field
global thresholdnumpixelsforrangefiltmaximum
efstructurethresh7b = uieditfield(p2, 'numeric', 'Position', [210 a(4)-290 50 50], 'Value', ...
    thresholdnumpixelsforrangefilt_valuesmaximum(buttonifconfocal +1), 'Enable', 'off', ...
    'ValueChangedFcn', @(efstructurethresh7b,  event) ...
    structurethresh7b(efstructurethresh7b, p2_feedbackfield));
thresholdnumpixelsforrangefiltmaximum = efstructurethresh7b.Value;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% intensity

% choose color
decideintensitycolor = [0 0 0];

% panel to right side with axis showing image
p2b = uipanel(tab2, 'Position', [880  0 1700 960], 'BackgroundColor',bluishgrey);
ax = uiaxes('Parent', p2b, 'Position', [50 a(4)-750 700 700 ], 'BackgroundColor', bluishgrey);
ax.Toolbar.Visible = 'off';
ax.Interactions = [panInteraction zoomInteraction];
ax.XTick = [];
ax.YTick = [];
ax.Box = 'on';

% Description of input field
describintensthreshoof = uitextarea(pparameters2, 'Position', [570 a(4)-290 150 50], 'Value',...
    'Threshold addition for out of focus light for the first 2 layers');
describintensthreshoof.Enable = 'off';
describintensthreshoof.Editable = 'off';
describintensthreshoof.FontSize = 12;
describintensthreshoof.BackgroundColor = [0.7 0.7 0.7];
describintensthreshoof.FontColor = decideintensitycolor;

% Input field
global anpassungotsuthresh1
efintensthreshoof = uieditfield(pparameters2, 'numeric', 'Position', [720 a(4)-290 50 50], 'Value',...
    0, 'Enable' , 'off', ...
    'ValueChangedFcn', @(efintensthreshoof,  event) intensthreshoof(efintensthreshoof, p2_feedbackfield));
anpassungotsuthresh1 = efintensthreshoof.Value;

% Description of input field
describfrontieradditional = uitextarea(pparameters2, 'Position', [570 a(4)-360 150 50], 'Value', ...
    'Threshold addition to global threshold for out of focus light');
describfrontieradditional.Enable = 'off';
describfrontieradditional.Editable = 'off';
describfrontieradditional.FontSize = 12;
describfrontieradditional.BackgroundColor = [0.7 0.7 0.7];
describfrontieradditional.FontColor = decideintensitycolor;

% Input field
global frontieraddition1
effrontieradditional = uieditfield(pparameters2, 'numeric', 'Position', [720 a(4)-360 50 50], ...
    'Value', 0, 'Enable', 'off', ...
    'ValueChangedFcn', @(effrontieradditional, event) frontieradditionalfcnoof(effrontieradditional, p2_feedbackfield));
frontieraddition1 = effrontieradditional.Value;

% Description of input field
describintensthreshold1 = uitextarea(pparameters2, 'Position', [350 a(4)-220 150 50], 'Value', ...
    'Threshold frontier I1');
describintensthreshold1.Enable = 'on';
describintensthreshold1.Editable = 'off';
describintensthreshold1.FontSize = 14;
describintensthreshold1.BackgroundColor = [0.7 0.7 0.7];
describintensthreshold1.FontColor = decideintensitycolor;

% Input field
global anpassungintensotsufrontier1
efintensthreshold1 = uieditfield(pparameters2, 'numeric', 'Position', [500 a(4)-220 50 50], ...
    'Value', 0.3, ...
    'ValueChangedFcn', @(efintensthreshold1,  event) ...
    efintensthreshold1fcn(efintensthreshold1, p2_feedbackfield));
anpassungintensotsufrontier1 = efintensthreshold1.Value;

% Description of input field
describintensthreshold1 = uitextarea(pparameters2, 'Position', [350 a(4)-290 150 50], 'Value', ...
    text_anpassungintensotsuthresh2{buttonifconfocal + 1});
describintensthreshold1.Enable = 'on';
describintensthreshold1.Editable = 'off';
describintensthreshold1.FontSize = 12;
describintensthreshold1.BackgroundColor = [0.7 0.7 0.7];
describintensthreshold1.FontColor = decideintensitycolor;

% Input field
global anpassungotsuthresh2
efintensthresholdadditionstruct = uieditfield(pparameters2, 'numeric', 'Position', ...
    [500 a(4)-290 50 50], 'Value', anpassungotsuthresh2_values(buttonifconfocal + 1), ...
    'ValueChangedFcn', @(efintensthresholdadditionstruct,  event) ...
    efintensthresholdadditionstructfcn(efintensthresholdadditionstruct, p2_feedbackfield));
anpassungotsuthresh2 = efintensthresholdadditionstruct.Value;

% Checkbox for taking parameters below into account or not
% (threshold adaptions for first two layers, moving layers)
global  buttonforoutoffocuslight
outoffocusoption = uicheckbox(p2, 'Position', [570 a(4)-195 300 80], 'Text', ...
    'Take in account: out of focus', 'Value', outoffocusoption_values(buttonifconfocal + 1),...
    'Enable', 'off',  ...
    'ValueChangedFcn', @(outoffocusoption, event) checkifoutoffocus(outoffocusoption, event)) ;
buttonforoutoffocuslight  = outoffocusoption.Value;

% Description of input field
describintensthresh2 = uitextarea(pparameters2, 'Position', [350 a(4)-360 150 50], 'Value',...
    'Threshold addition to layer after absolutely no cell detection');
describintensthresh2.Enable = 'on';
describintensthresh2.Editable = 'off';
describintensthresh2.FontSize = 12;
describintensthresh2.BackgroundColor = [0.7 0.7 0.7];
describintensthresh2.FontColor = decideintensitycolor;

% Input field
global threshforveryfaint
efintensthresh2faint = uieditfield(pparameters2, 'numeric', 'Position', [500 a(4)-360 50 50],...
    'Value', 0, ...
    'ValueChangedFcn', @(efintensthresh2faint, event) ...
    intensthreshadditionveryfaint(efintensthresh2faint, p2_feedbackfield));
threshforveryfaint = efintensthresh2faint.Value;

% Description of input field
describp2_1t3 = uitextarea(p2, 'Position', [570 a(4)-220 150 50], 'Value', ...
    'Reposition of layers along depth: Move found layers by value');
describp2_1t3.Enable = 'off';
describp2_1t3.Editable = 'off';
describp2_1t3.FontSize = 12;
describp2_1t3.FontColor = decideintensitycolor;
describp2_1t3.BackgroundColor = [0.7 0.7 0.7];

% Input field
global tomodulate
efintenstomodulateoof = uieditfield(p2, 'numeric', 'Position', [720 a(4)-220 50 50], ...
    'Value', 2, 'Enable', 'off', ...
    'ValueChangedFcn', @(efintenstomodulateoof, event) ...
    intenstomodulateoof(efintenstomodulateoof, p2_feedbackfield));
tomodulate = efintenstomodulateoof.Value;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% more general parameters
% decision on color
generalparameterscolor = [0 0 0];

% Heading
describp2general_1t = uitextarea(p2, 'Position', [400 a(4)-430 300 25], 'Value', 'General Parameters');
describp2general_1t.Enable = 'on';
describp2general_1t.Editable = 'off';
describp2general_1t.FontSize = 16;
describp2general_1t.BackgroundColor = [0.7 0.7 0.7];
describp2general_1t.FontColor = darkbluishgrey;
describp2general_1t.FontWeight = 'bold';
describp2general_1t.HorizontalAlignment = 'center';

% Moving y-position
vary_var = 60;

% Description of input field
describp2_1t4 = uitextarea(p2, 'Position', [570 a(4)-440-vary_var 150 40], 'Value', ...
    'Minimum number of images per cell (+/-1)');
describp2_1t4.Enable = 'on';
describp2_1t4.Editable = 'off';
describp2_1t4.FontSize = 12;
describp2_1t4.BackgroundColor = [0.7 0.7 0.7];
describp2_1t4.FontColor = generalparameterscolor;

% Input field
global minnumofimagescell
efintensminnumimcell = uieditfield(p2, 'numeric', 'Position', [720 a(4)-440-vary_var 50 40], 'Value', 6, ...
    'ValueChangedFcn', @(efintensminnumimcell, event) ...
    intensminnumimcell(efintensminnumimcell, p2_feedbackfield));
minnumofimagescell = efintensminnumimcell.Value;

% Description of input field
describp2_1t4b = uitextarea(p2, 'Position', [570 a(4)-480-vary_var 150 40], 'Value', ...
    'Maximum number of images per cell (+/-1)');
describp2_1t4b.Enable = 'on';
describp2_1t4b.Editable = 'off';
describp2_1t4b.FontSize = 12;
describp2_1t4b.BackgroundColor = [0.7 0.7 0.7];
describp2_1t4b.FontColor = generalparameterscolor;

% Input field
global maxnumofimagescell
efintensmaxnumimcell = uieditfield(p2, 'numeric', 'Position', [720 a(4)-480-vary_var 50 40], ...
    'Value', 16, ...
    'ValueChangedFcn', @(efintensmaxnumimcell, event) ...
    intensmaxnumimcell(efintensmaxnumimcell, p2_feedbackfield));
maxnumofimagescell = efintensmaxnumimcell.Value;

% Description of input field
describp2_1t5 = uitextarea(p2, 'Position', [350 a(4)-580-vary_var 150 40], 'Value', ...
    maxpixnumlayer_text{buttonifconfocal + 1});
describp2_1t5.Enable = 'on';
describp2_1t5.Editable = 'off';
describp2_1t5.FontSize = 12;
describp2_1t5.BackgroundColor = [0.7 0.7 0.7];
describp2_1t5.FontColor = generalparameterscolor;

% Input field
global maxpixnumlayer
efmaxpixnumlayer = uieditfield(p2, 'numeric', 'Position', [500 a(4)-580-vary_var 60 40], ...
    'Value', maxpixnumlayer_values(buttonifconfocal +1), ...
    'ValueChangedFcn', @(efmaxpixnumlayer, event) ...
    intensmaxpixnumlayerfcn(efmaxpixnumlayer, p2_feedbackfield));
maxpixnumlayer = efmaxpixnumlayer.Value;

% Description of input field
describp2_1t5b = uitextarea(p2, 'Position', [350 a(4)-540-vary_var 150 40], ...
    'Value', 'Minimum number of pixels in layer');
describp2_1t5b.Enable = 'on';
describp2_1t5b.Editable = 'off';
describp2_1t5b.FontSize = 12;
describp2_1t5b.BackgroundColor = [0.7 0.7 0.7];
describp2_1t5b.FontColor = generalparameterscolor;

% Input field
global minpixnumlayer
efminpixnumlayer = uieditfield(p2, 'numeric', 'Position', [500 a(4)-540-vary_var 60 40],...
    'Value', 250, ...
    'ValueChangedFcn', @(efminpixnumlayer, event) ...
    intensminpixnumlayerfcn(efminpixnumlayer, p2_feedbackfield));
minpixnumlayer = efminpixnumlayer.Value;

% Description of input field
describp2_1t6 = uitextarea(p2, 'Position', [350 a(4)-440-vary_var 150 40], 'Value',...
    'Minimum number of pixels for each cell');
describp2_1t6.Enable = 'on';
describp2_1t6.Editable = 'off';
describp2_1t6.FontSize = 12;
describp2_1t6.BackgroundColor = [0.7 0.7 0.7];
describp2_1t6.FontColor = generalparameterscolor;

% Input field
global minnumberpixelstodetectforcell
efintensminnumpixcell = uieditfield(p2, 'numeric', 'Position', [500 a(4)-440-vary_var 60 40], ...
    'Value', 1000, ...
    'ValueChangedFcn', @(efintensminnumpixcell, event) ...
    intensminnumpixcell(efintensminnumpixcell, p2_feedbackfield));
minnumberpixelstodetectforcell = efintensminnumpixcell.Value;

% Description of input field
describp2_1t6b = uitextarea(p2, 'Position', [350 a(4)-480-vary_var 150 40], 'Value',...
    'Maximum number of pixels for each cell');
describp2_1t6b.Enable = 'on';
describp2_1t6b.Editable = 'off';
describp2_1t6b.FontSize = 12;
describp2_1t6b.BackgroundColor = [0.7 0.7 0.7];
describp2_1t6b.FontColor = generalparameterscolor;

% Input field
global maxnumpixelwholecell
efintensmaxnumpixcell= uieditfield(p2, 'numeric', 'Position', [500 a(4)-480-vary_var 60 40], ...
    'Value', 20000000, ...
    'ValueChangedFcn', @(efintensmaxnumpixcell, event) ...
    intensmaxnumpixcell(efintensmaxnumpixcell, p2_feedbackfield));
maxnumpixelwholecell = efintensmaxnumpixcell.Value;

% Checkbox for applying threshold parameters (just layer thresholding or all) on cell
global buttonforapplythreshold
checkifapplythresholding = uicheckbox(p2, 'Position', [620 a(4)-680-vary_var 150 50], ...
    'Text', 'Apply thresholding', 'Value', 0, ...
    'ValueChangedFcn', @(checkifapplythresholding, event) ...
    checkifapplythresholdingfcn(checkifapplythresholding, p2_feedbackfield, ax));
buttonforapplythreshold  = checkifapplythresholding.Value;

% Checkbox for applying layer thresholding on cell
global buttonforjuststructure
checkifjuststructure = uicheckbox(p2, 'Position', [620 a(4)-710-vary_var 300 50], 'Text',...
    'Show just layer thresholding', 'Value', 1, ...
    'ValueChangedFcn', @(checkifjuststructure, event) ...
    checkifshowjuststructure(checkifjuststructure, p2_feedbackfield)) ;
buttonforjuststructure = checkifjuststructure.Value;

% Checkbox for showing thresholding images during run
global buttontoshow
checkifrunopen = uicheckbox(p2, 'Position', [620 a(4)-740-vary_var 250 50], 'Text',...
    'Program Run: Visible cell pre-view making?', ...
    'ValueChangedFcn', @(checkifrunopen, event) checkifvisible(checkifrunopen, event)) ;
buttontoshow = checkifrunopen.Value;

% Description
p2channeltoshow = uitextarea(p2b, 'Position', [50 a(4)-810 150 40], 'Value', ...
    'Number of channel to show');
p2channeltoshow.Enable = 'on';
p2channeltoshow.Editable = 'off';
p2channeltoshow.FontSize = 13;
p2channeltoshow.BackgroundColor = [0.2 0.2 0.2];

% Input field
efp3channeltoshow = uieditfield(p2b, 'numeric', 'Position', [200 a(4)-810 50 40], 'Value', 1, ...
    'ValueChangedFcn', @(efp3channeltoshow, event) ...
    channeltoshow(efp3channeltoshow, ax, p2_feedbackfield));
global channeltoshowval
if isempty(channeltoshowval)
    channeltoshowval = 1;
else
    channeltoshowval = efp3channeltoshow.Value;
end

% Checkbox to look at overview over channels
global buttonoverviewoverchannels
checkoverviewchannels =  uicheckbox(p2b, 'Position', [570 a(4)-790 300 50], 'Text',...
    'Overview over channels with mask', 'Value', 0, ...
    'ValueChangedFcn', @(checkoverviewchannels, event) ...
    checkoverviewchannels_fcn(checkoverviewchannels ,ax ));
buttonoverviewoverchannels  = checkoverviewchannels.Value;

% Introduction of variable slidervalue which is later connected to slider
global slidervalue
if isempty(slidervalue)
    slidervalue = 1;
end
slider = uislider(p2b,  'Position', [300 a(4)-790 140 50], 'Value', 1, ...
    'ValueChangedFcn', @(slider, event) SliderValueChanged(slider, ax, p2_feedbackfield)); % , ...
slidervalue = slider.Value;
if slider.Value ==0
    slidervalue = 1;
end

slidernumber = uieditfield(p2b, 'numeric', 'Position', [350 a(4)-770 40 20], ...
    'Value', slidervalue, ...
    'ValueChangedFcn', @(slidernumber, event) ...
    slidernumber_fcn(slidernumber, slider, event, ax, p2_feedbackfield));



% Introduction of numberofimages to make axis of slider
global numberofimages

try slider.Limits = [1 numberofimages];
catch
    slider.Limits = [1 2];
end

% Introduce ticks of slider
if length(slider.Limits(1):1:slider.Limits(2)) < 10
    slider.MajorTicks = slider.Limits(1):1:slider.Limits(2);
    slider.MinorTicks = [];
end

if (10 < length(slider.Limits(1):1:slider.Limits(2))) &&  ( length(slider.Limits(1):1:slider.Limits(2))< 100)
    slider.MajorTicks = slider.Limits(1):10:slider.Limits(2);
    slider.MinorTicks = slider.Limits(1):1:slider.Limits(2);
end

if length(slider.Limits(1):1:slider.Limits(2)) > 100
    slider.MajorTicks = slider.Limits(1):100:slider.Limits(2);
    slider.MinorTicks = slider.Limits(1):10:slider.Limits(2);
end

% Button to move slider to left and decrease slidervalue when going through
% cells before cell detection
buttonsliderleft = uibutton(p2b, 'Position', [455 a(4)-810 50 50], 'Text', 'Back', ...
    'ButtonPushedFcn', @(buttonsliderleft, event) ...
    buttonsliderleftfcn(buttonsliderleft, slider, ax, p2_feedbackfield, slidernumber));

% Button to move slider to right and increase slidervalue when going through
% cells before cell detection
buttonsliderright = uibutton(p2b, 'Position', [505 a(4)-810 50 50], 'Text', 'Next', ...
    'ButtonPushedFcn', @(buttonsliderright, event) ...
    buttonsliderrightfcn(buttonsliderright, slider, ax, p2_feedbackfield, slidernumber));

% Checkbox to show cell detection differently
% (image vs. mask, or total layers vs. selected layers)
global buttonforcomparison
checkcomparisonimages = uicheckbox(p2b, 'Position', [570 a(4)-830 300 50], 'Text', ...
    'Comparison to original image', 'Value', 0, ...
    'ValueChangedFcn', @(checkcomparisonimages, event) ...
    checkcomparisonimagesfcn(checkcomparisonimages ,ax ));
buttonforcomparison  = checkcomparisonimages.Value;

% Drop down menu to choose normalization method for distance between charge
% weigthed centers
global buttondiameter
dropdowndiameter = uidropdown(p2b, 'Position', [50 a(4)-870 250 40], 'Items',...
    {'1) Normalized by maximal diameter', '2) Normalized by averaged diameter'}, 'ItemsData', [1 0], ...
    'ValueChangedFcn', @(dropdowndiameter,event) dropdowndiameter_fcn(dropdowndiameter));
buttondiameter = dropdowndiameter.Value;

% Drop down menu to choose normalization method for charge
global buttongeneralqnormalization
dropdownifgeneralqnormalization = uidropdown(p2b, 'Position', [320 a(4)-870 350 40], 'Items', ...
    {'1) Charge normalized dependent on volume of cell (bit)', ...
    '2) Charge normalized dependent on protein distribution of cell (bit)', ...
    '3) Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges', ...
    '4) Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges', ...
    '5) Cell charge normalized corresponding to mean value of charge multiplied by halved number of total charges', ...
    '6) Own max for each cell (else: dependent on bit)', ...
    }, 'ItemsData', [1 2 3 4 5 6], ...
    'ValueChangedFcn', @(dropdownifgeneralqnormalization, event) ...
    dropdownifgeneralqnormalization_fcn(dropdownifgeneralqnormalization, event));
buttongeneralqnormalization = dropdownifgeneralqnormalization.Value;

% Checkbox to save mask tiff images and cell detection images
global saveimagesyes
checkifsaveimages = uicheckbox(p2b, 'Position', [50 a(4)-925 300 50], 'Value', 1,...
    'Text', 'Save images inclusive mask (latter as tif-stack)',...
    'ValueChangedFcn', @(checkifsaveimages, event) checkifsaveimagesfcn(checkifsaveimages));
saveimagesyes = checkifsaveimages.Value;


% Checkbox to calculate and export all possible normalizations
global buttonallnormalizations
checkifallnormalizations = uicheckbox(p2b, 'Position', [50 a(4)-950 300 20], 'Value', 0,...
    'Text', 'Calculate all normalization possibilities',...
    'ValueChangedFcn', @(checkifallnormalizations, event) checkifallnormalizationsfcn(checkifallnormalizations));
buttonallnormalizations = checkifallnormalizations.Value;


% Checkbox to normalize cell images to total intensity value = 1
global buttoneachcellchargenormalizedcorrespondingtototalvalue1
checkifownmask4 = uicheckbox(p2b, 'Position', [340 a(4)-950 200 20], 'Value', 0, 'Text', 'Cell total intensity normalized to 1');
buttoneachcellchargenormalizedcorrespondingtototalvalue1 = checkifownmask4.Value;

% Checkbox to calculate Pearson's correlation coefficient
global buttonPearson
checkifpearson = uicheckbox(p2b, 'Position', [600 a(4)-950 300 20], 'Value', 0, 'Text', 'Pearson correlation coefficient', ...
    'ValueChangedFcn', @(checkifpearson, event) checkifpearsonfcn(checkifpearson, event));
buttonPearson = checkifpearson.Value;


% Checkbox to normalized cell images to average intensity value = 1
global buttoneachcellnormalizedtoaveragevalue1
checkifownmask3 = uicheckbox(p2b, 'Position', [340 a(4)-925 300 50], 'Value', 0, 'Text', ...
    'Cell average intensity normalized to 1',...
    'ValueChangedFcn', @(checkifownmask3, event) checkifownmaskfcn3(checkifownmask3, event, checkifownmask4));
buttoneachcellnormalizedtoaveragevalue1 = checkifownmask3.Value;

% Function needing parameters of checkifownmask3 and checkifownmask4, thus
% introduced separated from GUI element
checkifownmask4.ValueChangedFcn = @(checkifownmask4, event) checkifownmaskfcn4(checkifownmask4, event, checkifownmask3);

% Checkbox to adapt advanced parameter settings for cell detection
global buttonifadvanced
checkifadvanced = uicheckbox(p2, 'Position', [400 a(4)-95 500 50], 'Value', 0,  'Text', 'Advanced',...
    'FontSize', 16, 'ValueChangedFcn', @(checkifadvanced, event) ...
    checkifadvancedfcn(checkifadvanced, efstructthreshfrontier1 ,describstructurethresh, ...
    efstructthreshfrontier2, describstructurethresh2, efstructthreshfrontierafternocell, ...
    describstructurethresh6a, outoffocusoption, describintensthreshoof, describfrontieradditional, ...
    efintensthreshoof, effrontieradditional, describp2_1t3, efintensthreshoof,describstructurethresh6,...
    efstructurethresh6 , describstructurethresh7,describstructurethresh7b, efstructurethresh7 , efstructurethresh7b, efintenstomodulateoof));
buttonifadvanced = checkifadvanced.Value;

% Checkbox to use more than one channel for cell detection
global buttonifcellrecognitionseveralchannels
checkifseveralchannelsforcelldetection = uicheckbox(p2, 'Position', [300 a(4)-770 200 50], 'Value', 0,...
    'Text', 'Several channels for cell detection', ...
    'ValueChangedFcn', @(checkifseveralchannelsforcelldetection, event) ...
    checkifseveralchannelscelldetection(checkifseveralchannelsforcelldetection, event));
buttonifcellrecognitionseveralchannels = checkifseveralchannelsforcelldetection.Value;

% Input field for giving channels for cell detection
global channelsforcelldetection
channelsforcelldetection_field = uieditfield(p2, 'Text', 'Position', [510 a(4)-755 60 20], 'Value', ...
    '1, 2, 3', 'ValueChangedFcn', ...
    @(channelsforcelldetection_field, event) channelcelldetection_fcn(channelsforcelldetection_field, ...
    event));
channelsforcelldetection = str2double(strsplit(channelsforcelldetection_field.Value, ','))';


% Checkbox for weighting channels for cell detection
global buttonifweightingseveralchannels
weighting_textfield = uicheckbox(p2, 'Position', [300 a(4)-800 200 50], 'Value', 0, 'Text', ...
    'Weighting of channels', 'ValueChangedFcn',...
    @(weighting_textfield, event) weightingofchannels_fcn(weighting_textfield, event));
buttonifweightingseveralchannels = weighting_textfield.Value;

% Input field for giving weights for channel weighting
global weightingforcelldetection
weightingforcelldetection_field = uieditfield(p2, 'Text', 'Position', [510 a(4)-785 60 20], ...
    'Value', '1, 1, 1', ...
    'ValueChangedFcn', @(weightingforcelldetection_field, event) ...
    weightingcelldetection_fcn(weightingforcelldetection_field, event));
weightingforcelldetection = str2double(strsplit(weightingforcelldetection_field.Value, ','))';

% as already before for text on tab p2 buttonifconfocal needed: implemented
% before as global variable of value 1. as function dependent on other
% values of second tab, uicheckbox implemented after their introduction
% global buttonifconfocal
checkifconfocal = uicheckbox(p1, 'Position', [700 a(4)-750 250 60], 'Text', 'Confocal', 'Value',...
    1, 'FontSize', 16, 'ValueChangedFcn',...
    @(checkifconfocal, event) checkifconfocalfcn(checkifconfocal,  ...
    efstructthreshfrontier1 , threshfrontier1_values, efstructthreshfrontier2,threshfrontier2_values, ...
    efstructurethresh3, anpassungotsuthreshK1_values, efstructurethresh4, anpassungotsuthreshK2_values,...
    efstructurethresh5, anpassungotsuthreshK3_values, efstructurethresh7, efstructurethresh7b, ...
    thresholdnumpixelsforrangefilt_values, thresholdnumpixelsforrangefilt_valuesmaximum, describintensthreshold1, text_anpassungintensotsuthresh2, ...
    efintensthresholdadditionstruct,anpassungotsuthresh2_values , ...
    outoffocusoption, outoffocusoption_values, describp2_1t5, maxpixnumlayer_text,efmaxpixnumlayer, ...
    maxpixnumlayer_values,describstructurethresh2, texts_threshfront2pixlayer , checkifapplythresholding,...
    describp2_1t5b, efminpixnumlayer));
buttonifconfocal = checkifconfocal.Value;

% Heading
describconfocal = uitextarea(p1, 'Position', [700 a(4)-640 250 30], 'Value', 'Detection option');
describconfocal.Enable = 'on';
describconfocal.Editable = 'off';
describconfocal.FontSize = 18;
describconfocal.BackgroundColor = [0.2 0.2 0.2];
describconfocal.FontWeight = 'bold';

% Description of Heading
describ1confocal = uitextarea(p1, 'Position', [700 a(4)-700 250 60], 'Value', ...
    'Cell detection-related option. For confocal i.a. more filling of holes is performed.');
describ1confocal.Enable = 'on';
describ1confocal.Editable = 'off';
describ1confocal.FontSize = 14;
describ1confocal.BackgroundColor = [0.7 0.7 0.7];

% Function run for initializing text fields and parameters for option 'confocal'
checkifconfocalfcn(checkifconfocal,  efstructthreshfrontier1, threshfrontier1_values, ...
    efstructthreshfrontier2,threshfrontier2_values, efstructurethresh3, anpassungotsuthreshK1_values, ...
    efstructurethresh4, anpassungotsuthreshK2_values,efstructurethresh5, anpassungotsuthreshK3_values,...
    efstructurethresh7, efstructurethresh7b, thresholdnumpixelsforrangefilt_values,thresholdnumpixelsforrangefilt_valuesmaximum, describintensthreshold1, ...
    text_anpassungintensotsuthresh2, efintensthresholdadditionstruct,anpassungotsuthresh2_values , ...
    outoffocusoption, outoffocusoption_values, describp2_1t5, maxpixnumlayer_text, efmaxpixnumlayer,  ...
    maxpixnumlayer_values,describstructurethresh2, texts_threshfront2pixlayer, checkifapplythresholding, ...
    describp2_1t5b, efminpixnumlayer);

% Button to save cell detection parameters for memory and analysis of
% similar data sets
savesettings = uibutton(p2, 'Position', [100 a(4)-830-vary_var 120 60], 'Text', 'Save Settings', ...
    'FontWeight', 'bold', 'FontSize', 16, 'BackgroundColor', [0.7 0.7 0.7], ...
    'ButtonPushedFcn', @(btn, event) SaveSettingsButtonFcn(btn, event, text_anpassungintensotsuthresh2,...
    maxpixnumlayer_text, texts_threshfront2pixlayer, p2_feedbackfield));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TAB 3

% Panels
p3_a = uipanel(tab3, 'Position', [0 0 880 960], 'BackgroundColor',bluishgrey);
p3_b = uipanel(tab3, 'Position', [880 0 1700 960], 'BackgroundColor',bluishgrey);

% Axis to show cells that ran through cell detection
ax2 = uiaxes('Parent', p3_a, 'Position', [50 a(4)-750 700 700 ], 'BackgroundColor', bluishgrey);
ax2.Toolbar.Visible = 'off';
ax2.Interactions = [panInteraction zoomInteraction];
ax2.XTick = [];
ax2.YTick = [];
ax2.Box = 'on';

% Description of output field
p3_feedback = uitextarea(p3_b, 'Position', [160 a(4)-650 500 30], 'Value', 'Feedback to user');
p3_feedback.Enable = 'on';
p3_feedback.Editable = 'off';
p3_feedback.FontSize = 16;
p3_feedback.BackgroundColor = [0.5 0.5 0.5];

% Output field
p3_feedbackfield = uitextarea(p3_b, 'Position', [160 10 500 a(4)-650-10], 'Value',...
    'Here Text should appear');
p3_feedbackfield.Enable = 'on';
p3_feedbackfield.Editable = 'off';
p3_feedbackfield.FontSize = 12;
p3_feedbackfield.BackgroundColor = [0.5 0.5 0.5];

% Description of input field
p3channeltoshow = uitextarea(p3_a, 'Position', [50 a(4)-810 150 40], 'Value', ...
    'Number of channel to show');
p3channeltoshow.Enable = 'on';
p3channeltoshow.Editable = 'off';
p3channeltoshow.FontSize = 13;
p3channeltoshow.BackgroundColor = [0.2 0.2 0.2];

% Input field
global channeltoshowval2
efp3channeltoshow2 = uieditfield(p3_a, 'numeric', 'Position', [200 a(4)-810 50 40], 'Value', 1, ...
    'ValueChangedFcn', @(efp3channeltoshow2, event) channeltoshow2(efp3channeltoshow2, ax2, ...
    p3_feedbackfield));

if isempty(channeltoshowval2)
    channeltoshowval2 = 1;
else
    channeltoshowval2 = efp3channeltoshow2.Value;
end

% Checkbox to look at overview over channels
checkoverviewchannels2 =  uicheckbox(p3_a, 'Position', [500 a(4)-850 300 22], 'Text', ...
    'Overview over channels with mask', 'Value', 0);


% Introduction of value later connected to slider2
global slidervalue2
if isempty(slidervalue2) || slidervalue2 == 0
    slidervalue2 = 1;
end



% Introduction of table for results
global dipolmomentnormalized_finished
Dataresultstable = dipolmomentnormalized_finished;
tableresults = uitable(p3_b, 'Position', [10 a(4)-600 800 500], 'Data', Dataresultstable);


% Input field to get pathway to data that goes for analysis,
% user can copy paste
ef1 = uieditfield(p1, 'Text', 'Position', [250 a(4)-210 350 25], 'Value', '', ...
    'ValueChangedFcn', @(ef1, event ) pathwaytodatafolder(ef1, slider, ax, p2_feedbackfield, tableresults, p3_feedbackfield, p1_feedbackfield));

% Checkbox for user clicking through to data import pathway
checkboxpathwaytodatafolder = uicheckbox(p1, 'Position', [605 a(4)-210 350 25], 'Text', 'Browse', ...
    'ValueChangedFcn', @(checkboxpathwaytodatafolder, event) checkboxpathwaytodatafolderfcn(checkboxpathwaytodatafolder, ef1, slider, ax, p2_feedbackfield, tableresults, p3_feedbackfield, p1_feedbackfield));

% Checkbox for user clicking through to image export pathway
checkboxpathwaytosaveimagesfolder = uicheckbox(p1, 'Position', [605 a(4)-440 350 25], 'Text', 'Browse', ...
    'ValueChangedFcn', @(checkboxpathwaytosaveimagesfolder, event) checkboxpathwaytosaveimagesfcn(checkboxpathwaytosaveimagesfolder, ef2));

% Checkbox for user clicking through to data export pathway
checkboxpathwaytosavedatafolder = uicheckbox(p1, 'Position', [605 a(4)-490 350 25], 'Text', 'Browse', ...
    'ValueChangedFcn', @(checkboxpathwaytosavedatafolder, event) checkboxpathwaytosavedatafcn(checkboxpathwaytosavedatafolder, ef3 ));

% Input field of Tab 1 to get channel names.
% As dependent on tableresults, located here in code.
global allchannelnames
ef4 = uieditfield(p1, 'Text', 'Position', [250 a(4)-780 350 25], 'Value', '', ...
    'ValueChangedFcn', @(ef4,event) channelnames(ef4, slider, ax, tableresults, p1_feedbackfield));
allchannelnames = ef4.Value;



% Button to load previously saved settings of certain parameters.
% Placed here in code as dependent on parameters introduced later than in
% Tab 1
loadsettings = uibutton(p1, 'Position', [350 a(4)-600 200 50], 'Text', 'Load Settings', 'FontWeight', 'bold', 'BackgroundColor', [0.7 0.7 0.7], 'FontSize', 16);

% Button that needs to be pushed to delete certain global values for new sample
% placed here as dependent on later introduced parts of GUI
resetsettingsafterdone = uibutton(p1, 'Position', [100 a(4)-600 200 50], 'Text', 'Next Data Folder',...
    'FontWeight', 'bold', 'BackgroundColor', [0.7 0.7 0.7], 'FontSize', 16);
description_resetsettingsafterdone = uitextarea(p1, 'Position', [100 a(4)-650 200 40], 'Value',...
    '(click when moving on to analysis of next image data set)');
description_resetsettingsafterdone.Enable = 'on';
description_resetsettingsafterdone.Editable = 'off';
description_resetsettingsafterdone.FontSize = 12;
description_resetsettingsafterdone.BackgroundColor = [0.5 0.5 0.5];

% If screen size is sufficient:
% option to choose between  viewing panels with images of possibilities vs.
% seeing all parameters at once. Thus, several GUI elements need to be
% implemented like buttons for moving through panels, and a checkbox to
% switch between viewing options.
if notoallatonce_parameters == 0
    global allatonce_parameters sliderhidepanelsvalue
    
    sliderhidepanelsvalue = 0;
    buttonsliderlefthidepanels = uibutton(p1, 'Position', [800 a(4)-597 50 50], 'Text', 'Back', ...
        'ButtonPushedFcn', @(buttonsliderlefthidepanels, event) buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
        paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
        paneltohidedatasetrerunoptions,     ...
        describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
        ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
        describ3, describ4,t4,describ4b,ef4b, ef4, ...
        describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
        checkifconfocal,describconfocal,describ1confocal, ...
        describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
        describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
        tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone ));
    
    buttonsliderrighthidepanels = uibutton(p1, 'Position', [850 a(4)-597 50 50], 'Text', 'Next', ...
        'ButtonPushedFcn', @(buttonsliderrighthidepanels, event) buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
        paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
        paneltohidedatasetrerunoptions,    ...
        describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
        ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
        describ3, describ4,t4,describ4b,ef4b, ef4, ...
        describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
        checkifconfocal,describconfocal, describ1confocal, ...
        describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
        describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
        tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone));
    
    checkbox_allatonceparameters = uicheckbox(p1, 'Position', [725, a(4)-550 250 20], 'Text', 'See all parameters at once', 'Value', 0, 'FontSize', 16,...
        'ValueChangedFcn', @(checkbox_allatonceparameters, event ) checkbox_allatonceparametersfcn(checkbox_allatonceparameters, ...
        paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
        paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions, buttonsliderlefthidepanels, buttonsliderrighthidepanels, ...
        describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
        ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
        describ3, describ4,t4,describ4b,ef4b,ef4, ...
        describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
        checkifconfocal,describconfocal, describ1confocal, ...
        describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
        describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport,nottotakeofcellimport, describ4mask, maskimport, ...
        tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
        axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, ...
        axes_paneltohidedatasetrerunoptions, ...
        hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
        describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6, description_resetsettingsafterdone));
    allatonce_parameters = checkbox_allatonceparameters.Value;
    
    decisionview = uidropdown(p1, 'Position', [1050 400 100 20], 'Items', ...
        {'1) All panels', '2) See selected panels',  '3) Minimalist without panels'}, ...
        'ItemsData', [1 2 4], 'Value', 1, ...
        'ValueChangedFcn', @(decisionview, event) decisionviewfcn(decisionview, checkbox_allatonceparameters,  paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
        paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions, buttonsliderlefthidepanels, buttonsliderrighthidepanels,...
        describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone, loadsettings,...
        ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
        describ3, describ4,t4,describ4b,ef4b, ef4, ...
        describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
        checkifconfocal,describconfocal, describ1confocal, ...
        describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
        describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
        tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
        axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
        axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, ...
        axes_paneltohidedatasetrerunoptions, ...
        hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
        describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6));
    decisionviewoption = decisionview.Value;
    
    global decisionimageoption
    decisionimage = uidropdown(p1, 'Position', [1250 400 150 20], 'Items', ...
        {'1) Images', '2) Images and Written',  '3) Logo'}, ...
        'ItemsData', [1 2 4], 'Value', 2, ...
        'ValueChangedFcn', @(decisionimage, event) decisionimagefcn(decisionimage, checkbox_allatonceparameters,  paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
        paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions, buttonsliderlefthidepanels, buttonsliderrighthidepanels,...
        describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone, description_resetsettingsafterdone, loadsettings,...
        ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
        describ3, describ4,t4,describ4b,ef4b, ef4, ...
        describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
        checkifconfocal,describconfocal, describ1confocal, ...
        describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
        describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
        tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
        axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
        axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, ...
        axes_paneltohidedatasetrerunoptions, ...
        hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
        describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6));
    decisionimageoption = decisionimage.Value;
end

% Button to load previously saved settings of certain parameters.
% Placed here in code as dependent on parameters introduced later than in
% Tab 1
loadsettings.ButtonPushedFcn = @(btn, event) LoadSettingsButtonFcn(p1_feedbackfield, event, describp2_1t5b, ef1b, efpixx, efpixy, efpixz, ...
    ef4, ef4b, slider, checkifconfocal, checkifadvanced, outoffocusoption,...
    efstructthreshfrontier1, efstructthreshfrontier2,efstructurethresh3, ...
    efstructurethresh4, efstructurethresh5, efstructthreshfrontierafternocell,...
    efstructurethresh6, efintensthreshold1, efintensthresholdadditionstruct, ...
    efintensthresh2faint,efintensthreshoof , effrontieradditional, efintenstomodulateoof,...
    efintensminnumpixcell, efintensmaxnumpixcell, dropdowndiameter, threshfrontier1_values, ...
    threshfrontier2_values, anpassungotsuthreshK1_values,  anpassungotsuthreshK2_values, ...
    anpassungotsuthreshK3_values, thresholdnumpixelsforrangefilt_values,  describintensthreshold1, ...
    text_anpassungintensotsuthresh2, anpassungotsuthresh2_values , outoffocusoption_values, ...
    describp2_1t5, maxpixnumlayer_text, maxpixnumlayer_values,describstructurethresh2, ...
    texts_threshfront2pixlayer, describstructurethresh, describstructurethresh6a, ...
    describintensthreshoof, describfrontieradditional, describp2_1t3 , describstructurethresh6, ...
    describstructurethresh7 , efstructurethresh7, efstructurethresh7b, efmaxpixnumlayer, efminpixnumlayer, ...
    dropdownifgeneralqnormalization, checkifapplythresholding, efintensmaxnumimcell, ...
    efintensminnumimcell, checkifjuststructure, checkifrunopen, checkcomparisonimages, ax, ...
    tableresults, p3_feedbackfield, checkifseveralchannelsforcelldetection, ...
    channelsforcelldetection_field, weightingforcelldetection_field,...
    describ_bit14, checkifownmask3, checkifownmask4, ef1c, weighting_textfield);

% Fct to make panel disappear under condition   btn,axes_panelimportexport
image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);

image_panelchannel.ButtonDownFcn = @(btn,event) ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone, loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);

image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone, description_resetsettingsafterdone, loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);

image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone, loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal,...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);


image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone, loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);


image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone, loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);


% command to give out results table with zeros once when initializing
updateresultstable(tableresults, slidervalue2, p3_feedbackfield)


% checkbox to not include cell for analysis
global checkifnottotakeresultyes
checkifnottotakeresult = uicheckbox(p3_b, 'Position', [100 a(4)-100 100 50], 'Text', 'Not to take', ...
    'FontSize', 16, 'Value', 0, ...
    'ValueChangedFcn', @(checkifnottotakeresult, event) checkifnottakeresult_fcn(checkifnottotakeresult));
checkifnottotakeresultyes = checkifnottotakeresult.Value;

% checkbox to rerun cell detection with adaptions for single cell
checkifrerun = uicheckbox(p3_b, 'Position', [300 a(4)-100 500 50], 'Text', 'Rerun', 'FontSize', 16, ...
    'Enable', 'on', 'Value', 0, ...
    'ValueChangedFcn', @(checkifrerun, event) checkifrerun_fcn(checkifrerun, event, tableresults, p3_feedbackfield) );

efcellnumbershownandcanbeputin = uieditfield(p3_a, 'numeric', 'Position', [350 a(4)-770 40 20], 'Value', slidervalue2);

% Slider of Tab 3 to go through cells after cell detection
slider2 = uislider(p3_a,  'Position', [300 a(4)-790 140 22], 'Value', 1, ...
    'ValueChangedFcn', @(slider2, event) SliderValueChanged2(slider2, event, ax2, ...
    p3_feedbackfield,tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, ...
    buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin));


%slidernumber2 = uieditfield(p3_a, 'numeric', 'Position', [350 a(4)-830 40 20], ...
%   'Value', slidervalue2, ...
%  'ValueChangedFcn', @(slidernumber2, event) ...
% slidernumber_fcn(slidernumber2, slider2, event, ax2, p3_feedbackfield));



% Input field to tell which channel of single cell should be deleted
singlechannelnottotake = uieditfield(p3_b, 'numeric', 'Position', [680 a(4)-90 40 30], 'Enable', ...
    'on', 'Value', 1);

% checkbox to delete value of single channel of looked at cell
checkifnottakesinglechannel = uicheckbox(p3_b, 'Position', [470 a(4)-100 200 50], 'Text', ...
    'Not take channel nr.', 'FontSize', 16, 'Enable', 'on', 'Value', 0, ...
    'ValueChangedFcn', @(checkifnottakesinglechannel, event) checkifnottakesinglechannel_fcn(checkifnottakesinglechannel, ...
    event, tableresults, singlechannelnottotake.Value,  slider2.Value, p3_feedbackfield) );

% make slider with ticks for slider 2 on Tab 3
slidervalue2 = round(slider2.Value);

try slider2.Limits = [1 numberofimages];
catch
    slider2.Limits = [1 2];
end

if length(slider2.Limits(1):1:slider2.Limits(2)) < 10
    slider2.MajorTicks = slider2.Limits(1):1:slider2.Limits(2);
    slider2.MinorTicks = [];
end

if (10 < length(slider2.Limits(1):1:slider2.Limits(2))) &&  ( length(slider2.Limits(1):1:slider2.Limits(2))< 100)
    slider2.MajorTicks = slider2.Limits(1):10:slider2.Limits(2);
    slider2.MinorTicks = slider2.Limits(1):1:slider2.Limits(2);
end

if length(slider2.Limits(1):1:slider2.Limits(2)) > 100
    slider2.MajorTicks = slider2.Limits(1):100:slider2.Limits(2);
    slider2.MinorTicks = slider2.Limits(1):10:slider2.Limits(2);
end


% cell number shown and editable
efcellnumbershownandcanbeputin.ValueChangedFcn = @(efcellnumbershownandcanbeputin, event) cellnumbertoshow(efcellnumbershownandcanbeputin, slider2, event, ax2, ...
    p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection);


% Button to go through cells with cell detection images and result line in
% results table (diminish slider value)
buttonsliderleft2 = uibutton(p3_a, 'Position', [455 a(4)-810 50 50], 'Text', 'Back', ...
    'ButtonPushedFcn', @(buttonsliderleft2, event) buttonsliderleft2fcn(slider2, ...
    event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, ...
    checkoverviewchannels2, efcellnumbershownandcanbeputin));

% Button to go through cells with cell detection images and result line in
% results table (increase slider value)
buttonsliderright2 = uibutton(p3_a, 'Position', [505 a(4)-810 50 50], 'Text', 'Next', ...
    'ButtonPushedFcn', @(buttonsliderright2, event) buttonsliderright2fcn(slider2, ...
    event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, ...
    checkoverviewchannels2, efcellnumbershownandcanbeputin));

% Button to run through cells with threshold
% placed so late as information of GUI elements on Tab3 needed.
btnpreview = uibutton(p2b, 'Position', [700 a(4)-890 100 60], 'Text', 'Start run', ...
    'FontWeight', 'bold', 'FontSize', 16, 'BackgroundColor', [0.7 0.7 0.7], 'Enable', 'on',...
    'ButtonPushedFcn', @(btnpreview, event) RunButtonPushed(btnpreview,ax, p2_feedbackfield, ...
    ax2, tableresults, slidervalue2, p3_feedbackfield, slider2, efcellnumbershownandcanbeputin, checkoverviewchannels2, checkifrerun, checkifnottotakeresult));

% Button that needs to be pushed to delete certain global values for new sample
% placed here as dependent on later introduced parts of GUI
resetsettingsafterdone.ButtonPushedFcn =  @(btn, event) ResetSettingsButtonFcn(btn, event, tableresults, ...
    p3_feedbackfield, ef1, efmaskpathway, maskimport, tmask, tmaskphrase, efmaskphrase, ...
    checkboxpathwaytosaveimportmaskfolder, checkboxpathwaytodatafolder,  ...
    checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, btnpreview, savingparametersofcellimport, nottotakeofcellimport);

% Checkbox to show cell detection differently
% (image vs. mask, or total layers vs. selected layers)
global buttonforcomparison2
checkcomparisonimages2 = uicheckbox(p3_a, 'Position', [100 a(4)-900 300 50], 'Text', ...
    'Comparison', 'Value', 0, ...
    'ValueChangedFcn', @(checkcomparisonimages2, event) checkcomparisonimagesfcn2(checkcomparisonimages2, ...
    ax2 ));
buttonforcomparison2  = checkcomparisonimages2.Value;

% Checkbox to show just layer thresholding
global buttonforjuststructure2
checkifjuststructure2 = uicheckbox(p3_a, 'Position', [250 a(4)-900 500 50], 'Text', ...
    'Show just layer thresholding', 'Value', 0, ...
    'ValueChangedFcn', @(checkifjuststructure2, event) ...
    checkifshowjuststructure2(checkifjuststructure2,  p3_feedbackfield)) ;
buttonforjuststructure2 = checkifjuststructure2.Value;

% Checkbox to show thresholding during cell detection
global buttontoshow2
checkifrunopen2 = uicheckbox(p3_a, 'Position', [500 a(4)-900 500 50], 'Text', ...
    'Program Run: Visible cell pre-view making?', 'Value', 0, ...
    'ValueChangedFcn', @(checkifrunopen2, event) checkifvisible2(checkifrunopen2, event)) ;
buttontoshow2 = checkifrunopen2.Value;

% Checkbox to get results as well as .mat data
checkifmatexport = uicheckbox(p3_b, 'Position', [700 a(4)-700 100 60], 'Text', ...
    '.mat export', 'Value', 1, 'FontSize', 16);

% Button to start export of calculated results (if cell detection went in
% hand with analysis) or of calculating and exporting results (if cell
% detection was done separated from analysis as well as if masks imported
% by users or savedsettingsofcertaincells.mat were used)
btnexport = uibutton(p3_b, 'Position', [700 a(4)-800 100 60], 'Text', 'Export Data', ...
    'FontWeight', 'bold', 'FontSize', 16, 'BackgroundColor', [0.7 0.7 0.7], ...
    'ButtonPushedFcn', @(btnexport, event) ExportButtonPushed(btnexport, p3_feedbackfield, ...
    ax2, checkifmatexport));

try        filepathway = mfilename('fullpath');
    
    [filepath,name,ext] = fileparts(filepathway);
    
    A = readmatrix(strcat(string(filepath), '\configurationCellDetail.txt'));
    
    allatonce_parameters = A(1);
    checkbox_allatonceparameters.Value = A(1);
    
    decisionviewoption = A(2);
    decisionview.Value = A(2);
    
    
    decisionimageoption = A(3);
    decisionimage.Value = A(3);
    
    sliderhidepanelsvalue = 0;
    
catch
    decisionview.Value = 4;
    decisionviewoption = 4;
    checkbox_allatonceparameters.Value = 0;
    allatonce_parameters=0;
    decisionimage.Value = 1;
    decisionimageoption = 1;
    
end



checkbox_allatonceparametersfcn(checkbox_allatonceparameters, ...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions,...
    buttonsliderlefthidepanels, buttonsliderrighthidepanels, ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b,ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport,nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
    axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
    axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, axes_paneltohidedatasetrerunoptions, ...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6, description_resetsettingsafterdone)

end


% Import: get import information, number and names of files, and amount of how many cells for
% slider

% get phrase for pathway to data folder run-through to find files of
% interest
function phraserunthroughfolders(ef1b, ~)
global phrasetofind
phrasetofind = string(ef1b.Value);
end


% fct to get pathway to data folder (pathwayimport), names and
% numberofimages
% if allchannelnames is known, the image(s) of an input cell (at slidervalue
% slider.Value) is(are) shown
function pathwaytodatafolder(t1, slider, ax, p2_feedbackfield, tableresults, p3_feedbackfield, ...
    p1_feedbackfield)
global phrasetofind numberofimages names pathwayimport whichchannelforcelldetect ...
    channeltoshowval allchannelnames

pathwayimport = string(t1.Value);
files = dir(pathwayimport);

names = {files.name};

count = 1;
addit = zeros(1,1);
numberofnames = size(names,2);

for zaehler_names = 1:numberofnames
    
    % as for pathway . / .. / ..., ... are involved as well, these ones need to be deleted
    if strfind(names{zaehler_names}, phrasetofind)
        
    else
        addit(count) = zaehler_names;
        count = count + 1;
    end
end

try names(addit) = [];
    clear count
    
    numberofimages = size(names,2);
    
    
    slider.Limits = [1 numberofimages];
    
    if length(slider.Limits(1):1:slider.Limits(2)) < 10
        
        slider.MajorTicks = slider.Limits(1):1:slider.Limits(2);
        slider.MinorTicks = [];
        
    end
    
    if (10 < length(slider.Limits(1):1:slider.Limits(2))) &&  ( length(slider.Limits(1):1:slider.Limits(2))< 100)
        
        slider.MajorTicks = slider.Limits(1):10:slider.Limits(2);
        slider.MinorTicks = slider.Limits(1):1:slider.Limits(2);
        
    end
    
    if length(slider.Limits(1):1:slider.Limits(2)) > 100
        
        slider.MajorTicks = slider.Limits(1):100:slider.Limits(2);
        slider.MinorTicks = slider.Limits(1):10:slider.Limits(2);
        
    end
    
    
    if ~isempty(allchannelnames)
        
        path = strcat(pathwayimport,'\', names{slider.Value});
        
        if isempty(whichchannelforcelldetect)
            
            whichchannelforcelldetect = 1;
            
        end
        
        if isempty(channeltoshowval) || channeltoshowval == 0
            
            channeltoshowval = 1;
            
        end
        
        
        b = imfinfo(path);
        
        stacknum = numel(b);
        
        
        count = 1;
        M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
        for k = channeltoshowval:length(allchannelnames):stacknum
            
            M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
            count = count + 1;
            
        end
        
        
        montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax)
        
        try   title(allchannelnames(channeltoshowval), 'Parent', ax , 'FontWeight', 'bold', 'FontSize', 20)
            
        catch
            
        end
    end
    
    slidervalue2 = 1;
    updateresultstable(tableresults, slidervalue2, p3_feedbackfield);
    
catch
    p1_feedbackfield.Value = 'Pathway for import seems to be empty';
    p2_feedbackfield.Value = 'Pathway for import seems to be empty';
    p3_feedbackfield.Value = 'Pathway for import seems to be empty';
end



end


% fct for adapting of shown cell images to a change in slidervalue for Tab 2
% different possibilities: just showing cell images of input
% (buttonforapplythreshold == 0) or applying threshold
% (buttonforapplythreshold == 1)
% buttonforjuststructure is within preview fct (shows just automatically
% chosen cell layers)
function SliderValueChanged(app, ax, p2_feedbackfield)
global buttonforapplythreshold slidervalue names pathwayimport allchannelnames ...
    whichchannelforcelldetect numberofimages channeltoshowval

slidervalue = round(app.Value);
set(app, 'Value', slidervalue);

try app.Limits = [1 numberofimages];
catch
    app.Limits = [1 2];
end

app.MajorTicks = app.Limits(1):1:app.Limits(2);

if length(app.Limits(1):1:app.Limits(2)) < 10
    
    app.MajorTicks = app.Limits(1):1:app.Limits(2);
    app.MinorTicks = [];
    
else
    
    app.MajorTicks = app.Limits(1):10:app.Limits(2);
    app.MinorTicks = app.Limits(1):1:app.Limits(2);
    
end

if length(app.Limits(1):1:app.Limits(2)) < 10
    
    app.MajorTicks = app.Limits(1):1:app.Limits(2);
    app.MinorTicks = [];
    
end

if (10 < length(app.Limits(1):1:app.Limits(2))) &&  ( length(app.Limits(1):1:app.Limits(2))< 100)
    
    app.MajorTicks = app.Limits(1):10:app.Limits(2);
    app.MinorTicks = app.Limits(1):1:app.Limits(2);
    
end

if length(app.Limits(1):1:app.Limits(2)) > 100
    
    app.MajorTicks = app.Limits(1):100:app.Limits(2);
    app.MinorTicks = app.Limits(1):10:app.Limits(2);
    
end


if isempty(pathwayimport)
    
    p2_feedbackfield.Value = 'Need of import pathway';
    
else
    p2_feedbackfield.Value = 'Import pathway there';
    
    path = strcat(pathwayimport,'\', names{slidervalue});
    
    if isempty(whichchannelforcelldetect)
        whichchannelforcelldetect = 1;
    end
    
    if isempty(channeltoshowval) || channeltoshowval == 0
        channeltoshowval = 1;
    end
    
    if buttonforapplythreshold == 0
        if channeltoshowval <= length(allchannelnames)
            
            b = imfinfo(path);
            stacknum = numel(b);
            
            count = 1;
            M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
            for k = channeltoshowval:length(allchannelnames):stacknum
                
                M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
                
            end
            
            montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax)
            title(allchannelnames(channeltoshowval), 'Parent', ax ,  'FontWeight', 'bold', 'FontSize', 20)
            
        else
            
            p2_feedbackfield.Value = 'No valid channel number';
            
        end
        
        
    else % buttonforapplythreshold ~= 0 --> now applied
        % buttonforcomparison: now taken into account
        
        if  channeltoshowval <= length(allchannelnames)
            
            global buttonforjuststructure buttonoverviewoverchannels buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
                frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum anpassungotsuthresh1 anpassungotsuthresh2 ...
                frontieraddition1 threshforveryfaint anpassungintensotsufrontier1 buttonforoutoffocuslight buttontoshow...
                tomodulate maxnumofimagescell minnumofimagescell maxpixnumlayer minpixnumlayer minnumberpixelstodetectforcell maxnumpixelwholecell...
                buttonforcomparison buttonifconfocal stackstotakeforcertainimagenumber
            
            runyes = 0;
            % if no run through all images (runyes = 0), comments to cell detection appear in the feedbackfield
            [ mask imagetoshow stackstotake] =  previewcell(path, numberofimages, allchannelnames, whichchannelforcelldetect,   frontierthrshK1,frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3, anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
                anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint,anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, maxnumofimagescell , minnumofimagescell, maxpixnumlayer, minpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval, buttonforjuststructure, p2_feedbackfield, ax , buttonforcomparison, buttonifconfocal, runyes, buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
            % original image with overlaid mask is shown thanks to
            % fct toshow() of fct previewcell()
            
            stackstotakeforcertainimagenumber = {slidervalue, stackstotake, mask};
            
        else
            
            p2_feedbackfield.Value = 'No valid channel number';
            
        end
        
    end
    
end

end


% fct for obtaining channel names, number of channels, exclude channels,
% show images, update results table
function channelnames(ef4, slider, ax, tableresults, p3_feedbackfield)
global numberofchannels toignore channelnames allchannelnames ...
    pathwayimport whichchannelforcelldetect  channeltoshowval names ...
    numberofimages

% receive and save channel names input
value = string(ef4.Value);
channelnames = value;
allchannelnames = strtrim(string(strsplit(value, ',')));

% obtain number of channels, that are looked at ('none' is not taken)
toignore = find(allchannelnames == 'none');
numberofchannels = length(allchannelnames) - length(toignore);

if ~isempty(pathwayimport)
    
    path = strcat(pathwayimport,'\', names{slider.Value});
    
    if isempty(whichchannelforcelldetect)
        
        whichchannelforcelldetect = 1;
        
    end
    
    if isempty(channeltoshowval) || channeltoshowval == 0
        
        channeltoshowval = 1;
        
    end
    
    
    b = imfinfo(path);
    stacknum = numel(b); % z slice number
    
    count = 1;
    M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
    for k = channeltoshowval:length(allchannelnames):stacknum
        M_original(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
        count = count + 1;
    end
    
    montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax)
    title(allchannelnames(channeltoshowval), 'Parent', ax , 'FontWeight', 'bold', 'FontSize', 20)
    
    
    slider.Limits = [1 numberofimages];
    
    if length(slider.Limits(1):1:slider.Limits(2)) < 10
        
        slider.MajorTicks = slider.Limits(1):1:slider.Limits(2);
        slider.MinorTicks = [];
        
    end
    
    if (10 < length(slider.Limits(1):1:slider.Limits(2))) &&  ( length(slider.Limits(1):1:slider.Limits(2))< 100)
        
        slider.MajorTicks = slider.Limits(1):10:slider.Limits(2);
        slider.MinorTicks = slider.Limits(1):1:slider.Limits(2);
        
    end
    
    if length(slider.Limits(1):1:slider.Limits(2)) > 100
        
        slider.MajorTicks = slider.Limits(1):100:slider.Limits(2);
        slider.MinorTicks = slider.Limits(1):10:slider.Limits(2);
        
    end
    
    
end

slidervalue2 = 1;
updateresultstable(tableresults, slidervalue2, p3_feedbackfield)

end


% if just one channel for cell detection used: this value is taken
function whichchannelforcelldetection(ef4b)
global whichchannelforcelldetect
whichchannelforcelldetect = ef4b.Value;
end


% pixel width
function pixelx(efpixx, p1_feedbackfield)
global pixel_x

if efpixx.Value >0
    pixel_x = efpixx.Value;
else
    
    efpixx.Value = pixel_x;
    p1_feedbackfield.Value = 'Pixel value must be a number above 0';
    
end
end

% pixel height
function pixely(efpixy, p1_feedbackfield)
global pixel_y
if efpixy.Value > 0
    pixel_y = efpixy.Value;
else
    
    efpixy.Value = pixel_y;
    p1_feedbackfield.Value = 'Pixel value must be a number above 0';
    
end

end


% voxel depth
function pixelz(efpixz, p1_feedbackfield)
global voxel_z

if efpixz.Value > 0
    voxel_z = efpixz.Value;
else
    
    efpixz.Value = voxel_z;
    p1_feedbackfield.Value = 'Pixel value must be a number above 0';
    
end

end


% obtain pathway to save images and if all parameters saved, lists
% of positions of positive and negative charges with charge value and
% mean point of volume
function pathwaytosaveimages(t2)
global pathwayexportimages
pathwayexportimages = string(t2.Value);
end


% obtain pathway to save data
% txt results and if checked mat results saved at this place
function pathwaytosavedata(t3)
global pathwayexportdata
pathwayexportdata = string(t3.Value);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Tab2 functions


% fct check if want to save images
function  checkifsaveimagesfcn(checkifsaveimages)
global saveimagesyes
saveimagesyes = checkifsaveimages.Value;
end


% fct check if want to calculate and export all possible normalizations
function checkifallnormalizationsfcn(checkifallnormalizations)
global buttonallnormalizations
buttonallnormalizations = checkifallnormalizations.Value;
end


% fct for running through all single cell images with options
% button for viewing cell detection before running through (run-through then done by
% export button push)
% or button for running directly through with resulting
% table of parameters (export button just exports parameters, no run-through)

function RunButtonPushed(btn,ax, p2_feedbackfield, ax2, tableresults, slidervalue2, p3_feedbackfield, slider2, efcellnumbershownandcanbeputin, checkoverviewchannels2, checkifrerun, checkifnottotakeresult)
tic
global buttonimportmasksofcells buttonallnormalizations buttonPearson
btn.Enable = 'off';
if buttonimportmasksofcells == 1
    
    global pathwaymaskimport namesmask numberofimages numberofchannels allchannelnames toignore ...
        names pathwayimport pathwayexportimages pixel_x pixel_y voxel_z ...
        buttongeneralqnormalization buttondiameter saveimagesyes buttonforallparameters ...
        
    
    if buttonallnormalizations == 0
        dipolmomentnormalized = zeros(numberofimages, numberofchannels);
        Rnormalized = zeros(numberofimages, numberofchannels);
        qnormalized = zeros(numberofimages, numberofchannels);
        
    else
        dipolmomentnormalized11 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized21 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized12 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized22 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized13 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized23 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized14 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized24 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized15 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized25 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized16 = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized26 = zeros(numberofimages, numberofchannels);
        
        Rnormalized1 = zeros(numberofimages, numberofchannels);
        Rnormalized2 = zeros(numberofimages, numberofchannels);
        
        qnormalized1 = zeros(numberofimages, numberofchannels);
        qnormalized2 = zeros(numberofimages, numberofchannels);
        qnormalized3 = zeros(numberofimages, numberofchannels);
        qnormalized4 = zeros(numberofimages, numberofchannels);
        qnormalized5 = zeros(numberofimages, numberofchannels);
        qnormalized6 = zeros(numberofimages, numberofchannels);
        
    end
    
    dipolmoment = zeros(numberofimages, numberofchannels, 3);
    diameter_maxvec = zeros(numberofimages,1);
    diameter_avvec = zeros(numberofimages,1);
    qposvec = zeros(numberofimages, numberofchannels);
    numberofpixels = zeros(numberofimages,1);
    numberofpixelspos = zeros(numberofimages, numberofchannels);
    avintensity = zeros(numberofimages, numberofchannels);
    RposRmean = zeros(numberofimages, numberofchannels, 3);
    RnegRmean = zeros(numberofimages, numberofchannels, 3);
    RposRneg = zeros(numberofimages, numberofchannels, 3);
    intensityvaluetotal = zeros(numberofimages, numberofchannels);
    
    
    
    
    
    
    if buttonforallparameters == 1
        displacementRposRnegMRposMRneg = zeros(numberofimages, numberofchannels);
        displacementDipoleMomentfromMiddle = zeros(numberofimages, numberofchannels);
        sumofdistancesqRpos = zeros(numberofchannels, numberofimages);
        
        percoverphi = zeros(numberofchannels,numberofimages);
        countessphi = zeros(numberofchannels,numberofimages);
        distancetoavvalphi = zeros(numberofchannels, numberofimages);
        zaehlerhowlonghowoftenphi = {};
        endpointsphi = {};
        
        percovertheta = zeros(numberofchannels, numberofimages);
        countesstheta = zeros(numberofchannels, numberofimages);
        distancetoavvaltheta = zeros(numberofchannels, numberofimages);
        zaehlerhowlonghowoftentheta = {};
        endpointstheta = {};
        
        howmuchoveritatallphi = {};
        howmuchoveritatalltheta = {};
        
        startpointsphi = {};
        meanpointsphi = {};
        lengthpointsphi = {};
        histogramvaluesphi =  zeros(numberofimages, numberofchannels, 36);
        distancetonextphi = {};
        distancetomeanphi = {};
        clusterallphi = {}; % arrayofclusters;
        clusterlengthphi = {};
        allclusterinputphi = zeros(numberofchannels, numberofimages);
        clusterpercentphi = {};
        clusterpercenttoallpixelsposphi = {};
        arrayofclusterstrengthphi = zeros(numberofimages,numberofchannels,  5);
        arrayofclustersdistancephi = zeros( numberofimages,numberofchannels, 5);
        arrayofclustersphi= {};
        
        startpointstheta = {};
        meanpointstheta = {};
        lengthpointstheta = {};
        histogramvaluestheta =  zeros(numberofimages, numberofchannels, 18);
        distancetonexttheta = {};
        distancetomeantheta = {};
        clusteralltheta = {}; % arrayofclusters;
        clusterlengththeta = {};
        allclusterinputtheta = zeros(numberofchannels, numberofimages);
        clusterpercenttheta = {};
        clusterpercenttoallpixelspostheta = {};
        arrayofclusterstrengththeta = zeros( numberofimages,numberofchannels, 5);
        arrayofclustersdistancetheta = zeros( numberofimages,numberofchannels, 5);
        arrayofclusterstheta= {};
        
        final_distancestrengthlist = zeros(numberofimages, numberofchannels);
        sorted_volumelist = cell(numberofimages, numberofchannels);
        sorted_centroidlist = cell(numberofimages, numberofchannels);
        sorted_equivdiameterlist  = cell(numberofimages, numberofchannels);
        sorted_voxellistlist = cell(numberofimages, numberofchannels);
        sorted_surfacearealist  = cell(numberofimages, numberofchannels);
        sorted_voxelvalueslist = cell(numberofimages, numberofchannels);
        sorted_weightedcentroidlist = cell(numberofimages, numberofchannels);
        sorted_meanintensitylist = cell(numberofimages, numberofchannels);
        sorted_maxintensitylist = cell(numberofimages, numberofchannels);
        
        arrayfixed4distancelist = zeros(numberofimages, numberofchannels, 4);
        arrayfixed5strengthlist = zeros(numberofimages, numberofchannels, 5);
        
        sorted_array_tofilldistancelist = cell(numberofimages, numberofchannels);
        sorted_array_tofillstrengthlist= cell(numberofimages, numberofchannels); %array_tofillstrengthsorted;
        
    end
    
    
    global  dipolmoment_finished ...
        diameter_maxvecfinished diameter_avvecfinished  ...
        qposvec_finished numberofpixels_finished numberofpixelspos_finished ...
        avintensity_finished RposRmean_finished RnegRmean_finished ...
        RposRneg_finished intensityvaluetotal_finished
    
    
    if buttonallnormalizations == 0
        global dipolmomentnormalized_finished Rnormalized_finished qnormalized_finished
        dipolmomentnormalized_finished = zeros(numberofimages, numberofchannels); %
        Rnormalized_finished = zeros(numberofimages, numberofchannels);
        qnormalized_finished = zeros(numberofimages, numberofchannels);
    end
    
    
    if buttonallnormalizations == 1
        global dipolmomentnormalized11_finished dipolmomentnormalized21_finished ...
            dipolmomentnormalized12_finished dipolmomentnormalized22_finished ...
            dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
            dipolmomentnormalized14_finished dipolmomentnormalized24_finished ...
            dipolmomentnormalized15_finished dipolmomentnormalized25_finished ...
            dipolmomentnormalized16_finished dipolmomentnormalized26_finished ...
            Rnormalized1_finished Rnormalized2_finished ...
            qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
            qnormalized4_finished qnormalized5_finished qnormalized6_finished
        
        
        
        dipolmomentnormalized11_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized21_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized12_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized22_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized13_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized23_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized14_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized24_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized15_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized25_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized16_finished = zeros(numberofimages, numberofchannels);
        dipolmomentnormalized26_finished = zeros(numberofimages, numberofchannels);
        
        Rnormalized1_finished = zeros(numberofimages, numberofchannels);
        Rnormalized2_finished = zeros(numberofimages, numberofchannels);
        
        qnormalized1_finished = zeros(numberofimages, numberofchannels);
        qnormalized2_finished = zeros(numberofimages, numberofchannels);
        qnormalized3_finished = zeros(numberofimages, numberofchannels);
        qnormalized4_finished = zeros(numberofimages, numberofchannels);
        qnormalized5_finished = zeros(numberofimages, numberofchannels);
        qnormalized6_finished = zeros(numberofimages, numberofchannels);
        
        
        
    end
    
    
    
    
    
    
    if buttonforallparameters ==1
        global displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
            sumofdistancesqRpos_finished percoverphi_finished countessphi_finished ...
            distancetoavvalphi_finished zaehlerhowlonghowoftenphi_finished ...
            endpointsphi_finished percovertheta_finished countesstheta_finished ...
            distancetoavvaltheta_finished zaehlerhowlonghowoftentheta_finished ...
            endpointstheta_finished howmuchoveritatallphi_finished howmuchoveritatalltheta_finished ...
            startpointsphi_finished meanpointsphi_finished lengthpointsphi_finished ...
            histogramvaluesphi_finished  distancetonextphi_finished distancetomeanphi_finished ...
            clusterallphi_finished clusterlengthphi_finished allclusterinputphi_finished ...
            clusterpercentphi_finished clusterpercenttoallpixelsposphi_finished ...
            arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished ...
            arrayofclustersphi_finished startpointstheta_finished meanpointstheta_finished ...
            lengthpointstheta_finished histogramvaluestheta_finished distancetonexttheta_finished ...
            distancetomeantheta_finished clusteralltheta_finished clusterlengththeta_finished ...
            allclusterinputtheta_finished  clusterpercenttheta_finished ...
            clusterpercenttoallpixelspostheta_finished arrayofclusterstrengththeta_finished ...
            arrayofclustersdistancetheta_finished arrayofclusterstheta_finished ...
            final_distancestrengthlist_finished    sorted_volumelist_finished sorted_centroidlist_finished ...
            sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
            sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
            sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
            sorted_maxintensitylist_finished  ...
            arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished
        
        
    end
    
    
    
    
    
    dipolmoment_finished = zeros(numberofimages, numberofchannels, 3);
    diameter_maxvecfinished = zeros(numberofimages,1);
    diameter_avvecfinished = zeros(numberofimages,1);
    qposvec_finished = zeros(numberofimages, numberofchannels);
    numberofpixels_finished = zeros(numberofimages,1);
    numberofpixelspos_finished = zeros(numberofimages, numberofchannels);
    avintensity_finished = zeros(numberofimages, numberofchannels);
    RposRmean_finished = zeros(numberofimages, numberofchannels, 3);
    RnegRmean_finished = zeros(numberofimages, numberofchannels, 3);
    RposRneg_finished = zeros(numberofimages, numberofchannels, 3);
    intensityvaluetotal_finished = zeros(numberofimages, numberofchannels);
    
    if buttonforallparameters ==1
        
        displacementRposRnegMRposMRneg_finished = zeros(numberofimages, numberofchannels);
        displacementDipoleMomentfromMiddle_finished = zeros(numberofimages, numberofchannels);
        sumofdistancesqRpos_finished = zeros(numberofchannels, numberofimages);
        
        percoverphi_finished = zeros(numberofchannels, numberofimages);
        countessphi_finished = zeros(numberofchannels, numberofimages);
        distancetoavvalphi_finished = zeros(numberofchannels, numberofimages);
        zaehlerhowlonghowoftenphi_finished = {};
        endpointsphi_finished = {};
        
        percovertheta_finished = zeros(numberofchannels, numberofimages);
        countesstheta_finished = zeros(numberofchannels, numberofimages);
        distancetoavvaltheta_finished = zeros(numberofchannels, numberofimages);
        zaehlerhowlonghowoftentheta_finished = {};
        endpointstheta_finished = {};
        
        howmuchoveritatallphi_finished = {};
        howmuchoveritatalltheta_finished = {};
        
        startpointsphi_finished = {};
        meanpointsphi_finished = {};
        lengthpointsphi_finished = {};
        histogramvaluesphi_finished =  zeros(numberofimages, numberofchannels, 36);
        distancetonextphi_finished = {};
        distancetomeanphi_finished = {};
        clusterallphi_finished = {}; % arrayofclusters;
        clusterlengthphi_finished = {};
        allclusterinputphi_finished = zeros(numberofchannels, numberofimages);
        clusterpercentphi_finished = {};
        clusterpercenttoallpixelsposphi_finished = {};
        arrayofclusterstrengthphi_finished = zeros( numberofimages,numberofchannels, 5);
        arrayofclustersdistancephi_finished = zeros( numberofimages,numberofchannels, 5);
        arrayofclustersphi_finished= {};
        
        startpointstheta_finished = {};
        meanpointstheta_finished = {};
        lengthpointstheta_finished = {};
        histogramvaluestheta_finished =  zeros(numberofimages, numberofchannels, 18);
        distancetonexttheta_finished = {};
        distancetomeantheta_finished = {};
        clusteralltheta_finished = {}; % arrayofclusters;
        clusterlengththeta_finished = {};
        allclusterinputtheta_finished = zeros(numberofchannels, numberofimages);
        clusterpercenttheta_finished = {};
        clusterpercenttoallpixelspostheta_finished = {};
        arrayofclusterstrengththeta_finished = zeros(numberofimages,numberofchannels,  5);
        arrayofclustersdistancetheta_finished = zeros( numberofimages,numberofchannels, 5);
        arrayofclusterstheta_finished= {};
        
        final_distancestrengthlist_finished = zeros(numberofimages, numberofchannels);
        sorted_volumelist_finished = cell(numberofimages, numberofchannels);
        sorted_centroidlist_finished = cell(numberofimages, numberofchannels);
        sorted_equivdiameterlist_finished  = cell(numberofimages, numberofchannels);
        sorted_voxellistlist_finished = cell(numberofimages, numberofchannels);
        sorted_surfacearealist_finished   =cell(numberofimages, numberofchannels);
        sorted_voxelvalueslist_finished = cell(numberofimages, numberofchannels);
        sorted_weightedcentroidlist_finished = cell(numberofimages, numberofchannels);
        sorted_meanintensitylist_finished = cell(numberofimages, numberofchannels);
        sorted_maxintensitylist_finished = cell(numberofimages, numberofchannels);
        
        arrayfixed4distancelist_finished = zeros(numberofimages, numberofchannels, 4);
        arrayfixed5strengthlist_finished = zeros(numberofimages, numberofchannels, 5);
        
        sorted_array_tofilldistancelist_finished = cell(numberofimages, numberofchannels);
        sorted_array_tofillstrengthlist_finished= cell(numberofimages, numberofchannels);
        
        
        
    end
    
    
    if buttonPearson ==1
        global Pearson_finished
        Pearson_finished = zeros(numberofimages, numberofchannels * (numberofchannels-1)/2);
        % numberofchannels* (numberofchannels-1)/2 is number of
        % combinations of channels
    end
    
    
    fig2 = uifigure;
    d = uiprogressdlg(fig2, 'Title', 'Please Wait', ...
        'Message', 'Start Calculation', 'Cancelable', 'on');
    d.Value = 0;
    
    runyes = 1;
    for z = 1:numberofimages
        
        p2_feedbackfield.Value = ['Number ',num2str(z),' out of ', num2str(numberofimages), ' cells'];
        path = strcat(pathwayimport,'\', names{z});
        
        d.Message = ['Cell ',num2str(z),' out of ',num2str(numberofimages), ' cells'];
        d.Value = 1 / numberofimages *z;
        
        if d.CancelRequested
            btn.Enable = 'on';
            break
        end
        
        maskpath = strcat(pathwaymaskimport, '\', namesmask{z});
        
        
        b = imfinfo(maskpath);
        
        stacknum = numel(b);
        
        % stacknum
        stackstotake = [];
        count = 1;
        mask = zeros(b(1).Height, b(1).Width, stacknum);
        for k = 1:stacknum
            mask(1:b(1).Height, 1:b(1).Width,count) = imread(maskpath,k);
            if sum(sum(mask(:,:,count))) > 0
                if isempty(stackstotake)
                    stackstotake = count;
                else
                    stackstotake = [stackstotake, count];
                end
            end
            count = count + 1;
            
        end
        
        
        [lengthforones, meanstacks, stackstotake2] =  findlongestepisode(stackstotake);
        
        %   stackstotake2
        
        
        if buttonforallparameters ==1 && buttonallnormalizations == 0
            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, ...
                qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ...
                intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg, ...
                displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi, ...
                distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, ...
                countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, ...
                endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta,...
                startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, ...
                distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi, ...
                allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, ...
                arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, ...
                distancetonexttheta,distancetomeantheta,clusteralltheta,clusterlengththeta, ...
                allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist] = ...
                polarityquantification(path, z, numberofimages,names, allchannelnames, toignore, ...
                mask, stackstotake2, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, ...
                buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized,...
                diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, ...
                avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg, ...
                displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, ...
                percoverphi, countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, ...
                percovertheta, countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta,...
                howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, lengthpointsphi,...
                histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi, ...
                allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi, ...
                arrayofclustersdistancephi,arrayofclustersphi, ...
                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta, ...
                distancetomeantheta,clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, ...
                clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta,arrayofclustersdistancetheta, ...
                arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
            %
        end
        if buttonforallparameters ==0 && buttonallnormalizations == 0
            % polarity quantification without all parameters
            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec,...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                = polarityquantificationnotallparameters(path, z, numberofimages,names, allchannelnames, toignore,...
                mask, stackstotake2, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, ...
                buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, ...
                diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity,...
                RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg);
            %
            
        end
        
        if buttonforallparameters == 1 && buttonallnormalizations == 1
            [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
                dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
                dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
                dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
                qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
                qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
                RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
                percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
                countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
                howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
                distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
                arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
                lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
                allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
                arrayofclustersdistancetheta arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]  ...
                = polarityquantificationallnormalizations(path, z, numberofimages, names, ...
                allchannelnames, toignore, mask, stackstotake2, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
                dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
                dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
                dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
                diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
                RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
                zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
                clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
                clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
            
        end
        
        if buttonforallparameters == 0 && buttonallnormalizations == 1
            [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                = polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
                toignore, mask,  stackstotake2, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                saveimagesyes, buttongeneralqnormalization, buttondiameter, ...
                dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg);
            
            
            
        end
        
        if buttonPearson == 1
            
            pearsonscorrelationcoefficient(mask, stackstotake2, path, z)
            
        end
        
        
        close all
        
        
        
        if z == numberofimages
            d.Message = 'Finished';
            pause(1)
        end
        
    end
    
    if buttonallnormalizations == 0
        dipolmomentnormalized_finished = dipolmomentnormalized;
        qnormalized_finished = qnormalized;
        Rnormalized_finished = Rnormalized;
    end
    
    if buttonallnormalizations == 1
        dipolmomentnormalized11_finished = dipolmomentnormalized11;
        dipolmomentnormalized21_finished = dipolmomentnormalized21;
        dipolmomentnormalized12_finished = dipolmomentnormalized12;
        dipolmomentnormalized22_finished = dipolmomentnormalized22;
        dipolmomentnormalized13_finished = dipolmomentnormalized13;
        dipolmomentnormalized23_finished = dipolmomentnormalized23;
        dipolmomentnormalized14_finished = dipolmomentnormalized14;
        dipolmomentnormalized24_finished = dipolmomentnormalized24;
        dipolmomentnormalized15_finished = dipolmomentnormalized15;
        dipolmomentnormalized25_finished = dipolmomentnormalized25;
        dipolmomentnormalized16_finished = dipolmomentnormalized16;
        dipolmomentnormalized26_finished = dipolmomentnormalized26;
        
        Rnormalized1_finished = Rnormalized1;
        Rnormalized2_finished = Rnormalized2;
        
        qnormalized1_finished = qnormalized1;
        qnormalized2_finished = qnormalized2;
        qnormalized3_finished = qnormalized3;
        qnormalized4_finished = qnormalized4;
        qnormalized5_finished = qnormalized5;
        qnormalized6_finished = qnormalized6;
        
    end
    
    dipolmoment_finished = dipolmoment;
    diameter_maxvecfinished = diameter_maxvec;
    diameter_avvecfinished = diameter_avvec;
    
    qposvec_finished = qposvec;
    numberofpixels_finished = numberofpixels;
    numberofpixelspos_finished = numberofpixelspos;
    avintensity_finished = avintensity;
    RposRmean_finished  =RposRmean;
    RnegRmean_finished = RnegRmean;
    RposRneg_finished = RposRneg;
    intensityvaluetotal_finished = intensityvaluetotal;
    
    if buttonforallparameters ==1
        
        displacementRposRnegMRposMRneg_finished = displacementRposRnegMRposMRneg;
        displacementDipoleMomentfromMiddle_finished = displacementDipoleMomentfromMiddle;
        sumofdistancesqRpos_finished = sumofdistancesqRpos;
        percoverphi_finished = percoverphi;
        countessphi_finished = countessphi;
        distancetoavvalphi_finished = distancetoavvalphi;
        zaehlerhowlonghowoftenphi_finished = zaehlerhowlonghowoftenphi;
        endpointsphi_finished = endpointsphi;
        percovertheta_finished = percovertheta;
        countesstheta_finished = countesstheta;
        distancetoavvaltheta_finished = distancetoavvaltheta;
        zaehlerhowlonghowoftentheta_finished = zaehlerhowlonghowoftentheta;
        endpointstheta_finished = endpointstheta;
        howmuchoveritatallphi_finished = howmuchoveritatallphi;
        howmuchoveritatalltheta_finished = howmuchoveritatalltheta;
        startpointsphi_finished = startpointsphi;
        meanpointsphi_finished = meanpointsphi;
        lengthpointsphi_finished = lengthpointsphi;
        histogramvaluesphi_finished =  histogramvaluesphi;
        distancetonextphi_finished = distancetonextphi;
        distancetomeanphi_finished = distancetomeanphi;
        clusterallphi_finished = clusterallphi;
        clusterlengthphi_finished = clusterlengthphi;
        allclusterinputphi_finished = allclusterinputphi;
        clusterpercentphi_finished = clusterpercentphi;
        clusterpercenttoallpixelsposphi_finished = clusterpercenttoallpixelsposphi;
        arrayofclusterstrengthphi_finished = arrayofclusterstrengthphi;
        arrayofclustersdistancephi_finished = arrayofclustersdistancephi;
        arrayofclustersphi_finished= arrayofclustersphi;
        startpointstheta_finished = startpointstheta;
        meanpointstheta_finished = meanpointstheta;
        lengthpointstheta_finished = lengthpointstheta;
        histogramvaluestheta_finished =  histogramvaluestheta;
        distancetonexttheta_finished = distancetonexttheta;
        distancetomeantheta_finished = distancetomeantheta;
        clusteralltheta_finished = clusteralltheta;
        clusterlengththeta_finished = clusterlengththeta;
        allclusterinputtheta_finished = allclusterinputtheta;
        clusterpercenttheta_finished = clusterpercenttheta;
        clusterpercenttoallpixelspostheta_finished = clusterpercenttoallpixelspostheta;
        arrayofclusterstrengththeta_finished = arrayofclusterstrengththeta;
        arrayofclustersdistancetheta_finished = arrayofclustersdistancetheta;
        arrayofclusterstheta_finished= arrayofclusterstheta;
        
        final_distancestrengthlist_finished = final_distancestrengthlist ;
        sorted_volumelist_finished = sorted_volumelist;
        sorted_centroidlist_finished = sorted_centroidlist;
        sorted_equivdiameterlist_finished  = sorted_equivdiameterlist;
        sorted_voxellistlist_finished = sorted_voxellistlist;
        sorted_surfacearealist_finished   = sorted_surfacearealist;
        sorted_voxelvalueslist_finished = sorted_voxelvalueslist;
        sorted_weightedcentroidlist_finished= sorted_weightedcentroidlist;
        sorted_meanintensitylist_finished = sorted_meanintensitylist;
        sorted_maxintensitylist_finished = sorted_maxintensitylist;
        
        arrayfixed4distancelist_finished =   arrayfixed4distancelist;
        arrayfixed5strengthlist_finished =  arrayfixed5strengthlist;
        
        sorted_array_tofilldistancelist_finished = sorted_array_tofilldistancelist;
        sorted_array_tofillstrengthlist_finished= sorted_array_tofillstrengthlist;
        
        
        
        
        
    end
    
    
    formatSpec = 'Runthrough done: Elapsed time is %s seconds';
    A1 = toc;
    str_time = sprintf(formatSpec, A1);
    p3_feedbackfield.Value = str_time;
    p2_feedbackfield.Value = str_time;
    
    
    btn.Enable = 'on';
    
    
else
    
    global numberofimages numberofchannels allchannelnames toignore names pathwayimport ...
        whichchannelforcelldetect pathwayexportimages pixel_x pixel_y voxel_z ...
        buttongeneralqnormalization nottotake frontierthrshK1 frontierthrshK2...
        anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 ...
        frontier3 anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
        anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 threshforveryfaint ...
        anpassungintensotsufrontier1 buttonforoutoffocuslight tomodulate maxnumofimagescell ...
        minnumofimagescell maxpixnumlayer minnumberpixelstodetectforcell ...
        maxnumpixelwholecell channeltoshowval buttonforcomparison buttonifconfocal ...
        buttonifcellrecognitionseveralchannels channelsforcelldetection ...
        buttondiameter saveimagesyes buttonforallparameters buttonforcellsviewbeforerunbyexport ...
        savingofsettingsofcertaincells buttonforjuststructure buttontoshow mask_all channeltoshowval2 ...
        buttonimportsavingparametersofcells minpixnumlayer
    
    
    if isempty(buttonimportsavingparametersofcells) || isempty(savingofsettingsofcertaincells)
        
        savingofsettingsofcertaincells = cell(numberofimages,1);
        for i = 1:numberofimages
            savingofsettingsofcertaincells{i} = {channeltoshowval,buttonforcomparison,  buttonforjuststructure,  frontierthrshK1,frontierthrshK2 ,anpassungotsuthreshK1 , anpassungotsuthreshK2 , anpassungotsuthreshK3, frontier3,...
                anpassungotsuthreshKsubtr,thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, ...
                maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer , minnumberpixelstodetectforcell,maxnumpixelwholecell,buttonifconfocal};
        end
        
        
        
        
    else
        
        
        if buttonimportsavingparametersofcells == 0
            
            savingofsettingsofcertaincells = cell(numberofimages,1);
            for i = 1:numberofimages
                savingofsettingsofcertaincells{i} = {channeltoshowval,buttonforcomparison,  buttonforjuststructure,  frontierthrshK1,frontierthrshK2 ,anpassungotsuthreshK1 , anpassungotsuthreshK2 , anpassungotsuthreshK3, frontier3,...
                    anpassungotsuthreshKsubtr,thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, ...
                    maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer, minnumberpixelstodetectforcell,maxnumpixelwholecell,buttonifconfocal};
            end
        end
        
    end
    
    
    
    
    
    
    
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if  buttonforcellsviewbeforerunbyexport == 1
        global nottotake
        if isempty(nottotake)
            nottotake = zeros(numberofimages,1);
        end
        mask_all = zeros(numberofimages,1);
        runyes = 1;
        
        fig2 = uifigure;
        d = uiprogressdlg(fig2, 'Title', 'Please Wait', ...
            'Message', 'Start Calculation', 'Cancelable', 'off');
        d.Value = 0;
        
        
        for z = 1:numberofimages
            
            if nottotake(z) == 1
                
                mask_all(z) = 0;
                
            else
                
                path = strcat(pathwayimport,'\', names{z});
                
                buttonoverviewoverchannels = 0;
                %   'runthrough preview'
                try [mask, ~, ~] = previewcell(path, numberofimages, ...
                        allchannelnames, whichchannelforcelldetect, frontierthrshK1, frontierthrshK2,...
                        anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3,...
                        anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, anpassungotsuthresh1,...
                        anpassungotsuthresh2, frontieraddition1, threshforveryfaint, ...
                        anpassungintensotsufrontier1, buttonforoutoffocuslight, 0, tomodulate, ...
                        maxnumofimagescell , minnumofimagescell, maxpixnumlayer, minpixnumlayer, ...
                        minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval,...
                        0, p2_feedbackfield, ax , buttonforcomparison, buttonifconfocal, runyes, ...
                        buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels, ...
                        channelsforcelldetection) ;
                catch
                    mask = 0;
                end
                
                if size(mask,1) == 1
                    mask_all(z) = 0;
                else
                    mask_all(z) = 1;
                end
                d.Message = ['Cell ',num2str(z),' out of ',num2str(numberofimages), ' cells'];
                d.Value = 1 / numberofimages *z;
                
            end
        end
        
        %         path = strcat(pathwayimport,'\', names{1});
        %
        if isempty(channeltoshowval2) || channeltoshowval2 == 0
            
            channeltoshowval = 1;
        end
        
        %
        slider2.Value = 1;
        slider2.Limits = [1 numberofimages];
        slider2.MajorTicks = slider2.Limits(1):1:slider2.Limits(2);
        
        if length(slider2.Limits(1):1:slider2.Limits(2)) < 10
            
            slider2.MajorTicks = slider2.Limits(1):1:slider2.Limits(2);
            slider2.MinorTicks = [];
            
        end
        
        if (10 < length(slider2.Limits(1):1:slider2.Limits(2))) &&  ( length(slider2.Limits(1):1:slider2.Limits(2))< 100)
            
            slider2.MajorTicks = slider2.Limits(1):10:slider2.Limits(2);
            slider2.MinorTicks = slider2.Limits(1):1:slider2.Limits(2);
            
        end
        
        if length(slider2.Limits(1):1:slider2.Limits(2)) > 100
            
            slider2.MajorTicks = slider2.Limits(1):100:slider2.Limits(2);
            slider2.MinorTicks = slider2.Limits(1):10:slider2.Limits(2);
            
        end
        
        slidervalue2 = slider2.Value;
        
        event = 0;
        
        SliderValueChanged2(slider2, event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin)
        updateresultstable(tableresults, slidervalue2, p3_feedbackfield);
        
        btn.Enable = 'on';
        
        A1 = toc;
        
        
        formatSpec = 'Runthrough done: Elapsed time is %s seconds';
        
        str_time = sprintf(formatSpec, A1);
        p3_feedbackfield.Value = str_time;
        p2_feedbackfield.Value = str_time;
        
    else
        
        
        
        
        if buttonallnormalizations == 0
            dipolmomentnormalized = zeros(numberofimages, numberofchannels);
            Rnormalized = zeros(numberofimages, numberofchannels);
            qnormalized = zeros(numberofimages, numberofchannels);
            
        else
            dipolmomentnormalized11 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized21 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized12 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized22 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized13 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized23 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized14 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized24 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized15 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized25 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized16 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized26 = zeros(numberofimages, numberofchannels);
            
            Rnormalized1 = zeros(numberofimages, numberofchannels);
            Rnormalized2 = zeros(numberofimages, numberofchannels);
            
            qnormalized1 = zeros(numberofimages, numberofchannels);
            qnormalized2 = zeros(numberofimages, numberofchannels);
            qnormalized3 = zeros(numberofimages, numberofchannels);
            qnormalized4 = zeros(numberofimages, numberofchannels);
            qnormalized5 = zeros(numberofimages, numberofchannels);
            qnormalized6 = zeros(numberofimages, numberofchannels);
            
        end
        
        
        
        dipolmoment = zeros(numberofimages, numberofchannels, 3);
        
        diameter_maxvec = zeros(numberofimages,1);
        diameter_avvec = zeros(numberofimages,1);
        
        qposvec = zeros(numberofimages, numberofchannels);
        numberofpixels = zeros(numberofimages,1);
        numberofpixelspos = zeros(numberofimages, numberofchannels);
        avintensity = zeros(numberofimages, numberofchannels);
        RposRmean = zeros(numberofimages, numberofchannels, 3);
        RnegRmean = zeros(numberofimages, numberofchannels, 3);
        RposRneg = zeros(numberofimages, numberofchannels, 3);
        intensityvaluetotal = zeros(numberofimages, numberofchannels);
        
        if buttonforallparameters == 1
            displacementRposRnegMRposMRneg = zeros(numberofimages, numberofchannels);
            displacementDipoleMomentfromMiddle = zeros(numberofimages, numberofchannels);
            sumofdistancesqRpos = zeros(numberofchannels, numberofimages);
            
            percoverphi = zeros(numberofchannels,numberofimages);
            countessphi = zeros(numberofchannels,numberofimages);
            distancetoavvalphi = zeros(numberofchannels, numberofimages);
            
            zaehlerhowlonghowoftenphi = cell(numberofchannels,numberofimages);
            endpointsphi = cell(numberofchannels,numberofimages);
            
            
            
            percovertheta = zeros(numberofchannels, numberofimages);
            countesstheta = zeros(numberofchannels, numberofimages);
            distancetoavvaltheta = zeros(numberofchannels, numberofimages);
            
            zaehlerhowlonghowoftentheta = cell(numberofchannels,numberofimages);
            endpointstheta = cell(numberofchannels,numberofimages);
            
            
            
            howmuchoveritatallphi = cell(numberofchannels,numberofimages);
            howmuchoveritatalltheta = cell(numberofchannels,numberofimages);
            
            startpointsphi =  cell(numberofchannels,numberofimages);
            meanpointsphi =  cell(numberofchannels,numberofimages);
            lengthpointsphi =  cell(numberofchannels,numberofimages);
            histogramvaluesphi =  zeros(numberofimages, numberofchannels, 36);
            distancetonextphi =  cell(numberofchannels,numberofimages);
            distancetomeanphi =  cell(numberofchannels,numberofimages);
            clusterallphi =  cell(numberofchannels,numberofimages); % arrayofclusters;
            clusterlengthphi =  cell(numberofchannels,numberofimages);
            allclusterinputphi = zeros(numberofchannels, numberofimages);
            clusterpercentphi =  cell(numberofchannels,numberofimages);
            clusterpercenttoallpixelsposphi =  cell(numberofchannels,numberofimages);
            arrayofclusterstrengthphi = zeros(numberofimages,numberofchannels,  5);
            arrayofclustersdistancephi = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersphi=  cell(numberofchannels,numberofimages);
            
            startpointstheta =  cell(numberofchannels,numberofimages);
            meanpointstheta = cell(numberofchannels,numberofimages);
            lengthpointstheta =  cell(numberofchannels,numberofimages);
            histogramvaluestheta =  zeros(numberofimages, numberofchannels, 18);
            distancetonexttheta =  cell(numberofchannels,numberofimages);
            distancetomeantheta =  cell(numberofchannels,numberofimages);
            clusteralltheta =  cell(numberofchannels,numberofimages); % arrayofclusters;
            clusterlengththeta =  cell(numberofchannels,numberofimages);
            allclusterinputtheta = zeros(numberofchannels, numberofimages);
            clusterpercenttheta =  cell(numberofchannels,numberofimages);
            clusterpercenttoallpixelspostheta =  cell(numberofchannels,numberofimages);
            arrayofclusterstrengththeta = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersdistancetheta = zeros( numberofimages,numberofchannels, 5);
            arrayofclusterstheta=  cell(numberofchannels,numberofimages);
            
            final_distancestrengthlist = zeros(numberofimages, numberofchannels);
            sorted_volumelist= cell(numberofimages, numberofchannels);
            sorted_centroidlist = cell(numberofimages, numberofchannels);
            sorted_equivdiameterlist = cell(numberofimages, numberofchannels);
            sorted_voxellistlist = cell(numberofimages, numberofchannels);
            sorted_surfacearealist = cell(numberofimages, numberofchannels);
            sorted_voxelvalueslist= cell(numberofimages, numberofchannels);
            sorted_weightedcentroidlist = cell(numberofimages, numberofchannels);
            sorted_meanintensitylist = cell(numberofimages, numberofchannels);
            sorted_maxintensitylist = cell(numberofimages, numberofchannels);
            
            
            arrayfixed4distancelist = zeros(numberofimages, numberofchannels, 4);
            arrayfixed5strengthlist = zeros(numberofimages, numberofchannels, 5);
            
            sorted_array_tofilldistancelist = cell(numberofimages, numberofchannels);
            sorted_array_tofillstrengthlist= cell(numberofimages, numberofchannels);
            
            
        end
        
        
        
        if buttonallnormalizations == 0
            global dipolmomentnormalized_finished Rnormalized_finished qnormalized_finished
            dipolmomentnormalized_finished = zeros(numberofimages, numberofchannels); %
            Rnormalized_finished = zeros(numberofimages, numberofchannels);
            qnormalized_finished = zeros(numberofimages, numberofchannels);
        end
        
        
        if buttonallnormalizations == 1
            global dipolmomentnormalized11_finished dipolmomentnormalized21_finished ...
                dipolmomentnormalized12_finished dipolmomentnormalized22_finished ...
                dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
                dipolmomentnormalized14_finished dipolmomentnormalized24_finished ...
                dipolmomentnormalized15_finished dipolmomentnormalized25_finished ...
                dipolmomentnormalized16_finished dipolmomentnormalized26_finished ...
                Rnormalized1_finished Rnormalized2_finished ...
                qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
                qnormalized4_finished qnormalized5_finished qnormalized6_finished
            
            
            
            dipolmomentnormalized11_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized21_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized12_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized22_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized13_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized23_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized14_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized24_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized15_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized25_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized16_finished = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized26_finished = zeros(numberofimages, numberofchannels);
            
            Rnormalized1_finished = zeros(numberofimages, numberofchannels);
            Rnormalized2_finished = zeros(numberofimages, numberofchannels);
            
            qnormalized1_finished = zeros(numberofimages, numberofchannels);
            qnormalized2_finished = zeros(numberofimages, numberofchannels);
            qnormalized3_finished = zeros(numberofimages, numberofchannels);
            qnormalized4_finished = zeros(numberofimages, numberofchannels);
            qnormalized5_finished = zeros(numberofimages, numberofchannels);
            qnormalized6_finished = zeros(numberofimages, numberofchannels);
            
            
            
        end
        
        
        
        
        
        
        
        
        global   dipolmoment_finished diameter_maxvecfinished diameter_avvecfinished ...
            qposvec_finished numberofpixels_finished numberofpixelspos_finished ...
            avintensity_finished RposRmean_finished RnegRmean_finished ...
            RposRneg_finished intensityvaluetotal_finished
        
        if buttonforallparameters ==1
            global displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
                sumofdistancesqRpos_finished percoverphi_finished countessphi_finished ...
                distancetoavvalphi_finished zaehlerhowlonghowoftenphi_finished ...
                endpointsphi_finished percovertheta_finished countesstheta_finished ...
                distancetoavvaltheta_finished zaehlerhowlonghowoftentheta_finished ...
                endpointstheta_finished howmuchoveritatallphi_finished howmuchoveritatalltheta_finished ...
                startpointsphi_finished meanpointsphi_finished lengthpointsphi_finished ...
                histogramvaluesphi_finished  distancetonextphi_finished distancetomeanphi_finished ...
                clusterallphi_finished clusterlengthphi_finished allclusterinputphi_finished ...
                clusterpercentphi_finished clusterpercenttoallpixelsposphi_finished ...
                arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished ...
                arrayofclustersphi_finished startpointstheta_finished meanpointstheta_finished ...
                lengthpointstheta_finished histogramvaluestheta_finished distancetonexttheta_finished ...
                distancetomeantheta_finished clusteralltheta_finished clusterlengththeta_finished ...
                allclusterinputtheta_finished  clusterpercenttheta_finished ...
                clusterpercenttoallpixelspostheta_finished arrayofclusterstrengththeta_finished ...
                arrayofclustersdistancetheta_finished arrayofclusterstheta_finished ...
                final_distancestrengthlist_finished    sorted_volumelist_finished sorted_centroidlist_finished ...
                sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
                sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
                sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
                sorted_maxintensitylist_finished  ...
                arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished
            
        end
        
        
        
        dipolmoment_finished = zeros(numberofimages, numberofchannels, 3);
        
        diameter_maxvecfinished = zeros(numberofimages,1);
        diameter_avvecfinished = zeros(numberofimages,1);
        
        qposvec_finished = zeros(numberofimages, numberofchannels);
        numberofpixels_finished = zeros(numberofimages,1);
        numberofpixelspos_finished = zeros(numberofimages, numberofchannels);
        avintensity_finished = zeros(numberofimages, numberofchannels);
        RposRmean_finished = zeros(numberofimages, numberofchannels, 3);
        RnegRmean_finished = zeros(numberofimages, numberofchannels, 3);
        RposRneg_finished = zeros(numberofimages, numberofchannels, 3);
        intensityvaluetotal_finished = zeros(numberofimages, numberofchannels);
        
        if buttonforallparameters ==1
            
            displacementRposRnegMRposMRneg_finished = zeros(numberofimages, numberofchannels);
            displacementDipoleMomentfromMiddle_finished = zeros(numberofimages, numberofchannels);
            sumofdistancesqRpos_finished = zeros(numberofchannels, numberofimages);
            
            percoverphi_finished = zeros(numberofchannels, numberofimages);
            countessphi_finished = zeros(numberofchannels, numberofimages);
            distancetoavvalphi_finished = zeros(numberofchannels, numberofimages);
            zaehlerhowlonghowoftenphi_finished = {};
            endpointsphi_finished = {};
            
            percovertheta_finished = zeros(numberofchannels, numberofimages);
            countesstheta_finished = zeros(numberofchannels, numberofimages);
            distancetoavvaltheta_finished = zeros(numberofchannels, numberofimages);
            zaehlerhowlonghowoftentheta_finished = {};
            endpointstheta_finished = {};
            
            howmuchoveritatallphi_finished = {};
            howmuchoveritatalltheta_finished = {};
            
            startpointsphi_finished = {};
            meanpointsphi_finished = {};
            lengthpointsphi_finished = {};
            histogramvaluesphi_finished =  zeros(numberofimages, numberofchannels, 36);
            distancetonextphi_finished = {};
            distancetomeanphi_finished = {};
            clusterallphi_finished = {}; % arrayofclusters;
            clusterlengthphi_finished = {};
            allclusterinputphi_finished = zeros(numberofchannels, numberofimages);
            clusterpercentphi_finished = {};
            clusterpercenttoallpixelsposphi_finished = {};
            arrayofclusterstrengthphi_finished = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersdistancephi_finished = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersphi_finished= {};
            
            startpointstheta_finished = {};
            meanpointstheta_finished = {};
            lengthpointstheta_finished = {};
            histogramvaluestheta_finished =  zeros(numberofimages, numberofchannels, 18);
            distancetonexttheta_finished = {};
            distancetomeantheta_finished = {};
            clusteralltheta_finished = {}; % arrayofclusters;
            clusterlengththeta_finished = {};
            allclusterinputtheta_finished = zeros(numberofchannels, numberofimages);
            clusterpercenttheta_finished = {};
            clusterpercenttoallpixelspostheta_finished = {};
            arrayofclusterstrengththeta_finished = zeros(numberofimages,numberofchannels,  5);
            arrayofclustersdistancetheta_finished = zeros( numberofimages,numberofchannels, 5);
            arrayofclusterstheta_finished= {};
            
            
            
            final_distancestrengthlist_finished = zeros(numberofimages, numberofchannels);
            sorted_volumelist_finished = cell(numberofimages, numberofchannels);
            sorted_centroidlist_finished = cell(numberofimages, numberofchannels);
            sorted_equivdiameterlist_finished  = cell(numberofimages, numberofchannels);
            sorted_voxellistlist_finished = cell(numberofimages, numberofchannels);
            sorted_surfacearealist_finished   = cell(numberofimages, numberofchannels);
            sorted_voxelvalueslist_finished = cell(numberofimages, numberofchannels);
            sorted_weightedcentroidlist_finished= cell(numberofimages, numberofchannels);
            sorted_meanintensitylist_finished = cell(numberofimages, numberofchannels);
            sorted_maxintensitylist_finished = cell(numberofimages, numberofchannels);
            arrayfixed4distancelist_finished = zeros(numberofimages, numberofchannels, 4);
            arrayfixed5strengthlist_finished = zeros(numberofimages, numberofchannels, 5);
            
            sorted_array_tofilldistancelist_finished = cell(numberofimages, numberofchannels);
            sorted_array_tofillstrengthlist_finished = cell(numberofimages, numberofchannels);
            
        end
        
        if buttonPearson ==1
            global Pearson_finished
            Pearson_finished = zeros(numberofimages, numberofchannels * (numberofchannels-1)/2);
            % numberofchannels* (numberofchannels-1)/2 is number of
            % combinations of channels
        end
        
        global buttonimportcellnottotake
        if buttonimportcellnottotake == 1
            global nottotake
        end
        
        
        
        
        fig2 = uifigure;
        d = uiprogressdlg(fig2, 'Title', 'Please Wait', ...
            'Message', 'Start Calculation', 'Cancelable', 'on');
        d.Value = 0;
        
        runyes = 1;
        for z = 1:numberofimages
            
            if  buttonimportcellnottotake == 1
                if nottotake(z) == 1
                    
                    
                    
                else
                    
                    
                    p2_feedbackfield.Value = ['Number ',num2str(z),' out of ', num2str(numberofimages), ' cells'];
                    path = strcat(pathwayimport,'\', names{z});
                    
                    d.Message = ['Cell ',num2str(z),' out of ',num2str(numberofimages), ' cells'];
                    d.Value = 1 / numberofimages *z;
                    
                    if d.CancelRequested
                        btn.Enable = 'on';
                        break
                    end
                    
                    buttonoverviewoverchannels = 0;
                    try [mask, ~, stackstotake] = previewcell(path, numberofimages, allchannelnames, ...
                            whichchannelforcelldetect, frontierthrshK1, frontierthrshK2, ...
                            anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, ...
                            frontier3, anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum,...
                            anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, ...
                            threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, ...
                            0, tomodulate, maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer, ...
                            minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval, ...
                            0, p2_feedbackfield, ax, buttonforcomparison, buttonifconfocal, runyes, ...
                            buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels, ...
                            channelsforcelldetection) ;
                    catch
                        mask = 0;
                    end
                    
                    
                    % length(stackstotake) == 1: für single layers
                    
                    %  sum(sum(sum(mask)))
                    %  stackstotake
                    if sum(sum(sum(mask))) == 0 || isempty(stackstotake)
                        
                        
                        if buttonallnormalizations == 0
                            dipolmomentnormalized(z,:) = 0;
                            Rnormalized(z,:) = 0;
                            qnormalized(z,:) = 0;
                        end
                        
                        if buttonallnormalizations == 1
                            dipolmomentnormalized11(z,:) = 0;
                            dipolmomentnormalized21(z,:) = 0;
                            dipolmomentnormalized12(z,:) = 0;
                            dipolmomentnormalized22(z,:) = 0;
                            dipolmomentnormalized13(z,:) = 0;
                            dipolmomentnormalized23(z,:) = 0;
                            dipolmomentnormalized14(z,:) = 0;
                            dipolmomentnormalized24(z,:) = 0;
                            dipolmomentnormalized15(z,:) = 0;
                            dipolmomentnormalized25(z,:) = 0;
                            dipolmomentnormalized16(z,:) = 0;
                            dipolmomentnormalized26(z,:) = 0;
                            
                            Rnormalized1(z,:) = 0;
                            Rnormalized2(z,:) = 0;
                            
                            qnormalized1(z,:) = 0;
                            qnormalized2(z,:) = 0;
                            qnormalized3(z,:) = 0;
                            qnormalized4(z,:) = 0;
                            qnormalized5(z,:) = 0;
                            qnormalized6(z,:) = 0;
                        end
                        
                        dipolmoment(z,:,:) = 0;
                        
                        diameter_maxvec(z) = 0;
                        diameter_avvec(z) = 0;
                        
                        qposvec(z,:) = 0;
                        avintensity(z,:) = 0;
                        RposRmean(z,:,:) = 0;
                        intensityvaluetotal(z,:) = 0;
                        RnegRmean(z,:,:) = 0;
                        RposRneg(z,:,:) = 0;
                        
                        if buttonforallparameters ==1
                            displacementRposRnegMRposMRneg(z,:) = 0;
                            displacementDipoleMomentfromMiddle(z,:) = 0;
                            sumofdistancesqRpos(:,z) = 0;
                            percoverphi(:,z) = 0;
                            countessphi(:,z) = 0;
                            distancetoavvalphi(:,z) = 0;
                            
                            
                            histogramvaluesphi(z,:,:) =  0;
                            allclusterinputphi(:,z) = 0;
                            arrayofclusterstrengthphi(z,:,:) = 0;
                            arrayofclustersdistancephi(z,:,:) = 0;
                            histogramvaluestheta(z,:,:) =  0;
                            allclusterinputtheta(:,z) = 0;
                            arrayofclusterstrengththeta(z,:,:) = 0;
                            arrayofclustersdistancetheta(z,:,:) = 0;
                            final_distancestrengthlist(z,:) = 0;
                            
                            for zaehler_channels = 1:numberofchannels
                                zaehlerhowlonghowoftenphi{zaehler_channels,z} = 0;
                                
                                endpointsphi{zaehler_channels,z} = 0;
                                howmuchoveritatallphi{zaehler_channels,z} = 0;
                                howmuchoveritatalltheta{zaehler_channels,z} = 0;
                                startpointsphi{zaehler_channels,z} = 0;
                                meanpointsphi{zaehler_channels,z} = 0;
                                lengthpointsphi{zaehler_channels,z} = 0;
                                
                                distancetonextphi{zaehler_channels,z} =0;
                                distancetomeanphi{zaehler_channels,z} = 0;
                                clusterallphi{zaehler_channels,z} = 0; % arrayofclusters;
                                clusterlengthphi{zaehler_channels,z} = 0;
                                
                                clusterpercentphi{zaehler_channels,z} =  0;
                                clusterpercenttoallpixelsposphi{zaehler_channels,z} = 0;
                                
                                arrayofclustersphi{zaehler_channels,z} =0;
                                startpointstheta{zaehler_channels,z} = 0;
                                meanpointstheta{zaehler_channels,z} = 0;
                                lengthpointstheta{zaehler_channels,z} = 0;
                                
                                distancetonexttheta{zaehler_channels,z} =0;
                                distancetomeantheta{zaehler_channels,z} = 0;
                                clusteralltheta{zaehler_channels,z} = 0; % arrayofclusters;
                                clusterlengththeta{zaehler_channels,z} = 0;
                                
                                clusterpercenttheta{zaehler_channels,z} =  0;
                                clusterpercenttoallpixelspostheta{zaehler_channels,z} = 0;
                                
                                arrayofclusterstheta{zaehler_channels,z} =0;
                                
                                
                                
                                sorted_volumelist{z, zaehler_channels} = 0;
                                sorted_centroidlist{z, zaehler_channels} = 0 ;
                                sorted_equivdiameterlist{z, zaehler_channels} = 0 ;
                                sorted_voxellistlist{z, zaehler_channels} = 0;
                                sorted_surfacearealist{z, zaehler_channels} = 0 ;
                                sorted_voxelvalueslist{z, zaehler_channels} = 0;
                                sorted_weightedcentroidlist{z, zaehler_channels} = 0;
                                sorted_meanintensitylist{z, zaehler_channels} = 0;
                                sorted_maxintensitylist{z, zaehler_channels} = 0;
                                
                                arrayfixed4distancelist(z, zaehler_channels, :)=0;
                                arrayfixed5strengthlist(z, zaehler_channels, :) = 0;
                                
                                sorted_array_tofilldistancelist{z, zaehler_channels} = 0; %
                                sorted_array_tofillstrengthlist{z, zaehler_channels} = 0; %
                                
                                
                            end
                        end
                        
                        
                        if buttonPearson ==1
                            global Pearson_finished
                            Pearson_finished(z,:) = NaN;
                            %  'here we get NaN'
                        end
                        
                    else
                        
                        if buttonforallparameters ==1 && buttonallnormalizations == 0
                            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, ...
                                qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ...
                                intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg, ...
                                displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi, ...
                                distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, ...
                                countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, ...
                                endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta,...
                                startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, ...
                                distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi, ...
                                allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, ...
                                arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, ...
                                distancetonexttheta,distancetomeantheta,clusteralltheta,clusterlengththeta, ...
                                allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                                sorted_meanintensitylist, sorted_maxintensitylist, ...
                                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist] = ...
                                polarityquantification(path, z, numberofimages,names, allchannelnames, toignore, ...
                                mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, ...
                                buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, ...
                                Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, ...
                                numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean,...
                                RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, ...
                                sumofdistancesqRpos, percoverphi, countessphi, distancetoavvalphi, ...
                                zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, ...
                                distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta, ...
                                howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi,...
                                lengthpointsphi, histogramvaluesphi, distancetonextphi, distancetomeanphi, ...
                                clusterallphi, clusterlengthphi, allclusterinputphi, clusterpercentphi, ...
                                clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi, arrayofclustersdistancephi, ...
                                arrayofclustersphi, startpointstheta, meanpointstheta, lengthpointstheta, ...
                                histogramvaluestheta, distancetonexttheta, distancetomeantheta, clusteralltheta, ...
                                clusterlengththeta,allclusterinputtheta, clusterpercenttheta, ...
                                clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta, ...
                                arrayofclustersdistancetheta,arrayofclusterstheta, ...
                                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                                sorted_meanintensitylist, sorted_maxintensitylist, ...
                                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                            
                        end
                        
                        if buttonforallparameters ==0 && buttonallnormalizations == 0
                            
                            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, ...
                                diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, ...
                                avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg]...
                                = polarityquantificationnotallparameters(path, z, numberofimages,names, ...
                                allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z,...
                                pathwayexportimages, saveimagesyes, buttongeneralqnormalization, ...
                                buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, ...
                                diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels,...
                                numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
                                RnegRmean, RposRneg);
                            
                        end
                        
                        if buttonforallparameters == 1 && buttonallnormalizations == 1
                            [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
                                dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
                                dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
                                dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
                                qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
                                qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
                                RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
                                percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
                                countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
                                howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
                                distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
                                arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
                                lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
                                allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
                                arrayofclustersdistancetheta arrayofclusterstheta, ...
                                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                                sorted_meanintensitylist, sorted_maxintensitylist, ...
                                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]  ...
                                = polarityquantificationallnormalizations(path, z, numberofimages, names, ...
                                allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                                saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
                                dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
                                dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
                                dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
                                diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
                                RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                                countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
                                zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                                lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
                                clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
                                clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                                sorted_meanintensitylist, sorted_maxintensitylist, ...
                                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                            
                        end
                        
                        if buttonforallparameters == 0 && buttonallnormalizations == 1
                            [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
                                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                                numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                                = polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
                                toignore, mask,  stackstotake, pixel_x, pixel_y,voxel_z, pathwayexportimages,...
                                saveimagesyes, buttongeneralqnormalization, buttondiameter, ...
                                dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
                                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                                numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg);
                            
                        end
                        
                        
                        if buttonPearson == 1
                            
                            pearsonscorrelationcoefficient(mask, stackstotake, path, z)
                            
                        end
                        
                        close all
                        
                    end
                    
                    if z == numberofimages
                        d.Message = 'Finished';
                        pause(1)
                        
                    end
                    
                    
                end
                
            else
                
                p2_feedbackfield.Value = ['Number ',num2str(z),' out of ', num2str(numberofimages), ' cells'];
                path = strcat(pathwayimport,'\', names{z});
                
                d.Message = ['Cell ',num2str(z),' out of ',num2str(numberofimages), ' cells'];
                d.Value = 1 / numberofimages *z;
                
                if d.CancelRequested
                    btn.Enable = 'on';
                    break
                end
                
                buttonoverviewoverchannels = 0;
                try [mask, ~, stackstotake] = previewcell(path, numberofimages, allchannelnames, ...
                        whichchannelforcelldetect, frontierthrshK1, frontierthrshK2, ...
                        anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, ...
                        frontier3, anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum,...
                        anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, ...
                        threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, ...
                        0, tomodulate, maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer, ...
                        minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval, ...
                        0, p2_feedbackfield, ax, buttonforcomparison, buttonifconfocal, runyes, ...
                        buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels, ...
                        channelsforcelldetection) ;
                catch
                    mask = 0;
                end
                
                % length(stackstotake) == 1 ||
                if sum(sum(sum(mask))) == 0 || isempty(stackstotake)
                    
                    
                    if buttonallnormalizations == 0
                        dipolmomentnormalized(z,:) = 0;
                        Rnormalized(z,:) = 0;
                        qnormalized(z,:) = 0;
                    end
                    
                    if buttonallnormalizations == 1
                        dipolmomentnormalized11(z,:) = 0;
                        dipolmomentnormalized21(z,:) = 0;
                        dipolmomentnormalized12(z,:) = 0;
                        dipolmomentnormalized22(z,:) = 0;
                        dipolmomentnormalized13(z,:) = 0;
                        dipolmomentnormalized23(z,:) = 0;
                        dipolmomentnormalized14(z,:) = 0;
                        dipolmomentnormalized24(z,:) = 0;
                        dipolmomentnormalized15(z,:) = 0;
                        dipolmomentnormalized25(z,:) = 0;
                        dipolmomentnormalized16(z,:) = 0;
                        dipolmomentnormalized26(z,:) = 0;
                        
                        Rnormalized1(z,:) = 0;
                        Rnormalized2(z,:) = 0;
                        
                        qnormalized1(z,:) = 0;
                        qnormalized2(z,:) = 0;
                        qnormalized3(z,:) = 0;
                        qnormalized4(z,:) = 0;
                        qnormalized5(z,:) = 0;
                        qnormalized6(z,:) = 0;
                    end
                    
                    dipolmoment(z,:,:) = 0;
                    
                    diameter_maxvec(z) = 0;
                    diameter_avvec(z) = 0;
                    
                    qposvec(z,:) = 0;
                    avintensity(z,:) = 0;
                    RposRmean(z,:,:) = 0;
                    intensityvaluetotal(z,:) = 0;
                    RnegRmean(z,:,:) = 0;
                    RposRneg(z,:,:) = 0;
                    
                    if buttonforallparameters ==1
                        displacementRposRnegMRposMRneg(z,:) = 0;
                        displacementDipoleMomentfromMiddle(z,:) = 0;
                        sumofdistancesqRpos(:,z) = 0;
                        percoverphi(:,z) = 0;
                        countessphi(:,z) = 0;
                        distancetoavvalphi(:,z) = 0;
                        
                        
                        histogramvaluesphi(z,:,:) =  0;
                        allclusterinputphi(:,z) = 0;
                        arrayofclusterstrengthphi(z,:,:) = 0;
                        arrayofclustersdistancephi(z,:,:) = 0;
                        histogramvaluestheta(z,:,:) =  0;
                        allclusterinputtheta(:,z) = 0;
                        arrayofclusterstrengththeta(z,:,:) = 0;
                        arrayofclustersdistancetheta(z,:,:) = 0;
                        final_distancestrengthlist(z,:) = 0;
                        
                        for zaehler_channels = 1:numberofchannels
                            zaehlerhowlonghowoftenphi{zaehler_channels,z} = 0;
                            
                            endpointsphi{zaehler_channels,z} = 0;
                            howmuchoveritatallphi{zaehler_channels,z} = 0;
                            howmuchoveritatalltheta{zaehler_channels,z} = 0;
                            startpointsphi{zaehler_channels,z} = 0;
                            meanpointsphi{zaehler_channels,z} = 0;
                            lengthpointsphi{zaehler_channels,z} = 0;
                            
                            distancetonextphi{zaehler_channels,z} =0;
                            distancetomeanphi{zaehler_channels,z} = 0;
                            clusterallphi{zaehler_channels,z} = 0; % arrayofclusters;
                            clusterlengthphi{zaehler_channels,z} = 0;
                            
                            clusterpercentphi{zaehler_channels,z} =  0;
                            clusterpercenttoallpixelsposphi{zaehler_channels,z} = 0;
                            
                            arrayofclustersphi{zaehler_channels,z} =0;
                            startpointstheta{zaehler_channels,z} = 0;
                            meanpointstheta{zaehler_channels,z} = 0;
                            lengthpointstheta{zaehler_channels,z} = 0;
                            
                            distancetonexttheta{zaehler_channels,z} =0;
                            distancetomeantheta{zaehler_channels,z} = 0;
                            clusteralltheta{zaehler_channels,z} = 0; % arrayofclusters;
                            clusterlengththeta{zaehler_channels,z} = 0;
                            
                            clusterpercenttheta{zaehler_channels,z} =  0;
                            clusterpercenttoallpixelspostheta{zaehler_channels,z} = 0;
                            
                            arrayofclusterstheta{zaehler_channels,z} =0;
                            
                            
                            
                            sorted_volumelist{z, zaehler_channels} = 0;
                            sorted_centroidlist{z, zaehler_channels} = 0 ;
                            sorted_equivdiameterlist{z, zaehler_channels} = 0 ;
                            sorted_voxellistlist{z, zaehler_channels} = 0;
                            sorted_surfacearealist{z, zaehler_channels} = 0 ;
                            sorted_voxelvalueslist{z, zaehler_channels} = 0;
                            sorted_weightedcentroidlist{z, zaehler_channels} = 0;
                            sorted_meanintensitylist{z, zaehler_channels} = 0;
                            sorted_maxintensitylist{z, zaehler_channels} = 0;
                            
                            arrayfixed4distancelist(z, zaehler_channels, :)=0;
                            arrayfixed5strengthlist(z, zaehler_channels, :) = 0;
                            
                            sorted_array_tofilldistancelist{z, zaehler_channels} = 0; %
                            sorted_array_tofillstrengthlist{z, zaehler_channels} = 0; %
                            
                        end
                    end
                    
                    
                    if buttonPearson ==1
                        global Pearson_finished
                        Pearson_finished(z,:) = NaN;
                        
                    end
                    
                else
                    
                    if buttonforallparameters ==1 && buttonallnormalizations == 0
                        [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, ...
                            qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ...
                            intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg, ...
                            displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi, ...
                            distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, ...
                            countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, ...
                            endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta,...
                            startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, ...
                            distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi, ...
                            allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, ...
                            arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                            startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, ...
                            distancetonexttheta,distancetomeantheta,clusteralltheta,clusterlengththeta, ...
                            allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                            arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist] = ...
                            polarityquantification(path, z, numberofimages,names, allchannelnames, toignore, ...
                            mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, ...
                            buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, ...
                            Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, ...
                            numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean,...
                            RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, ...
                            sumofdistancesqRpos, percoverphi, countessphi, distancetoavvalphi, ...
                            zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, ...
                            distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta, ...
                            howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi,...
                            lengthpointsphi, histogramvaluesphi, distancetonextphi, distancetomeanphi, ...
                            clusterallphi, clusterlengthphi, allclusterinputphi, clusterpercentphi, ...
                            clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi, arrayofclustersdistancephi, ...
                            arrayofclustersphi, startpointstheta, meanpointstheta, lengthpointstheta, ...
                            histogramvaluestheta, distancetonexttheta, distancetomeantheta, clusteralltheta, ...
                            clusterlengththeta,allclusterinputtheta, clusterpercenttheta, ...
                            clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta, ...
                            arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                        
                    end
                    
                    if buttonforallparameters ==0 && buttonallnormalizations == 0
                        
                        [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, ...
                            diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, ...
                            avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg]...
                            = polarityquantificationnotallparameters(path, z, numberofimages,names, ...
                            allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z,...
                            pathwayexportimages, saveimagesyes, buttongeneralqnormalization, ...
                            buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, ...
                            diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels,...
                            numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
                            RnegRmean, RposRneg);
                        
                    end
                    
                    if buttonforallparameters == 1 && buttonallnormalizations == 1
                        [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
                            dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
                            dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
                            dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
                            qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
                            qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
                            RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
                            percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
                            countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
                            howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
                            distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
                            arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
                            lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
                            allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
                            arrayofclustersdistancetheta arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]  ...
                            = polarityquantificationallnormalizations(path, z, numberofimages, names, ...
                            allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                            saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
                            dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
                            dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
                            dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
                            diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
                            RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                            countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
                            zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                            lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
                            clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                            startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
                            clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                            arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                        
                    end
                    
                    if buttonforallparameters == 0 && buttonallnormalizations == 1
                        [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                            dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                            dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
                            dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                            qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                            numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                            = polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
                            toignore, mask,  stackstotake, pixel_x, pixel_y,voxel_z, pathwayexportimages,...
                            saveimagesyes, buttongeneralqnormalization, buttondiameter, ...
                            dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                            dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                            dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
                            dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                            qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                            numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg);
                        
                        
                        
                    end
                    
                    
                    if buttonPearson == 1
                        
                        pearsonscorrelationcoefficient(mask, stackstotake, path, z)
                        
                    end
                    
                    close all
                    
                end
                
                if z == numberofimages
                    d.Message = 'Finished';
                    pause(1)
                    
                end
                
            end
            
        end
        
        if buttonallnormalizations == 0
            dipolmomentnormalized_finished = dipolmomentnormalized;
            qnormalized_finished = qnormalized;
            Rnormalized_finished = Rnormalized;
        end
        
        if buttonallnormalizations == 1
            dipolmomentnormalized11_finished = dipolmomentnormalized11;
            dipolmomentnormalized21_finished = dipolmomentnormalized21;
            dipolmomentnormalized12_finished = dipolmomentnormalized12;
            dipolmomentnormalized22_finished = dipolmomentnormalized22;
            dipolmomentnormalized13_finished = dipolmomentnormalized13;
            dipolmomentnormalized23_finished = dipolmomentnormalized23;
            dipolmomentnormalized14_finished = dipolmomentnormalized14;
            dipolmomentnormalized24_finished = dipolmomentnormalized24;
            dipolmomentnormalized15_finished = dipolmomentnormalized15;
            dipolmomentnormalized25_finished = dipolmomentnormalized25;
            dipolmomentnormalized16_finished = dipolmomentnormalized16;
            dipolmomentnormalized26_finished = dipolmomentnormalized26;
            
            Rnormalized1_finished = Rnormalized1;
            Rnormalized2_finished = Rnormalized2;
            
            qnormalized1_finished = qnormalized1;
            qnormalized2_finished = qnormalized2;
            qnormalized3_finished = qnormalized3;
            qnormalized4_finished = qnormalized4;
            qnormalized5_finished = qnormalized5;
            qnormalized6_finished = qnormalized6;
            
        end
        
        dipolmoment_finished = dipolmoment;
        
        diameter_maxvecfinished = diameter_maxvec;
        diameter_avvecfinished = diameter_avvec;
        
        qposvec_finished = qposvec;
        numberofpixels_finished = numberofpixels;
        numberofpixelspos_finished = numberofpixelspos;
        avintensity_finished = avintensity;
        RposRmean_finished  =RposRmean;
        RnegRmean_finished = RnegRmean;
        RposRneg_finished = RposRneg;
        intensityvaluetotal_finished = intensityvaluetotal;
        
        if buttonforallparameters ==1
            
            displacementRposRnegMRposMRneg_finished = displacementRposRnegMRposMRneg;
            displacementDipoleMomentfromMiddle_finished = displacementDipoleMomentfromMiddle;
            sumofdistancesqRpos_finished = sumofdistancesqRpos;
            percoverphi_finished = percoverphi;
            countessphi_finished = countessphi;
            distancetoavvalphi_finished = distancetoavvalphi;
            zaehlerhowlonghowoftenphi_finished = zaehlerhowlonghowoftenphi;
            endpointsphi_finished = endpointsphi;
            percovertheta_finished = percovertheta;
            countesstheta_finished = countesstheta;
            distancetoavvaltheta_finished = distancetoavvaltheta;
            zaehlerhowlonghowoftentheta_finished = zaehlerhowlonghowoftentheta;
            endpointstheta_finished = endpointstheta;
            howmuchoveritatallphi_finished = howmuchoveritatallphi;
            howmuchoveritatalltheta_finished = howmuchoveritatalltheta;
            startpointsphi_finished = startpointsphi;
            meanpointsphi_finished = meanpointsphi;
            lengthpointsphi_finished = lengthpointsphi;
            histogramvaluesphi_finished =  histogramvaluesphi;
            distancetonextphi_finished = distancetonextphi;
            distancetomeanphi_finished = distancetomeanphi;
            clusterallphi_finished = clusterallphi;
            clusterlengthphi_finished = clusterlengthphi;
            allclusterinputphi_finished = allclusterinputphi;
            clusterpercentphi_finished = clusterpercentphi;
            clusterpercenttoallpixelsposphi_finished = clusterpercenttoallpixelsposphi;
            arrayofclusterstrengthphi_finished = arrayofclusterstrengthphi;
            arrayofclustersdistancephi_finished = arrayofclustersdistancephi;
            arrayofclustersphi_finished= arrayofclustersphi;
            startpointstheta_finished = startpointstheta;
            meanpointstheta_finished = meanpointstheta;
            lengthpointstheta_finished = lengthpointstheta;
            histogramvaluestheta_finished =  histogramvaluestheta;
            distancetonexttheta_finished = distancetonexttheta;
            distancetomeantheta_finished = distancetomeantheta;
            clusteralltheta_finished = clusteralltheta;
            clusterlengththeta_finished = clusterlengththeta;
            allclusterinputtheta_finished = allclusterinputtheta;
            clusterpercenttheta_finished = clusterpercenttheta;
            clusterpercenttoallpixelspostheta_finished = clusterpercenttoallpixelspostheta;
            arrayofclusterstrengththeta_finished = arrayofclusterstrengththeta;
            arrayofclustersdistancetheta_finished = arrayofclustersdistancetheta;
            arrayofclusterstheta_finished= arrayofclusterstheta;
            
            
            final_distancestrengthlist_finished = final_distancestrengthlist ;
            sorted_volumelist_finished = sorted_volumelist;
            sorted_centroidlist_finished = sorted_centroidlist;
            sorted_equivdiameterlist_finished  = sorted_equivdiameterlist;
            sorted_voxellistlist_finished = sorted_voxellistlist;
            sorted_surfacearealist_finished   = sorted_surfacearealist;
            sorted_voxelvalueslist_finished = sorted_voxelvalueslist;
            sorted_weightedcentroidlist_finished= sorted_weightedcentroidlist;
            sorted_meanintensitylist_finished = sorted_meanintensitylist;
            sorted_maxintensitylist_finished = sorted_maxintensitylist;
            arrayfixed4distancelist_finished =  arrayfixed4distancelist;
            arrayfixed5strengthlist_finished = arrayfixed5strengthlist;
            
            sorted_array_tofilldistancelist_finished = sorted_array_tofilldistancelist;
            sorted_array_tofillstrengthlist_finished = sorted_array_tofillstrengthlist;
            
            
        end
        
        
        slider2.Value = 1;
        try        slider2.Limits = [1 numberofimages];
        catch
            slider2.Limits = [1 2];
        end
        slider2.MajorTicks = slider2.Limits(1):1:slider2.Limits(2);
        
        if length(slider2.Limits(1):1:slider2.Limits(2)) < 10
            slider2.MajorTicks = slider2.Limits(1):1:slider2.Limits(2);
            slider2.MinorTicks = [];
        end
        
        if (10 < length(slider2.Limits(1):1:slider2.Limits(2))) &&  ( length(slider2.Limits(1):1:slider2.Limits(2))< 100)
            slider2.MajorTicks = slider2.Limits(1):10:slider2.Limits(2);
            slider2.MinorTicks = slider2.Limits(1):1:slider2.Limits(2);
        end
        
        if length(slider2.Limits(1):1:slider2.Limits(2)) > 100
            slider2.MajorTicks = slider2.Limits(1):100:slider2.Limits(2);
            slider2.MinorTicks = slider2.Limits(1):10:slider2.Limits(2);
        end
        
        slidervalue2 = slider2.Value;
        event = 0;
        
        
        SliderValueChanged2(slider2, event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin)
        updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
        
        formatSpec = 'Runthrough done: Elapsed time is %s seconds';
        A1 = toc;
        str_time = sprintf(formatSpec, A1);
        p3_feedbackfield.Value = str_time;
        p2_feedbackfield.Value = str_time;
        
        
        btn.Enable = 'on';
        
        
    end
    
end
nottotake = zeros(numberofimages,1);
end

% fct to switch viewed channel and refresh cell view in Tab 2
function channeltoshow(efp3channeltoshow,  ax, p2_feedbackfield)
global channeltoshowval slidervalue names pathwayimport allchannelnames toignore channelnames numberofchannels  ...
    whichchannelforcelldetect numberofimages ...
    stackstotakeforcertainimagenumber buttonforapplythreshold buttonforcomparison buttonforjuststructure buttonoverviewoverchannels
%
% stackstotakeforcertainimagenumber = {slidervalue, stackstotake, mask};
mask = 0;
if ~isempty(stackstotakeforcertainimagenumber)
    if sum(stackstotakeforcertainimagenumber{2}) ~=0
        if slidervalue == stackstotakeforcertainimagenumber{1}
            stackstotake = stackstotakeforcertainimagenumber{2};
        end
    end
    
    if sum(sum(sum(stackstotakeforcertainimagenumber{3}))) ~= 0
        if slidervalue == stackstotakeforcertainimagenumber{1}
            mask = stackstotakeforcertainimagenumber{3};
        end
        
    end
end


channeltoshowval = efp3channeltoshow.Value;



value = round(slidervalue);
if slidervalue == 0 || isempty(slidervalue)
    value = 1;
end



path = strcat(pathwayimport,'\', names{value});


if isempty(whichchannelforcelldetect) || whichchannelforcelldetect == 0
    whichchannelforcelldetect = 1;
end

b = imfinfo(path);
stacknum = numel(b);


if channeltoshowval <= length(allchannelnames)
    
    if buttonforapplythreshold ==1
        
        if buttonforjuststructure ==1
            
            count = 1;
            M_original = zeros(b(1).Height, b(1).Width, length(stackstotake))
            for k = channeltoshowval+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval+length(allchannelnames)*(stackstotake(end)-1)
                M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
            end
            
            
            if buttonforcomparison == 0
                montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))), 'Parent', ax);
                title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20)
            end
            
            if buttonforcomparison ==1
                
                count = 1;
                M_original_all = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
                for k = channeltoshowval:length(allchannelnames):stacknum
                    M_original_all(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                    count = count + 1;
                end
                
                a = montage(double(M_original_all(:,:,:))./max(max(double(M_original_all(:,:,:)))));
                totake_a = a.CData;
                totake_a(:,size(totake_a,2)+1:size(totake_a,2)+10) = 1;
                b= montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))));
                totake_b = b.CData;
                %
                title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20)
                imshowpair(totake_a, totake_b, 'montage', 'Parent', ax);
                
                %
            end
            
        else
            
            if    exist('stackstotake') == 1
                
                
                if   ~isempty(stackstotake) && sum(sum(sum(mask))) == 0
                    
                    
                    count = 1;
                    M_original = zeros(b(1).Height, b(1).Width, length(stackstotake));
                    for k = channeltoshowval+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval+length(allchannelnames)*(stackstotake(end)-1)
                        M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                        count = count + 1;
                    end
                    
                    
                    if buttonforcomparison == 0
                        montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))), 'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20)
                    end
                    
                    if buttonforcomparison ==1
                        
                        count = 1;
                        M_original_all = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
                        for k = channeltoshowval:length(allchannelnames):stacknum
                            M_original_all(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
                            count = count + 1;
                        end
                        
                        a = montage(double(M_original_all(:,:,:))./max(max(double(M_original_all(:,:,:)))));
                        totake_a = a.CData;
                        
                        b= montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))));
                        totake_b = b.CData;
                        
                        imshowpair(totake_a, totake_b,  'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20)
                        
                    end
                    
                end
                
                
                if ~isempty(stackstotake) && sum(sum(sum(mask))) ~= 0
                    
                    count = 1;
                    M_original = zeros(b(1).Height, b(1).Width, length(stackstotake));
                    for k = channeltoshowval+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval+length(allchannelnames)*(stackstotake(end)-1)
                        M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                        count = count + 1;
                    end
                    
                    
                    
                    runyes = 0;
                    if runyes == 0
                        [mask, path, image_toshowc] = toshow(allchannelnames, path, mask,...
                            stackstotake, ax, buttonforcomparison, channeltoshowval, ...
                            buttonoverviewoverchannels) ;
                    end
                    
                    
                end
                
                
            else
                %
                global buttonforjuststructure buttonoverviewoverchannels ...
                    buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
                    frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 ...
                    anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                    anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
                    anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 ...
                    threshforveryfaint anpassungintensotsufrontier1 buttonforoutoffocuslight ...
                    buttontoshow tomodulate maxnumofimagescell minnumofimagescell...
                    maxpixnumlayer minnumberpixelstodetectforcell maxnumpixelwholecell...
                    buttonforcomparison buttonifconfocal minpixnumlayer
                
                runyes = 0;
                % if no run through all images (runyes = 0), comments to cell detection appear in the feedbackfield
                [ mask imagetoshow stackstotake] =  previewcell(path, numberofimages,...
                    allchannelnames, whichchannelforcelldetect,   frontierthrshK1, frontierthrshK2,...
                    anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3,...
                    anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
                    anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1,...
                    threshforveryfaint,anpassungintensotsufrontier1, buttonforoutoffocuslight,...
                    buttontoshow, tomodulate, maxnumofimagescell , minnumofimagescell, maxpixnumlayer,...
                    minpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell,...
                    channeltoshowval, buttonforjuststructure, p2_feedbackfield, ax, ...
                    buttonforcomparison, buttonifconfocal, runyes, buttonoverviewoverchannels,...
                    buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
                % original image with overlaid mask is shown thanks to
                % fct toshow() of fct previewcell()
                
                
                global stackstotakeforcertainimagenumber
                stackstotakeforcertainimagenumber = {slidervalue, stackstotake, mask};
                
                
            end
            
        end
        
    else
        
        count = 1;
        M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
        for k = channeltoshowval:length(allchannelnames):stacknum
            M_original(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
            count = count + 1;
        end
        
        
        montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))), 'Parent', ax)
        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20)
        
    end
    
else
    
    p2_feedbackfield.Value = 'No valid channel number';
    
end

end


% fct for detecting cells without limitation to important parameter subset
function checkifadvancedfcn(checkifadvanced, efstructthreshfrontier1, describstructurethresh, ...
    efstructthreshfrontier2, describstructurethresh2, efstructthreshfrontierafternocell , ...
    describstructurethresh6a, outoffocusoption , describintensthreshoof, ...
    describfrontieradditional, efintensthreshoof, effrontieradditional, describp2_1t3, ...
    efintensthresh3, describstructurethresh6, efstructurethresh6 , describstructurethresh7, ...
    describstructurethresh7b, efstructurethresh7 , efstructurethresh7b, efintenstomodulateoof)
val = checkifadvanced.Value;

global buttonifadvanced
buttonifadvanced = val;


if val
    efstructthreshfrontier1.Enable = 'on';
    efstructthreshfrontier2.Enable = 'on';
    efstructthreshfrontierafternocell.Enable = 'on';
    describstructurethresh6a.Enable = 'on';
    describstructurethresh6a.Editable = 'off';
    describstructurethresh.Enable = 'on';
    describstructurethresh.Editable = 'off';
    describstructurethresh2.Enable = 'on';
    describstructurethresh2.Editable = 'off';
    outoffocusoption.Enable = 'on';
    describintensthreshoof.Enable = 'on';
    describintensthreshoof.Editable = 'off';
    describfrontieradditional.Enable = 'on';
    describfrontieradditional.Editable = 'off';
    describstructurethresh6.Enable = 'on';
    describstructurethresh6.Editable = 'off';
    efstructurethresh6.Enable = 'on';
    describstructurethresh7.Enable = 'on';
    describstructurethresh7.Editable = 'off';
    describstructurethresh7b.Enable = 'on';
    describstructurethresh7b.Editable = 'off';
    efstructurethresh7.Enable = 'on';
    efstructurethresh7b.Enable = 'on';
    efintensthreshoof.Enable = 'on';
    efintensthreshoof.Editable = 'on';
    effrontieradditional.Enable = 'on';
    describp2_1t3.Enable = 'on';
    describp2_1t3.Editable = 'off';
    efintensthresh3.Enable = 'on';
    efintenstomodulateoof.Enable = 'on';
    efintenstomodulateoof.Editable = 'on';
else
    efstructthreshfrontier1.Enable = 'off';
    efstructthreshfrontier2.Enable = 'off';
    efstructthreshfrontierafternocell.Enable = 'off';
    describstructurethresh6a.Enable = 'off';
    describstructurethresh.Enable = 'off';
    describstructurethresh2.Enable = 'off';
    outoffocusoption.Enable = 'off';
    describintensthreshoof.Enable = 'off';
    efintensthreshoof.Enable = 'off';
    describfrontieradditional.Enable = 'off';
    effrontieradditional.Enable = 'off';
    describstructurethresh6.Enable = 'off';
    efstructurethresh6.Enable = 'off';
    describstructurethresh7.Enable = 'off';
    describstructurethresh7b.Enable = 'off';
    efstructurethresh7.Enable = 'off';
    efstructurethresh7b.Enable = 'off';
    describp2_1t3.Enable = 'off';
    efintensthresh3.Enable = 'off';
    efintenstomodulateoof.Enable = 'off';
    
end

end


% fct for detecting cells without limitation to important parameter subset
% for rerun option
function checkifadvancedfcnrerun(checkifadvanced, efstructthreshfrontier1, describstructurethresh,...
    efstructthreshfrontier2, describstructurethresh2, efstructthreshfrontierafternocell,...
    describstructurethresh6a, outoffocusoption , describintensthreshoof, describfrontieradditional,...
    efintensthreshoof, effrontieradditional, describp2_1t3, efintensthresh3, describstructurethresh6,...
    efstructurethresh6, describstructurethresh7,describstructurethresh7b, efstructurethresh7, efstructurethresh7b, efintenstomodulateoof)
val = checkifadvanced.Value;

global buttonifadvanced2
buttonifadvanced2 = val;


if val
    efstructthreshfrontier1.Enable = 'on';
    efstructthreshfrontier2.Enable = 'on';
    efstructthreshfrontierafternocell.Enable = 'on';
    describstructurethresh6a.Enable = 'on';
    describstructurethresh6a.Editable = 'off';
    describstructurethresh.Enable = 'on';
    describstructurethresh.Editable = 'off';
    describstructurethresh2.Enable = 'on';
    describstructurethresh2.Editable = 'off';
    outoffocusoption.Enable = 'on';
    describintensthreshoof.Enable = 'on';
    describintensthreshoof.Editable = 'off';
    describfrontieradditional.Enable = 'on';
    describfrontieradditional.Editable = 'off';
    describstructurethresh6.Enable = 'on';
    describstructurethresh6.Editable = 'off';
    efstructurethresh6.Enable = 'on';
    describstructurethresh7.Enable = 'on';
    describstructurethresh7.Editable = 'off';
    describstructurethresh7b.Enable = 'on';
    describstructurethresh7b.Editable = 'off';
    efstructurethresh7.Enable = 'on';
    efstructurethresh7b.Enable = 'on';
    efintensthreshoof.Enable = 'on';
    efintensthreshoof.Editable = 'on';
    effrontieradditional.Enable = 'on';
    describp2_1t3.Enable = 'on';
    describp2_1t3.Editable = 'off';
    efintensthresh3.Enable = 'on';
    efintenstomodulateoof.Enable = 'on';
    efintenstomodulateoof.Editable = 'on';
else
    efstructthreshfrontier1.Enable = 'off';
    efstructthreshfrontier2.Enable = 'off';
    efstructthreshfrontierafternocell.Enable = 'off';
    describstructurethresh6a.Enable = 'off';
    describstructurethresh.Enable = 'off';
    describstructurethresh2.Enable = 'off';
    outoffocusoption.Enable = 'off';
    describintensthreshoof.Enable = 'off';
    efintensthreshoof.Enable = 'off';
    describfrontieradditional.Enable = 'off';
    effrontieradditional.Enable = 'off';
    describstructurethresh6.Enable = 'off';
    efstructurethresh6.Enable = 'off';
    describstructurethresh7.Enable = 'off';
    describstructurethresh7b.Enable = 'off';
    efstructurethresh7.Enable = 'off';
    efstructurethresh7b.Enable = 'off';
    describp2_1t3.Enable = 'off';
    efintensthresh3.Enable = 'off';
    efintenstomodulateoof.Enable = 'off';
    
end

end


% fct for applying parameter limits for cell detection
% if not checked: can see only original images
% if checked: can see structure thresholding (which layers automatically
% chosen) or structure + intensity thresholding (cell pixels vs. background
% pixels)
function checkifapplythresholdingfcn(checkifapplythreshold, p2_feedbackfield, ax)
global buttonforapplythreshold
val = checkifapplythreshold.Value;

if val
    buttonforapplythreshold = 1;
else
    buttonforapplythreshold = 0;
end

if buttonforapplythreshold == 1
    
    global slidervalue buttonforjuststructure names  pathwayimport allchannelnames toignore ...
        channelnames numberofchannels whichchannelforcelldetect numberofimages channeltoshowval ...
        frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 ...
        anpassungotsuthreshK3 frontier3 anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
        anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 threshforveryfaint ...
        anpassungintensotsufrontier1 buttonforoutoffocuslight buttontoshow ...
        tomodulate maxnumofimagescell minnumofimagescell maxpixnumlayer ...
        minnumberpixelstodetectforcell maxnumpixelwholecell buttonforcomparison ...
        buttonifconfocal minpixnumlayer buttonoverviewoverchannels ...
        buttonifcellrecognitionseveralchannels  channelsforcelldetection
    
    
    slidervalue = round(slidervalue);
    
    
    path = strcat(pathwayimport,'\', names{slidervalue});
    if isempty(whichchannelforcelldetect)
        whichchannelforcelldetect = 1;
    end
    
    if isempty(channeltoshowval) || channeltoshowval == 0
        channeltoshowval = 1;
    end
    
    runyes = 0;
    [mask imagetoshow stackstotake] =  previewcell(path, numberofimages, ...
        allchannelnames, whichchannelforcelldetect,   frontierthrshK1,frontierthrshK2,...
        anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3,...
        anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
        anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, ...
        threshforveryfaint,anpassungintensotsufrontier1, buttonforoutoffocuslight,...
        buttontoshow, tomodulate, maxnumofimagescell , minnumofimagescell, maxpixnumlayer,...
        minpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval,...
        buttonforjuststructure, p2_feedbackfield, ax, buttonforcomparison, buttonifconfocal,...
        runyes, buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels,...
        channelsforcelldetection) ;
    
end

end


% fct to show just cell layer selection (structure thresholding)
function checkifshowjuststructure(checkifjuststructure, ~)
global buttonforjuststructure

val = checkifjuststructure.Value;

if val
    buttonforjuststructure = 1;
else
    buttonforjuststructure = 0;
end

end


% fct to show just cell layer selection (structure thresholding) in third
% tab
function checkifshowjuststructure2(checkifjuststructure2, ~)
global buttonforjuststructure2

val = checkifjuststructure2.Value;

if val
    buttonforjuststructure2 = 1;
else
    buttonforjuststructure2 = 0;
end

end


% fct to make image processing visible (thresholding)
function checkifvisible(checkifrunopen, ~)
global buttontoshow
val = checkifrunopen.Value;

if val
    buttontoshow = 1;
else
    buttontoshow = 0;
end

end

% fct to make image processing visible (thresholding)
function checkifvisible2(checkifrunopen, ~)
global buttontoshow2
val = checkifrunopen.Value;

if val
    buttontoshow2 = 1;
else
    buttontoshow2 = 0;
end

end


% fct to make image processing visible (thresholding)
function checkifvisiblererun(checkifrunopen, ~)
global buttontoshowrerun
val = checkifrunopen.Value;

if val
    buttontoshowrerun = 1;
else
    buttontoshowrerun = 0;
end

end


% fct to see original and mask next to each other (Tab 2)
function checkcomparisonimagesfcn(checkcomparisonimages,~)
global buttonforcomparison

val = checkcomparisonimages.Value;

if val
    buttonforcomparison = 1;
    
    
else
    buttonforcomparison = 0;
    
end


end


% fct to see original and mask next to each other (Tab 3)
function checkcomparisonimagesfcn2(checkcomparisonimages2, ~)
global buttonforcomparison2

val = checkcomparisonimages2.Value;

if val
    buttonforcomparison2 = 1;
    
else
    buttonforcomparison2 = 0;
    
end

end



% fct to adjust threshold for first two layers (out of focus light:
% can make these layers brighter and demand other parameters for cell pixel
% detection), additional to threshold adjustments: can move layers up and
% down
function checkifoutoffocus(outoffocusoption, ~)
global buttonforoutoffocuslight

val = outoffocusoption.Value;
if val
    buttonforoutoffocuslight = 1;
else
    buttonforoutoffocuslight = 0;
end

end


% fct for rerun to adjust threshold for first two layers (out of focus light:
% can make these layers brighter and demand other parameters for cell pixel
% detection), additional to threshold adjustments: can move layers up and
% down
function checkifoutoffocusrerun(outoffocusoption, ~)
global buttonforoutoffocuslight2

val = outoffocusoption.Value;
if val
    buttonforoutoffocuslight2 = 1;
else
    buttonforoutoffocuslight2 = 0;
end

end


% fct requesting confirmation when closing main function
function my_closereq(fig, ~)
selection = uiconfirm(fig, 'Close the figure window?', ...
    'Confirmation');
switch selection
    case 'OK'
        global allatonce_parameters decisionviewoption decisionimageoption
        filepathway = mfilename('fullpath');
        
        [filepath,name,ext] = fileparts(filepathway)
        cd(filepath)
        strcat(string(filepath),'\configurationCellDetail.txt')
        fid=fopen(strcat(string(filepath), '\configurationCellDetail.txt'),'wt');
        fid
        
        a = [allatonce_parameters; decisionviewoption; decisionimageoption];
        try  for i = 1:3
                fprintf(fid, [num2str(a(i)) '\n']);
            end
            fclose(fid)
        catch
        end
        
        
        clear global
        clearvars -global
        delete(fig)
        
    case 'Cancel'
        return
end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% functions for parameter values


function structurethreshfrontier1(efstructthreshfrontier1, p2_feedbackfield)
global frontierthrshK1

summed = sum(isletter(efstructthreshfrontier1.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold Frontier 1 (Structure)';
    
else
    frontierthrshK1 = efstructthreshfrontier1.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethreshfrontier2(efstructthreshfrontier2, p2_feedbackfield)
global frontierthrshK2

summed = sum(isletter(efstructthreshfrontier2.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold Frontier 2 (Structure)';
else
    frontierthrshK2 = efstructthreshfrontier2.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function structurethresh3(efstructurethresh3, p2_feedbackfield)
global  anpassungotsuthreshK1

summed = sum(isletter(efstructurethresh3.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold Addition 1 (Structure)';
else
    anpassungotsuthreshK1 = efstructurethresh3.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethresh4(efstructurethresh4, p2_feedbackfield)
global anpassungotsuthreshK2

summed = sum(isletter(efstructurethresh4.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold Addition 2 (Structure)';
else
    anpassungotsuthreshK2 = efstructurethresh4.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethresh5(efstructurethresh5,  p2_feedbackfield)
global anpassungotsuthreshK3

summed = sum(isletter(efstructurethresh5.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold Addition 3 (Structure)';
else
    anpassungotsuthreshK3 = efstructurethresh5.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethreshfrontierafternocell(efstructthreshfrontierafternocell, p2_feedbackfield)
global frontier3

summed = sum(isletter(efstructthreshfrontierafternocell.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold frontier after no cell detection (Structure)';
else
    frontier3 = efstructthreshfrontierafternocell.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethresh6(efstructurethresh6,  p2_feedbackfield)
global anpassungotsuthreshKsubtr

summed = sum(isletter(efstructurethresh6.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold subtraction after no cell detection (Structure)';
else
    anpassungotsuthreshKsubtr = efstructurethresh6.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function structurethresh7(efstructurethresh7, p2_feedbackfield)
global thresholdnumpixelsforrangefilt

summed = sum(isletter(efstructurethresh7.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels per layer for Range filter (Structure)';
else
    thresholdnumpixelsforrangefilt = efstructurethresh7.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function structurethresh7b(efstructurethresh7b, p2_feedbackfield)
global thresholdnumpixelsforrangefiltmaximum

summed = sum(isletter(efstructurethresh7b.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels per layer for Range filter (Structure)';
else
    thresholdnumpixelsforrangefiltmaximum = efstructurethresh7b.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function intensthreshoof(efintensthreshoof,  p2_feedbackfield)
global anpassungotsuthresh1

summed = sum(isletter(efintensthreshoof.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold addition to global trheshold for out of focus light (Intensity)';
else
    anpassungotsuthresh1 = efintensthreshoof.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function frontieradditionalfcnoof(effrontieradditional,  p2_feedbackfield)
global frontieraddition1

summed = sum(isletter(effrontieradditional.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold addition for out of focus light (Intensity)';
else
    frontieraddition1 = effrontieradditional.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end



function efintensthreshold1fcn(efintensthreshold1,  p2_feedbackfield)
global anpassungintensotsufrontier1

summed = sum(isletter(efintensthreshold1.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold frontier I1 (Intensity)';
else
    anpassungintensotsufrontier1 = efintensthreshold1.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function efintensthresholdadditionstructfcn(efintensthresholdadditionstruct, p2_feedbackfield)
global anpassungotsuthresh2

summed = sum(isletter(efintensthresholdadditionstruct.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold addition 1 (Intensity)';
else
    anpassungotsuthresh2 = efintensthresholdadditionstruct.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensthreshadditionveryfaint(efintensthresh2faint, p2_feedbackfield)
global threshforveryfaint

summed = sum(isletter(efintensthresh2faint.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Threshold addition to layer after absolutely no cell detection (Intensity)';
else
    threshforveryfaint = efintensthresh2faint.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function  intenstomodulateoof(efintenstomodulateoof,  p2_feedbackfield)
global tomodulate

summed = sum(isletter(efintenstomodulateoof.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Move found layers by value (Intensity)';
else
    tomodulate = efintenstomodulateoof.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensmaxnumimcell(efintensmaxnumimcell,  p2_feedbackfield)
global maxnumofimagescell

summed = sum(isletter(efintensmaxnumimcell.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Maximum number of pixels per cell (Intensity)';
else
    maxnumofimagescell = efintensmaxnumimcell.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensminnumimcell(efintensminnumimcell,  p2_feedbackfield)
global minnumofimagescell

summed = sum(isletter(efintensminnumimcell.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels per cell (Intensity)';
else
    minnumofimagescell = efintensminnumimcell.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensmaxpixnumlayerfcn(efmaxpixnumlayer,  p2_feedbackfield)
global maxpixnumlayer

summed = sum(isletter(efmaxpixnumlayer.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Maximum number of pixels per layer for Range filter (Intensity)';
else
    maxpixnumlayer = efmaxpixnumlayer.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensminpixnumlayerfcn(efminpixnumlayer,  p2_feedbackfield)
global minpixnumlayer

summed = sum(isletter(efminpixnumlayer.Value));

if summed ~= 0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels per layer for Range filter (Intensity)';
else
    minpixnumlayer = efminpixnumlayer.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end






function intensminnumpixcell(efintensminnumpixcell,  p2_feedbackfield)
global minnumberpixelstodetectforcell

summed = sum(isletter(efintensminnumpixcell.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels per layer for Range filter (Intensity)';
else
    minnumberpixelstodetectforcell =efintensminnumpixcell.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


function intensmaxnumpixcell(efintensmaxnumpixcell,  p2_feedbackfield)
global maxnumpixelwholecell

summed = sum(isletter(efintensmaxnumpixcell.Value));

if summed ~=0
    p2_feedbackfield.Value = 'Warning: Not a numeric value for Minimum number of pixels for each cell (Intensity)';
else
    maxnumpixelwholecell = efintensmaxnumpixcell.Value;
    p2_feedbackfield.Value = 'Accepted.';
end

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% functions for cell detections

% fct using threshold parameters to give mask as output
% import: gives out mask == image;
% structthreshold: threshold fct. applying parameters for structure
% detection and giving out which stacks can be taken
% structureifstackstotakeisempty: threshold fct. if structthreshold found
% no stacks to take
% findlongestepisode(stackstotake): if layers found, find longest follow-up
% of layers
% finalstackstotake: final decision on which layers are taken
% makesmallersample: reduce image to layers finally decided on
% intensotsu: intensity threshold parameters are applied
% retryintensotsu:
% retryintensotsu2:
% tofillholesandmergemask: smoothing of cell pixels before filling holes or
% just filling holes
% (dependent on confocal option)
% tomakeoneobject: choose biggest object that follows parameter limits of
% cell size
% toshow: show user the result of thresholding
function [mask imagetoshow stackstotake] = previewcell(path, numberofimages, allchannelnames, whichchannelforcelldetect, frontierthrshK1, frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3, anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
    anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint,anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, maxnumofimagescell , minnumofimagescell, maxpixnumlayer, minpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval, buttonforjuststructure, p2_feedbackfield, ax , buttonforcomparison, buttonifconfocal, runyes, buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels , channelsforcelldetection)

[mask max_val] = import(path, numberofimages, allchannelnames, whichchannelforcelldetect, buttonifcellrecognitionseveralchannels , channelsforcelldetection);
image = mask;
imagetoshow = 0;
if runyes ==1
    txt = '';
end

if isempty(mask)
    if runyes ==0
        p2_feedbackfield.Value = 'No image detected';
    end
    mask = 0;
    imagetoshow = 0;
    stackstotake = 0;
else
    
    if runyes ==0
        txt = 'Image Accepted.';
        p2_feedbackfield.Value = txt;
    end
    % structure
    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    [stackstotake, T3, buttonfromrange] = structthreshold(mask,frontierthrshK1 , frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, buttontoshow, buttonifconfocal) ;
    if runyes == 0
        txt = [txt, '\n', ['Structure detection: Global threshold is: ',num2str(T3)]];
        uebergang = splitlines(compose(txt));
        if isempty(uebergang{1}) &&  length(uebergang)>=2
            p2_feedbackfield.Value = splitlines(compose(txt(3:end)));
        else
            p2_feedbackfield.Value =  splitlines(compose(txt));
        end
        
    end
    
    if isempty(stackstotake) && buttonifconfocal == 0
        
        [T3, stackstotake] =  structureifstackstotakeisempty(image, frontier3, anpassungotsuthreshKsubtr,  thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum,  buttontoshow) ;
        
        if runyes ==0
            txt = [txt, '\n',  ['Structure detection after averaging: Global threshold is: ', num2str(T3)]];
            
            uebergang = splitlines(compose(txt));
            if isempty(uebergang{1}) &&  length(uebergang)>=2
                p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
            else
                p2_feedbackfield.Value  =  splitlines(compose(txt));
            end
            
        end
        
    end
    
    global buttonsinglelayer
    if buttonsinglelayer == 1
        stackstotake = 1;
        if isempty(stackstotake)
            if runyes == 0
                txt = [txt, '\n','No cell detected: Please try other values for setting Structure threshold'];
                
                uebergang = splitlines(compose(txt));
                if isempty(uebergang{1})  &&  length(uebergang)>=2
                    p2_feedbackfield.Value =  splitlines(compose(txt(3:end)));
                else
                    p2_feedbackfield.Value  =  splitlines(compose(txt));
                end
                
            end
            
        else
            stackstotake = 1;
            [image_histsmallersample, stacknum_smallersample] = makesmallersample(image, stackstotake);
            close all;
            
            if buttonforjuststructure ~= 1
                [valid, BW4 , layermaxval, layersdeleted] = intensotsu(image_histsmallersample, stacknum_smallersample, frontieraddition1, buttonforoutoffocuslight, anpassungotsuthresh1,anpassungintensotsufrontier1,anpassungotsuthresh2, maxpixnumlayer, minpixnumlayer, buttonfromrange, buttontoshow, buttonifconfocal);
                % maxpixnumlayer: if confocal:
                % different value
                
                logicalvaluebw4 = isempty(find(BW4>0));
                
                if  buttonifconfocal == 0
                    if isempty(find(BW4>0))
                        if runyes == 0
                            
                            txt = [txt, '\n', 'First Otsu`s Method Thresholding not successful.','\n' ,['Deleted layers because of maxpixnumlayer:', num2str(layersdeleted), ', taken layers: ', num2str(valid), ' and maximum number of pixels in layer is: ', num2str(layermaxval), ' with all layer pixel numbers being above minimum number of pixels ', num2str(minpixnumlayer)  ]];
                            
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1})   &&  length(uebergang)>=2
                                p2_feedbackfield.Value =  splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value  =  splitlines(compose(txt));
                            end
                            
                        end
                        [valid, BW4, txt] =  retryintensotsu(valid, logicalvaluebw4, stacknum_smallersample, image_histsmallersample,threshforveryfaint, maxpixnumlayer, minpixnumlayer, txt, buttontoshow );
                    end
                    
                    if length(find(BW4>0)) < minnumberpixelstodetectforcell || valid == 0
                        if runyes ==0
                            txt = [txt, '\n',  'Second Otsu`s Method Thresholding not successful.'];
                            
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1})    &&  length(uebergang)>=2
                                p2_feedbackfield.Value = splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value  =  splitlines(compose(txt));
                            end
                        end
                        
                        [valid, BW4] = retryintensotsu2(valid, stacknum_smallersample, image_histsmallersample, logicalvaluebw4, maxpixnumlayer, minpixnumlayer, buttontoshow );
                        
                    end
                end
                close all
                
                if valid == 0
                    if runyes ==0
                        txt = [txt, '\n', 'No cell layer detected: Please try other values for setting Intensity threshold'];
                        
                        uebergang = splitlines(compose(txt));
                        if isempty(uebergang{1}) &&  length(uebergang)>=2
                            p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                        else
                            p2_feedbackfield.Value  =  splitlines(compose(txt));
                        end
                    end
                    
                    mask = 0;
                    imagetoshow= 0;
                    stackstotake = 0;
                else
                    % make cell out of detected cell pixels
                    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    
                    
                    mask_merged = tofillholesandmergemask(BW4, stacknum_smallersample, image_histsmallersample, buttontoshow, stackstotake, image, buttonifconfocal); % mask here: still big one
                    [nope, mask, biggestfound txt] = tomakeoneobject(mask_merged, maxnumpixelwholecell, image,  buttontoshow, minnumberpixelstodetectforcell, txt, runyes) ;
                    if nope == 1
                        if runyes ==0
                            txt = [txt, '\n', 'No object left with low enough pixel number. Probably need to change intensity threshold, not maximal possible value of pixel number of cell.'];
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1}) &&  length(uebergang)>=2
                                p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value  =  splitlines(compose(txt));
                            end
                            
                        end
                        mask = 0;
                        imagetoshow = 0;
                        stackstotake = 0;
                    else
                        
                        if biggestfound ~=0
                            if runyes ==0
                                txt = [txt, '\n', ['Pixel number of mask: ', num2str(length(find(mask==1))), ' and Biggest pixel number of objects:', num2str(biggestfound), ' (if values are equal: Biggest object was taken)' ]];
                                
                                uebergang = splitlines(compose(txt));
                                if isempty(uebergang{1})  &&  length(uebergang)>=2
                                    p2_feedbackfield.Value  = splitlines(compose(txt(3:end)));
                                else
                                    p2_feedbackfield.Value =  splitlines(compose(txt));
                                end
                                
                            end
                            
                            
                            
                        else
                            if runyes == 0
                                txt = [txt, '\n', ['Pixel number due to mask: ', num2str(length(find(mask==1))), ', only one object was found']];
                                %
                                uebergang = splitlines(compose(txt));
                                if isempty(uebergang{1}) &&  length(uebergang)>=2
                                    p2_feedbackfield.Value =    splitlines(compose(txt(3:end)));
                                else
                                    p2_feedbackfield.Value =  splitlines(compose(txt));
                                end
                                %
                            end
                            
                        end
                        
                        % show result to user if not running through all images
                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        if runyes == 0
                            [mask, path, image_toshowc] = toshow(allchannelnames, path, mask, stackstotake, ax, buttonforcomparison, channeltoshowval, buttonoverviewoverchannels ) ;
                        end
                        
                    end
                    
                    try imagetoshow = double(image_toshowc(:,:,:))./max(max(double(image_toshowc(:,:,:))));
                    catch
                        imagetoshow = mask;
                    end
                    
                end
            else % buttonforjuststructure == 1: toshow:
                % just show chosen layers
                if runyes == 0
                    [image2 max_val] = import(path, numberofimages, allchannelnames, channeltoshowval, buttonifcellrecognitionseveralchannels , channelsforcelldetection);
                    mask = 0;
                    
                    if buttonforcomparison == 1
                        imagetoshow = double(image2(:,:,stackstotake))./max(max(double(image2(:,:,stackstotake))));
                        imagetoshow2 = double(image2(:,:,:))./max(max(double(image2(:,:,:))));
                        
                        a = montage(imagetoshow, 'Parent', ax);
                        atotake = a.CData;
                        atotake(:,size(atotake,2)+1:size(atotake,2)+10) = 1;
                        b = montage(imagetoshow2, 'Parent', ax);
                        btotake = b.CData;
                        
                        imshowpair(atotake, btotake, 'montage', 'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20);
                        
                    else
                        imagetoshow = double(image2(:,:,stackstotake))./max(max(double(image2(:,:,stackstotake))));
                        
                        montage(imagetoshow, 'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20);
                        
                    end
                end
                
                
            end
            
            
        end
    end
    
    if buttonsinglelayer == 0
        if(isempty(stackstotake) || length(stackstotake) < 2 )
            if runyes == 0
                txt = [txt, '\n','No cell detected or less than 2 layers: Please try other values for setting Structure threshold'];
                
                uebergang = splitlines(compose(txt));
                if isempty(uebergang{1})   &&  length(uebergang)>=2
                    p2_feedbackfield.Value =    splitlines(compose(txt(3:end)));
                else
                    p2_feedbackfield.Value=  splitlines(compose(txt));
                end
            end
        else
            
            [lengthforones, meanstacks, stackstotake2] =  findlongestepisode(stackstotake);
            
            maximumstackvaluethatpossible = size(image,3);
            stackstotake =  finalstackstotake(lengthforones, maxnumofimagescell, minnumofimagescell, meanstacks, tomodulate, stackstotake, buttonforoutoffocuslight, stackstotake2, maximumstackvaluethatpossible) ;
            
            stackstotake(find(stackstotake > size(mask,3))) = [];
            
            [image_histsmallersample, stacknum_smallersample] = makesmallersample(image, stackstotake);
            
            close all;
            % intensity
            % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            if buttonforjuststructure ~= 1
                [valid, BW4 , layermaxval, layersdeleted] = intensotsu(image_histsmallersample, stacknum_smallersample, frontieraddition1, buttonforoutoffocuslight, anpassungotsuthresh1,anpassungintensotsufrontier1,anpassungotsuthresh2, maxpixnumlayer, minpixnumlayer, buttonfromrange, buttontoshow, buttonifconfocal);
                % maxpixnumlayer: if confocal:
                % different value
                
                logicalvaluebw4 = isempty(find(BW4>0));
                if  buttonifconfocal == 0
                    if isempty(find(BW4>0)) || valid < 4
                        
                        if runyes == 0
                            
                            txt = [txt, '\n', 'First Otsu`s Method Thresholding not successful.','\n' ,['Deleted layers because of maxpixnumlayer:', num2str(layersdeleted), ', taken layers: ', num2str(valid), ' and maximum number of pixels in layer is: ', num2str(layermaxval), ' with all layer pixel numbers being above minimum number of pixels ', num2str(minpixnumlayer)  ]];
                            
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1})  &&  length(uebergang)>=2
                                p2_feedbackfield.Value =  splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value =  splitlines(compose(txt));
                            end
                        end
                        
                        [valid, BW4, txt] =  retryintensotsu(valid, logicalvaluebw4, stacknum_smallersample, image_histsmallersample,threshforveryfaint, maxpixnumlayer, minpixnumlayer, txt, buttontoshow );
                    end
                    
                    if length(find(BW4>0)) < minnumberpixelstodetectforcell || valid == 0
                        if runyes ==0
                            txt = [txt, '\n',  'Second Otsu`s Method Thresholding not successful.'];
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1})  &&  length(uebergang)>=2
                                p2_feedbackfield.Value = splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value =  splitlines(compose(txt));
                            end
                            
                        end
                        
                        [valid, BW4] = retryintensotsu2(valid, stacknum_smallersample, image_histsmallersample, logicalvaluebw4, maxpixnumlayer, minpixnumlayer, buttontoshow );
                        
                    end
                end
                close all
                
                if valid == 0
                    if runyes ==0
                        txt = [txt, '\n', 'No cell layer detected: Please try other values for setting Intensity threshold'];
                        uebergang = splitlines(compose(txt));
                        if isempty(uebergang{1})     &&  length(uebergang)>=2
                            p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                        else
                            p2_feedbackfield.Value =  splitlines(compose(txt));
                        end
                    end
                    
                    mask = 0;
                    imagetoshow= 0;
                    stackstotake = 0;
                else
                    % make cell out of detected cell pixels
                    % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    
                    %stacknum_smallersample2 = smallersamplestacknum(BW4)
                    mask_merged = tofillholesandmergemask(BW4, stacknum_smallersample, image_histsmallersample, buttontoshow, stackstotake, image, buttonifconfocal); % mask here: still big one
                    [nope, mask, biggestfound txt] = tomakeoneobject(mask_merged, maxnumpixelwholecell, image,  buttontoshow, minnumberpixelstodetectforcell, txt, runyes) ;
                    if nope == 1
                        if runyes ==0
                            txt = [txt, '\n', 'No object left with low enough pixel number. Probably need to change intensity threshold, not maximal possible value of pixel number of cell.'];
                            
                            uebergang = splitlines(compose(txt));
                            if isempty(uebergang{1}) &&  length(uebergang)>=2
                                p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                            else
                                p2_feedbackfield.Value =  splitlines(compose(txt));
                            end
                            
                        end
                        mask = 0;
                        imagetoshow = 0;
                        stackstotake = 0;
                    else
                        
                        if biggestfound ~=0
                            if runyes ==0
                                txt = [txt, '\n', ['Pixel number of mask: ', num2str(length(find(mask==1))), ' and Biggest pixel number of objects:', num2str(biggestfound), ' (if values are equal: Biggest object was taken)' ]];
                                
                                uebergang = splitlines(compose(txt));
                                if isempty(uebergang{1})  &&  length(uebergang)>=2
                                    p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                                else
                                    p2_feedbackfield.Value =  splitlines(compose(txt));
                                end
                                
                            end
                            
                            
                        else
                            if runyes == 0
                                txt = [txt, '\n', ['Pixel number due to mask: ', num2str(length(find(mask==1))), ', only one object was found']];
                                
                                uebergang = splitlines(compose(txt));
                                if isempty(uebergang{1}) &&  length(uebergang)>=2
                                    p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                                else
                                    p2_feedbackfield.Value=  splitlines(compose(txt));
                                end
                                
                            end
                            
                        end
                        
                        % show result to user if not running through all images
                        % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        if runyes == 0
                            [mask, path, image_toshowc] = toshow(allchannelnames, path, mask, stackstotake, ax, buttonforcomparison, channeltoshowval, buttonoverviewoverchannels ) ;
                        end
                        
                    end
                    
                    try imagetoshow = double(image_toshowc(:,:,:))./max(max(double(image_toshowc(:,:,:))));
                    catch
                        imagetoshow = mask;
                    end
                    
                end
                
                
            else % buttonforjuststructure == 1: toshow:
                % just show chosen layers
                if runyes == 0
                    [image2 max_val] = import(path, numberofimages, allchannelnames, channeltoshowval, buttonifcellrecognitionseveralchannels , channelsforcelldetection);
                    mask = 0;
                    
                    if buttonforcomparison == 1
                        imagetoshow = double(image2(:,:,stackstotake))./max(max(double(image2(:,:,stackstotake))));
                        imagetoshow2 = double(image2(:,:,:))./max(max(double(image2(:,:,:))));
                        
                        
                        a = montage(imagetoshow, 'Parent', ax);
                        atotake = a.CData;
                        atotake(:,size(atotake,2)+1:size(atotake,2)+10) = 1;
                        b = montage(imagetoshow2, 'Parent', ax);
                        btotake = b.CData;
                        
                        imshowpair(atotake, btotake, 'montage', 'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20);
                        
                    else
                        imagetoshow = double(image2(:,:,stackstotake))./max(max(double(image2(:,:,stackstotake))));
                        montage(imagetoshow, 'Parent', ax);
                        title(allchannelnames(channeltoshowval), 'Parent', ax, 'FontWeight', 'bold', 'FontSize', 20);
                        
                    end
                end
            end
        end
    end
    
end

end


% fct output: mask == images of single cell; if cell detection on several
% channels, mask == [images_channel1 + images_channel2 + images_channel3 + ...] following each other
function [mask max_val] =  import(path, numberofimages, allchannelnames, whichchannelforcelldetect, buttonifcellrecognitionseveralchannels , channelsforcelldetection)


b = imfinfo(path);
stacknum = numel(b);


global bitsize14
if bitsize14 ==1
    max_val = 2^14-1;
else
    
    try
        
        if ~isempty(b(1).SampleFormat)
            if isequal(b(1).SampleFormat, "Two's complement signed integer")
                max_val = 2^(b(1).BitDepth/2) - 1;
            else
                max_val = 2^(b(1).BitDepth) - 1;
            end
            
        else
            max_val = 2^(b(1).BitDepth) - 1;
        end
        
    catch
        max_val = 2^(b(1).BitDepth) - 1;
    end
    
end


if buttonifcellrecognitionseveralchannels == 0
    count = 1;
    
    M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
    for k = whichchannelforcelldetect:length(allchannelnames):stacknum
        M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    mask = M_original;
end


if buttonifcellrecognitionseveralchannels == 1 &&  max(channelsforcelldetection) <= length(allchannelnames)
    global weightingforcelldetection buttonifweightingseveralchannels
    
    if weightingforcelldetection ==1
        weights = weightingforcelldetection;
    else
        weights = ones(1, length(channelsforcelldetection));
    end
    
    
    for i = 1:length(channelsforcelldetection')
        
        %  'entering for loop'
        %  channelsforcelldetection(i)
        if i == 1
            
            
            M_original = zeros(b(1).Height, b(1).Width, stacknum/length(allchannelnames));
            
            count2 = 1;
            for k = channelsforcelldetection(1):length(allchannelnames):stacknum
                M_original(1:b(1).Height, 1:b(1).Width,count2) = imread(path,k);
                count2 = count2 + 1;
            end
            
            
            M_original = double(M_original);
            maxi_Moriginal = max(max(max(M_original)));
            M_original = M_original.* weights(1);
            count2 = 2;
            
            
        else
            count = 1;
            M_original_further = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
            for k = channelsforcelldetection(i):length(allchannelnames):stacknum
                M_original_further(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
                
                count = count + 1;
            end
            
            
            M_original_further = double(M_original_further);
            try  M_original_further = M_original_further./max(max(max(M_original_further))).*maxi_Moriginal.*weights(count2);
            catch
                M_original_further = M_original_further./max(max(max(M_original_further))).*maxi_Moriginal;
            end
            count2 = count2 + 1;
            M_original = M_original + M_original_further;
            M_original_further = [];
            
        end
        
    end
    mask = M_original;
else
    if buttonifcellrecognitionseveralchannels ~= 0
        count = 1;
        M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
        for k = whichchannelforcelldetect:length(allchannelnames):stacknum
            M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
            count = count + 1;
        end
        
        mask = M_original;
    end
end

end


% fct for applying structure thresholds in order to decide on which layers
% are automatically chosen (structure: neighborhood around cell pixel: more difference
% than neighborhood around background pixel
%  frontierthrshK1,frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3 anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, anpassungotsuthresh,threshforveryfaint, buttontoshow, tomodulate, maxnumofimagescell , maxpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval )
function [stackstotake, T3, buttonfromrange] = structthreshold(mask, frontierthrshK1, ...
    frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, ...
    thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, buttontoshow, buttonifconfocal)

image = mask;
image_rescale = rescale(image, 0,1);

% find cells by structure
nhood = ones(9,9);

K = rangefilt(image_rescale, nhood);

% if user wants to see
if buttontoshow ==1
    
    for k = 1:size(K,3)
        figure()
        imshowpair(image(:,:,k), K(:,:,k), 'montage');
    end
    close all
    
end

% make histogram of image pixel values
[counts3 x3] = imhist(K);

% apply Otsu's threshold method
T3 = otsuthresh(counts3);

if T3 > frontierthrshK1
    
    T4 = T3 + anpassungotsuthreshK1;
    
else
    
    T4 = T3 + anpassungotsuthreshK2;
end


if buttonifconfocal ==0
    
    if T3 >  frontierthrshK2
        
        T4 = anpassungotsuthreshK3;
        
    end
end
BW2 = imbinarize(K, T4);


if buttontoshow ==1
    
    for i = 1:size(K,3)
        figure()
        imshowpair(image(:,:,i), BW2(:,:,i), 'montage');
    end
    
end


BW2_pixelnum = zeros(1,size(BW2,3));

for i = 1:size(BW2,3)
    BW2_pixelnum(i) = sum(sum(BW2(:,:,i)));
end


BW2_pixelnumb = BW2_pixelnum;
BW2_pixelnumb(BW2_pixelnum == 0) = [];

if isempty(BW2_pixelnumb)
    BW2_pixelnumb = 0;
end


stackstotakeminimum = find(BW2_pixelnum > (thresholdnumpixelsforrangefilt + min(BW2_pixelnumb)) );
stackstotakemaximum = find(BW2_pixelnum <= (thresholdnumpixelsforrangefiltmaximum + min(BW2_pixelnumb)));

stackstotakeminimummaximumcombined = [stackstotakeminimum, stackstotakemaximum];
stackstotakeminimummaximumcombined = sort(stackstotakeminimummaximumcombined);
todelete = [];
for i = 1:length(stackstotakeminimummaximumcombined)
    
    if length( find(stackstotakeminimummaximumcombined == stackstotakeminimummaximumcombined(i))) == 1
        todelete = [todelete, i];
    end
    
    
end

if ~isempty(todelete)
    stackstotakeminimummaximumcombined(todelete) = [];
end

stackstotake = unique(stackstotakeminimummaximumcombined);

buttonfromrange = 0;

if  buttonifconfocal == 1
    frontierpixelmean = frontierthrshK2;
    buttonfromrange = 0;
    if mean(BW2_pixelnum) > frontierpixelmean
        stackstotake = find(BW2_pixelnum > mean(BW2_pixelnumb));
        buttonfromrange = 1;
    end
    
end

end




% fct which is applied if structthreshold's output of stackstotake is empty
% if cell individually calculated threshold T4 is above user frontier3,
% then the individually calculated threshold T4 is lowered for this cell
function [T3, stackstotake] =  structureifstackstotakeisempty(image, frontier3,...
    anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, buttontoshow)


image_rescale = imfilter(image, fspecial('average', 9));

image_rescale = rescale(image_rescale, 0,1);

nhood = ones(9,9);

K = rangefilt(image_rescale, nhood);


[counts3 x3] = imhist(K);
T3 = otsuthresh(counts3);

T4 = T3;

if T4 > frontier3
    
    BW2 = imbinarize(K, T4 - anpassungotsuthreshKsubtr);
    
else
    
    BW2 = imbinarize(K, T4);
    
end


if buttontoshow == 1
    
    for i = 1:size(image,3)
        
        figure()
        imshowpair(image(:,:,i), BW2(:,:,i), 'montage');
        
    end
    
end


BW2_pixelnum = zeros(1,size(BW2,3));

for i = 1:size(BW2,3)
    
    BW2_pixelnum(i) = sum(sum(BW2(:,:,i)));
    
end

BW2_pixelnumb = BW2_pixelnum;
BW2_pixelnumb(BW2_pixelnum == 0) = [];

% + min(BW2_pixelnumb) to reduce impact of unspecific structure / background signal

stackstotakeminimum = find(BW2_pixelnum > (thresholdnumpixelsforrangefilt + min(BW2_pixelnumb)) );
stackstotakemaximum = find(BW2_pixelnum <= (thresholdnumpixelsforrangefiltmaximum + min(BW2_pixelnumb)));

stackstotakeminimummaximumcombined = [stackstotakeminimum, stackstotakemaximum];
stackstotakeminimummaximumcombined = sort(stackstotakeminimummaximumcombined);
todelete = [];
for i = 1:length(stackstotakeminimummaximumcombined)
    
    if length( find(stackstotakeminimummaximumcombined == stackstotakeminimummaximumcombined(i))) == 1
        todelete = [todelete, i];
    end
    
    
end

if ~isempty(todelete)
    stackstotakeminimummaximumcombined(todelete) = [];
end

stackstotake = unique(stackstotakeminimummaximumcombined);


end


% fct to take longest episode of stack numbers
function [lengthforones, meanstacks, stackstotake2] =  findlongestepisode(stackstotake)
global buttonsinglelayer

if buttonsinglelayer == 0
    na = 0;
    counterepisode = 1;
    episodeend = 0;
    episodebegin = 0;
    for i = 1:length(stackstotake) - 1
        
        na(i) = stackstotake(i+1) - stackstotake(i);
        
        
        if i == 1
            
            if na(i) == 1
                episodebegin(counterepisode) = i;
                counterepisode = counterepisode + 1;
            end
            
        else
            
            if na(i) == 1 && na(i-1) ~= 1
                episodebegin(counterepisode) = i;
                counterepisode = counterepisode + 1;
            end
            
            
            if na(i) ~= 1 && na(i-1) == 1
                episodeend(counterepisode - 1) = i;
            end
            
            
            if i == length(stackstotake) - 1 && na(i-1) == 1 && na(i) == 1
                episodeend(counterepisode - 1) = i + 1;
            end
            
            if stackstotake(end) - stackstotake(length(stackstotake)-1) == 1 && na(i) == 1
                episodeend(counterepisode - 1) = length(stackstotake);
            end
            
            
        end
        
    end
    
    
    % if several episodes found: take one which is longest
    lengthforones = episodeend - episodebegin + 1;
    
    totakethistime = find(lengthforones == max(lengthforones));
    
    if length(totakethistime)>1
        totakethistime = totakethistime(1);
    end
    
    %lengthforones = lengthforones(totakethistime);
    %meanstacks =  mean(stackstotake(episodebegin(totakethistime):episodeend(totakethistime)));
    %stackstotake2 = stackstotake(episodebegin(totakethistime):episodeend(totakethistime));
    if episodebegin(totakethistime) == 0 || episodeend(totakethistime) ==0
        stackstotake = 1;
        stackstotake2 = 1;
        meanstacks = 1;
    else
        lengthforones = lengthforones(totakethistime);
        meanstacks =  mean(stackstotake(episodebegin(totakethistime):episodeend(totakethistime)));
        
        
        
        try
            stackstotake2 = stackstotake(episodebegin(totakethistime):episodeend(totakethistime));
        catch
            stackstotake = stackstotake(1);
        end
        
    end
    
else
    lengthforones = 1;
    meanstacks = 1;
    stackstotake2 = 1;
end
end


% fct to decide on final layers to take
% parameters: max number of images per cell = chosen maximal episode length
% if length of maximal episode of images is above chosen maximal episode
% length and even,
% if length of maximal episode of image is above chosen maximal episode
% length and uneven,
function stackstotake =  finalstackstotake(lengthforones, maxnumofimagescell, minnumofimagescell, meanstacks, tomodulate, stackstotake, buttonforoutoffocuslight, stackstotake2, maximumstackvaluethatpossible)

if ~isempty(stackstotake2)
    stackstotake = stackstotake2;
else
    stackstotake = stackstotake;
end

if isempty(stackstotake)
    stackstotake = 1: maximumstackvaluethatpossible;
end

if buttonforoutoffocuslight ~=1
    tomodulate = 0;
end


% chosen layer number bigger than chosen maximal length of episode and even number of chosen layers of cell
if lengthforones > maxnumofimagescell && mod(lengthforones,2) == 0
    
    if ceil(meanstacks) + (maxnumofimagescell/2 - 1) + tomodulate <= stackstotake(end)
        
        if ceil(meanstacks) - maxnumofimagescell/2 + tomodulate > 0
            
            stackstotaketriala = (ceil(meanstacks) - floor(maxnumofimagescell/2) + tomodulate) : (ceil(meanstacks) + ceil(maxnumofimagescell/2) - 1 + tomodulate);
            
        else
            
            stackstotaketriala = 1:(ceil(meanstacks) + ceil(maxnumofimagescell/2) - 1 + tomodulate);
            
        end
        
        
    else
        
        if ceil(meanstacks) - maxnumofimagescell/2 + tomodulate > 0
            
            stackstotaketriala = (ceil(meanstacks) - floor(maxnumofimagescell/2) + tomodulate) : stackstotake(end);
            
        else
            
            stackstotaketriala = 1 : stackstotake(end);
            
        end
        
    end
    
    
    
end


% chosen layer number bigger than chosen maximal length of episode and uneven number of chosen layers of cell
if lengthforones > maxnumofimagescell && mod(lengthforones,2) == 1
    
    if ceil(meanstacks)+   maxnumofimagescell/2 - 1 + tomodulate <= stackstotake(end)
        
        if ceil(meanstacks) - maxnumofimagescell/2 - 1 + tomodulate > 0
            
            stackstotaketriala = (ceil(meanstacks) - floor(maxnumofimagescell/2) - 1 + tomodulate) : (ceil(meanstacks) + ceil(maxnumofimagescell/2) - 1 + tomodulate); % da weiß, dass vorne immer zwei zu viel und hinten zu wenig
            
        else
            
            stackstotaketriala = 1:(ceil(meanstacks) + ceil(maxnumofimagescell/2) - 1 + tomodulate);
            
        end
        
        
    else
        
        if ceil(meanstacks)- maxnumofimagescell/2 - 1 + tomodulate > 0
            
            stackstotaketriala = (ceil(meanstacks) - floor(maxnumofimagescell/2) - 1 + tomodulate) : stackstotake(end);
        else
            
            stackstotaketriala = 1 : stackstotake(end);
            
        end
        
    end
    
end




% chosen layer number smaller than chosen minimal length of episode
if lengthforones < minnumofimagescell
    
    difference = minnumofimagescell - lengthforones;
    % difference is even
    if mod(difference,2) == 0
        
        
        
        if stackstotake(1)-difference/2<=0 || stackstotake(end) + difference/2 > maximumstackvaluethatpossible
            
            stackstotaketriala = stackstotake;
            
        end
        
        
        if stackstotake(1)-difference/2>0 && stackstotake(end) + difference/2 <= maximumstackvaluethatpossible
            
            if stackstotake(1)-difference/2 + tomodulate >0 && stackstotake(end) + difference/2 + tomodulate <= maximumstackvaluethatpossible
                stackstotaketriala = stackstotake(1)-difference/2+tomodulate:1:stackstotake(end) + difference/2 + tomodulate;
                
                
            else
                
                stackstotaketriala = stackstotake(1)-difference/2:1:stackstotake(end) + difference/2;
                
            end
            
            
        end
        
    end
    
    
    
    % difference is uneven
    if mod(difference,2) ~=0
        
        if stackstotake(1)-floor(difference/2)<=0 || stackstotake(end) + ceil(difference/2) > maximumstackvaluethatpossible
            
            stackstotaketriala = stackstotake;
            
        end
        
        
        if stackstotake(1)-floor(difference/2)>0 && stackstotake(end) + ceil(difference/2) <= maximumstackvaluethatpossible
            
            if stackstotake(1)-floor(difference/2)+tomodulate >0 && stackstotake(end) + ceil(difference/2) + tomodulate <=maximumstackvaluethatpossible
                
                stackstotaketriala = stackstotake(1)-floor(difference/2)+tomodulate:1:stackstotake(end) + ceil(difference/2)+tomodulate;
                
            else
                
                stackstotaketriala = stackstotake(1)-floor(difference/2):1:stackstotake(end) + ceil(difference/2);
            end
            
        end
        
        
        
        
    end
    
end


% chosen layer number in allowed length of episode
if lengthforones <= maxnumofimagescell && lengthforones>=minnumofimagescell
    
    stackstotaketriala = stackstotake2 + tomodulate;
    
end

stackstotake = stackstotaketriala;

% final: stackstotake from structure filtering


end


%%%%%%%%%%
% fct that gives out image of chosen layers and layer number of chosen layers
function[image_histsmallersample, stacknum_smallersample] = makesmallersample(imageb, stackstotake)

if stackstotake(end) >= size(imageb,3) && stackstotake(1) >= 1
    image_histsmallersample = imageb(:,:,stackstotake(1):end);
    stacknum_smallersample = size(image_histsmallersample,3);
    
end

if stackstotake(end) <= size(imageb,3) && stackstotake(1) >=1
    image_histsmallersample = imageb(:,:,stackstotake);
    stacknum_smallersample = size(image_histsmallersample,3);
end

if stackstotake(1) <= 0 && stackstotake(end) <= size(imageb,3)
    image_histsmallersample = imageb(:,:,1:stackstotake(end));
    stacknum_smallersample = size(image_histsmallersample,3);
    
end


if stackstotake(1) <=0 && stackstotake(end) >= size(imageb,3)
    
    image_histsmallersample = imageb(:,:,1:end);
    stacknum_smallersample = size(image_histsmallersample,3);
end






end


% fct that provides thresholding after Otsu's method on intensity
% dependent on global and layer specific automatically calculated threshold
% if not confocal button: layer specific, dependent on global as condition
% if confocal button: global, with Gaussian filter
% layermaxval: maximal amount of pixels in a layer
function [valid, BW4, layermaxval, layersdeleted] = intensotsu(image_histsmallersample,stacknum_smallersample, frontieraddition1, buttonforoutoffocuslight, anpassungotsuthresh1,anpassungintensotsufrontier1,anpassungotsuthresh2, maxpixnumlayer, minpixnumlayer, buttonfromrange, buttontoshow, buttonifconfocal )

layermaxval = 0;
layersdeleted = 0;
if buttonifconfocal == 0
    
    
    % now: take these images and apply intensity filtering
    
    counts2 = {};
    x2 = {};
    valid = 0;
    BW4 = zeros(size(image_histsmallersample));
    
    if buttontoshow == 1
        figure('Name','before maxpixnumlayer')
    end
    
    for i = 1:stacknum_smallersample
        
        [counts2{i} x2{i}] = imhist(double(rescale(image_histsmallersample(:,:,i), 0, 1))); % for threshold for each layer
        
        [counts2b x2b] = imhist(double(rescale(image_histsmallersample(:,:,:), 0, 1)));     % for global threshold
        
        T2 = otsuthresh(counts2{i});
        
        
        
        if otsuthresh(counts2{i}) > [otsuthresh(counts2b) + frontieraddition1] && i < 3 && buttonforoutoffocuslight == 1
            
            T2 = otsuthresh(counts2{i}) + anpassungotsuthresh1;
            
        else
            
            
            if otsuthresh(counts2{i}) > anpassungintensotsufrontier1
                
                T2 = otsuthresh(counts2{i}) + anpassungotsuthresh2;
                
            else
                
                T2 = otsuthresh(counts2{i});
                
            end
        end
        BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2);
        
        if buttontoshow == 1
            imshow(BW4(:,:,i))
        end
        
        if length(find(BW4(:,:,i)>0)) > maxpixnumlayer            % if number of found pixels is bigger than maxpixnumlayer: make it 0
            
            layer_pix = length(find(BW4(:,:,i)>0));
            BW4(:,:,i) = zeros(size(BW4,1), size(BW4,2));
            layersdeleted = layersdeleted + 1;
            
            if layer_pix > layermaxval
                layermaxval = layer_pix;
            end
            
        else
            
            if length(find(BW4(:,:,i)>0)) < minpixnumlayer
                
                
                BW4(:,:,i) = zeros(size(BW4,1), size(BW4,2));
                % just delete as lowest number will be 0 for most z-stacks
                
                
                
            else
                
                
                valid = valid + 1;
                % count how many images acceptable
            end
        end
        
    end
    
    
    if buttontoshow == 1
        for i = 1:size(BW4,3)
            imshowpair(image_histsmallersample(:,:,i),BW4(:,:,i), 'montage');
            title(['First Otsu`s Method Thresholding after maxpixnumlayer, layers not taken because of max. pixels per layer:', size(BW4,3)-valid])
        end
    end
    
    if buttontoshow == 1
        figure()
        montage(BW4)
    end
    
end



if buttonifconfocal == 1
    counts2 = {};
    x2 = {};
    valid = 0;
    BW4 = zeros(size(image_histsmallersample));
    
    
    
    [counts2 x2] = imhist(double(rescale(image_histsmallersample, 0, 1)));
    
    T2 = otsuthresh(counts2);
    button = 0;
    
    if buttonfromrange == 1
        
        T2 = otsuthresh(counts2) + anpassungotsuthresh2;
        
        
    else
        
        T2 = otsuthresh(counts2);
        
    end
    threshold_imbinarize = maxpixnumlayer; %button confocal == 1 --> maxpixnumlayer is threshold
    BW2 = imbinarize(double(rescale(image_histsmallersample)), T2);
    BW2 = imgaussfilt(double(BW2), 'FilterSize', 11);
    BW2 = imbinarize(double(BW2), threshold_imbinarize);
    close all
    BW4 = BW2;
    valid = size(BW4,3);
    
    for i = 1:size(BW4,3)
        
        layer_pix = length(find(BW4(:,:,i)>0));
        
        if layer_pix > layermaxval
            
            layermaxval = layer_pix;
            
        end
        
    end
    
    
end

end
%%%%%%%%%%%%%%%








% fct to apply threshold again to decide on cell pixels and background pixels
% if fct intensotsu does not get valid results
% fixed addition to layer specific threshold
% condition for fct:  isempty(find(BW4>0)) (possible due to confocal option in intensotsu) || valid < 4
function [valid, BW4, txt] =  retryintensotsu(valid, logicalvaluebw4, stacknum_smallersample, image_histsmallersample,threshforveryfaint, maxpixnumlayer, minpixnumlayer, txt, buttontoshow )
global buttonsinglelayer
% if too less accepted images: other threshold application
if buttonsinglelayer ==0
    for i = 1:stacknum_smallersample
        
        
        [counts2{i} x2{i}] = imhist(double(rescale(image_histsmallersample(:,:,i), 0, 1)));
        
        [counts2b x2b] = imhist(double(rescale(image_histsmallersample(:,:,:), 0, 1)));
        
        T2 = otsuthresh(counts2{i});
        
        BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.2);
        
        
        
        
        
        
        if valid < 4
            
            BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.1);
            
        end
        
        
        if valid ==0 && logicalvaluebw4 ==1
            
            BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + threshforveryfaint); % for very faint cells
            
        end
        
        
        if valid >= 4
            
            txt = [txt, '\n', ['Retry Otsu`s Method: pixnumlayer',num2str(i),' is:',num2str(length(find(BW4(:,:,i)>0)))]];
            uebergang = splitlines(compose(txt));
            if isempty(uebergang{1}) &&  length(uebergang)>=2
                p2_feedbackfield.Value =    splitlines(compose(txt(3:end)));
            else
                p2_feedbackfield.Value =  splitlines(compose(txt));
            end
            
            
            
            if length(find(BW4(:,:,i)>0)) > maxpixnumlayer
                
                BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
                
            end
            
            if length(find(BW4(:,:,i)>0)) < minpixnumlayer
                BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
            end
            
            
        end
        
    end
    
    if buttontoshow ==1
        for i = 1:size(BW4,3)
            
            imshowpair(image_histsmallersample(:,:,i),BW4(:,:,i), 'montage');
            
        end
    end
end

if buttonsinglelayer == 1
    [counts2{i} x2{i}] = imhist(double(rescale(image_histsmallersample(:,:,i), 0, 1)));
    
    [counts2b x2b] = imhist(double(rescale(image_histsmallersample(:,:,:), 0, 1)));
    
    T2 = otsuthresh(counts2{i});
    
    BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.2);
    
    if valid ==0 && logicalvaluebw4 ==1
        
        BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + threshforveryfaint); % for very faint cells
        
    end
    
    
    if valid ==1
        i = 1;
        
        txt = [txt, '\n', ['Retry Otsu`s Method: pixnumlayer',num2str(i),' is:',num2str(length(find(BW4(:,:,i)>0)))]];
        
        uebergang = splitlines(compose(txt));
        if isempty(uebergang{1}) &&  length(uebergang)>=2
            p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
        else
            p2_feedbackfield.Value =  splitlines(compose(txt));
        end
        
        
        if length(find(BW4(:,:,i)>0)) > maxpixnumlayer
            
            BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
            
        end
        
        if length(find(BW4(:,:,i)>0)) < minpixnumlayer
            BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
        end
        
        
        if buttontoshow ==1
            for i = 1:size(BW4,3)
                
                imshowpair(image_histsmallersample(:,:,i),BW4(:,:,i), 'montage');
                
            end
        end
        
    end
    
    
    
end

end


%%%%%%%

% if length(find(BW4>0)) < minnumberpixelstodetectforcell
% minimum number of pixels that detected for cell as a whole
% fct with condition: length(find(BW4>0)) < minnumberpixelstodetectforcell || valid == 0
% logicalvaluebw4  == 1: no pixel found which is 1 in BW4
function [valid, BW4] = retryintensotsu2(valid, stacknum_smallersample, image_histsmallersample, logicalvaluebw4, maxpixnumlayer, minpixnumlayer, buttontoshow)
global buttonsinglelayer

if buttonsinglelayer == 0
    for i = 1:stacknum_smallersample
        
        [counts2b x2b] = imhist(double(rescale(image_histsmallersample(:,:,:), 0, 1)));
        
        T2 = otsuthresh(counts2b);
        
        BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.2);
        
        
        if valid < 4
            
            BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.1);
            
        end
        
        if valid == 0 && logicalvaluebw4 == 1
            
            BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.04 );
            
        end
        
        if valid >= 4
            
            if length(find(BW4(:,:,i)>0)) > maxpixnumlayer
                BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
            end
            
            if length(find(BW4(:,:,i)>0)) < minpixnumlayer
                BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
            end
            
        end
        
    end
    
end


if buttonsinglelayer == 1
    [counts2b x2b] = imhist(double(rescale(image_histsmallersample(:,:,:), 0, 1)));
    
    T2 = otsuthresh(counts2b);
    
    BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.2);
    
    if valid == 0 && logicalvaluebw4 == 1
        
        BW4(:,:,i) = imbinarize(double(rescale(image_histsmallersample(:,:,i))), T2 + 0.04 );
        
    end
    
    if valid ==1
        
        if length(find(BW4(:,:,i)>0)) > maxpixnumlayer
            BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
        end
        
        
        if length(find(BW4(:,:,i)>0)) < minpixnumlayer
            BW4(:,:,i) = zeros(size(BW4, 1), size(BW4,2));
        end
        
    end
    
    
    
end

if buttontoshow ==1
    for i = 1:size(BW4,3)
        
        imshowpair(image_histsmallersample(:,:,i),BW4(:,:,i), 'montage');
        
    end
end



end
% in BW4: saved mask of cell




% fct to fill holes in cell pixel volume with different treatment of
% confocal and widefield microscopy
% widefield: holes are filled by imfill command in general (3D)
% holes are filled per layer by imfill command
% only images of stackstotake are saved in mask_merged, rest is 0
%
% confocal: as higher resolution and smaller pixel/voxel size value:
% to efficiently close holes: above and below stackstotake are layers of ones to
% close the volume, first diagonally filled in by imfill command,
% then each layer is singlely processed with imfill command,
% closing and opening with object strel('disk', 2) to get rid of still
% existing holes; again 3x per layer imfill command
% only images of stackstotake are saved in mask_merged, rest is 0
function mask_merged = tofillholesandmergemask(BW4, stacknum_smallersample, image_histsmallersample, buttontoshow, stackstotake, image, buttonifconfocal)

if   buttonifconfocal == 0
    
    mask_smallersample = imfill(BW4, 'holes');
    
    for i = 1:stacknum_smallersample
        mask_smallersample(:,:,i) = imfill(mask_smallersample(:,:,i), 'holes');
    end
    
    if buttontoshow == 1
        for i = 1:stacknum_smallersample
            figure()
            imshowpair(image_histsmallersample(:,:,i),(2^16-1)*mask_smallersample(:,:,i), 'montage');
        end
    end
    
    mask_smallersample(mask_smallersample~=0) = 1;
    
    mask_merged = zeros(size(image));
    
    for t = 1:size(image,3)
        
        if ~isempty(find(t == stackstotake))
            mask_merged(:,:,t) = mask_smallersample(:,:,find(t==stackstotake));
        else
            mask_merged(:,:,t) = zeros(size(image,1), size(image,2));
        end
    end
end


if buttonifconfocal == 1
    
    mask_smallersample = imfill(BW4,26, 'holes');
    
    mask_smallersampletest = zeros(size(mask_smallersample,1), size(mask_smallersample,2), size(mask_smallersample,3) + 2);
    mask_smallersampletest(:,:,1) = ones(size(mask_smallersample,1), size(mask_smallersample,2));
    mask_smallersampletest(:,:,2:size(mask_smallersample,3) + 1) = BW4;
    mask_smallersampletest(:,:,size(mask_smallersample,3) + 2) = ones(size(mask_smallersample,1), size(mask_smallersample,2)); % 19.01.2022: mask_smallerssampletest korrigiert
    
    mask_smallersampletest2 = imfill(mask_smallersampletest, 26, 'holes');
    
    
    mask_smallersample = mask_smallersampletest2(:,:,2:size(mask_smallersample,3) + 1);
    
    for i = 1:size(BW4,3)
        mask_smallersample(:,:,i) = imfill(mask_smallersample(:,:,i), 8, 'holes');
    end
    
    
    se = strel('disk',2);
    closeBW = imclose(mask_smallersample,se);
    
    mask_smallersample = closeBW;
    
    mask_smallersample = imopen(mask_smallersample,se);
    
    
    for i = 1:size(BW4,3)
        mask_smallersample(:,:,i) = imfill(mask_smallersample(:,:,i),  'holes');
        mask_smallersample(:,:,i) = imfill(mask_smallersample(:,:,i),  'holes');
        mask_smallersample(:,:,i) = imfill(mask_smallersample(:,:,i),  'holes');
    end
    
    
    
    if buttontoshow == 1
        for i = 1:size(BW4,3)
            figure()
            imshowpair(image_histsmallersample(:,:,i),(2^16-1)*mask_smallersample(:,:,i), 'montage')
        end
    end
    
    mask_smallersample(mask_smallersample~=0) = 1;
    
    mask_merged = zeros(size(image));
    
    for t = 1:size(image,3)
        
        if ~isempty(find(t == stackstotake))
            mask_merged(:,:,t) = mask_smallersample(:,:,find(t==stackstotake));
        else
            mask_merged(:,:,t) = zeros(size(image,1), size(image,2));
        end
    end
    
end



end


% merge in 3D to one object with 1: cell and 0: not cell, called: mask
% fct to decide on one cell (object) in one cell image stack
function [nope, mask, biggest_found, txt] = tomakeoneobject(mask_merged, maxnumpixelwholecell, ...
    image,  buttontoshow, minnumberpixelstodetectforcell, txt, runyes)

nope = 0;
tosetzero = 0;
CC = bwconncomp(mask_merged, 26);
biggest_found = 0;
if CC.NumObjects > 1
    % find objects, then take the one with maximal size
    
    numPixels = cellfun(@numel, CC.PixelIdxList);
    [biggest, idx] = max(numPixels);
    biggest_found = biggest;
    if biggest > maxnumpixelwholecell
        sortednumPixels = sort(numPixels, 'descend');
        biggest = find(sortednumPixels < maxnumpixelwholecell  );
        
        if ~isempty(biggest)
            idx = biggest(1);
            
            if biggest <= minnumberpixelstodetectforcell
                if runyes == 0
                    txt = [txt, '\n','In calculating polarity variables cell not taken into account, as number of pixels (',num2str(biggest_found), ') below minimal or above maximum number of pixels of cell'];
                    
                    uebergang = splitlines(compose(txt));
                    if isempty(uebergang{1}) &&  length(uebergang)>=2
                        p2_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                    else
                        p2_feedbackfield.Value =  splitlines(compose(txt));
                    end
                end
                
                
                if runyes ==1
                    % too small
                    tosetzero = 1;
                end
                
                
            end
            
        else
            tosetzero = 1;
        end
        
        
    end
    
    
    
    [row, col, height]  = ind2sub(size(mask_merged), CC.PixelIdxList{idx});
    
    mask2 = zeros(size(mask_merged));
    
    for i = 1:length(row)
        
        mask2(row(i), col(i), height(i)) = 1;
        
    end
    
    if buttontoshow ==1
        for i = 1:size(mask_merged,3)
            
            figure()
            imshowpair(image(:,:,i),mask2(:,:,i).*double(image(:,:,i)), 'montage');
            
        end
    end
    
    if tosetzero ==1
        mask = 0;
    else
        
        mask = mask2;
    end
    
    
end


if CC.NumObjects == 1
    
    if length(find(mask_merged>0)) < maxnumpixelwholecell && length(find(mask_merged >0)) > minnumberpixelstodetectforcell
        
        
        mask = mask_merged;
        
    else
        mask = 0;
        
        if runyes == 0
            txt = [txt, '\n','One object found, but below or above allowed pixel numbers per cell, with pixel number: ',num2str(length(find(mask_merged>0)))];
            
            uebergang = splitlines(compose(txt));
            if isempty(uebergang{1}) &&  length(uebergang)>=2
                p2_feedbackfield.Value =    splitlines(compose(txt(3:end)));
            else
                p2_feedbackfield.Value =  splitlines(compose(txt));
            end
        end
        
    end
    
    
    
    if buttontoshow ==1
        for i = 1:size(image,3)
            figure()
            imshowpair(image(:,:,i),(2^16-1)*mask(:,:,i).*double(image(:,:,i)), 'montage');
        end
    end
    
end

if CC.NumObjects < 1
    %
    mask = mask_merged;
    
    nope = 1;
    
end



end


% condition for this fct:  if runyes == 0
% fct to show a) overview over all channels, b) without comparison
% c) with direct comparison original image and mask or direct comparison of
% layers that taken versus all layers (if buttonjuststructure)
% image_toshowc: image(:,:,stackstotake)
function [mask, path, image_toshowc] = toshow(allchannelnames, path, mask, stackstotake, ax, buttonforcomparison, channeltoshowval, buttonoverviewoverchannels )
close all

num_channels = length(allchannelnames);

b = imfinfo(path);
stacknum = numel(b);

if buttonoverviewoverchannels ==1
    
    figure('Name', 'masks', 'Position', [20 20 2000 500])
    hold on
    for j = 1:num_channels
        
        count = 1;
        image_toshow = zeros(b(1).Height, b(1).Width, stacknum);
        for k = j:length(allchannelnames):stacknum
            image_toshow(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
            count = count + 1;
        end
        
        d = floor(num_channels /5) + 1;
        totake = 1:d;
        
        subplot(totake(floor(j/5)+1),4,j)
        
        montage(double(image_toshow(:,:,stackstotake)).*double(mask(:,:,stackstotake))./double(max(max(image_toshow(:,:,stackstotake)))));
        title([allchannelnames(j),': Mask with image'])
        hold on
    end
    sgtitle('Overview over channels')
    
end

count = 1;
image_toshowb = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
for k = channeltoshowval:length(allchannelnames):stacknum
    image_toshowb(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
    count = count + 1;
end



if buttonforcomparison == 0
    a = montage(double(image_toshowb(:,:,stackstotake)).*double(mask(:,:,stackstotake))./double(max(max(image_toshowb(:,:,stackstotake)))), 'Parent', ax);
    totakea = a.CData;
    
    b = montage(double(image_toshowb(:,:,stackstotake))./double(max(max(image_toshowb(:,:,stackstotake)))), 'Parent', ax);
    totakeb = b.CData;
    title([allchannelnames(channeltoshowval),': Image information together with mask'], 'Parent', ax);
    imshowpair(totakeb, totakea,  'Parent', ax);
end


if buttonforcomparison ==1
    
    if sum(size(mask)) ~= 2
        a = montage(double(image_toshowb(:,:,stackstotake))./double(max(max(image_toshowb(:,:,stackstotake)))), 'Parent', ax);
        totakea = a.CData;
        totakea(:,size(totakea,2)+1:size(totakea,2)+10) = 1;
        b = montage(double(mask(:,:,stackstotake))./double(max(max(mask(:,:,stackstotake)))), 'Parent', ax);
        totakeb = b.CData;
        
        % above each other as intens threshold
        imshowpair(totakeb, totakea, 'montage',  'Parent', ax);
        title([allchannelnames(channeltoshowval),': Image and Mask.'], 'Parent', ax)
        
    else
        
        m = zeros(500, 500);
        
        imshow(m, 'Parent', ax);
        
    end
    
end



image_toshowc = image_toshowb(:,:,stackstotake);

end


% fct to check if several channels shall be used for cell detection
function checkifseveralchannelscelldetection(checkifseveralchannelsforcelldetection, ~)
global buttonifcellrecognitionseveralchannels
buttonifcellrecognitionseveralchannels = checkifseveralchannelsforcelldetection.Value;
end


% fct to choose channel numbers, that shall be used for cell detection
function channelcelldetection_fcn(channelsforcelldetection_field, ~)
global channelsforcelldetection
channelsforcelldetection = str2double(strsplit(channelsforcelldetection_field.Value, ','))';
end


% fct to check in condition of several channels playing role in cell detection
% if channel influence shall be weighted
function weightingofchannels_fcn(weighting_textfield, ~)
global buttonifweightingseveralchannels
buttonifweightingseveralchannels = weighting_textfield.Value;
end


% fct to get input for weights of channels
function weightingcelldetection_fcn(weightingforcelldetection_field, ~)
global weightingforcelldetection
weightingforcelldetection = str2double(strsplit(weightingforcelldetection_field.Value, ','))';
end


% fct to check if confocal setting is used or not
% as different cell detection: some parameters are changed either to
% improve as e.g. other pixel number per layer is expected, or as other cell detection
% algorithm is used (e.g. with Gaussian filtering for confocal)
function  checkifconfocalfcn(checkifconfocal,  efstructthreshfrontier1 , threshfrontier1_values, efstructthreshfrontier2,threshfrontier2_values, ...
    efstructurethresh3, anpassungotsuthreshK1_values, efstructurethresh4, anpassungotsuthreshK2_values,efstructurethresh5, anpassungotsuthreshK3_values,...
    efstructurethresh7, efstructurethresh7b, thresholdnumpixelsforrangefilt_values, thresholdnumpixelsforrangefilt_valuesmaximum, describintensthreshold1, text_anpassungintensotsuthresh2, efintensthresholdadditionstruct,anpassungotsuthresh2_values , ...
    outoffocusoption, outoffocusoption_values, describp2_1t5, maxpixnumlayer_text, efmaxpixnumlayer,  maxpixnumlayer_values, describstructurethresh2, texts_threshfront2pixlayer, checkifapplythresholding, describp2_1t5b, efminpixnumlayer)
global buttonifconfocal frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 ...
    anpassungotsuthreshK2 anpassungotsuthreshK3 thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
    anpassungotsuthresh2 maxpixnumlayer minpixnumlayer buttonforapplythreshold

val = checkifconfocal.Value;

if val ==1
    buttonifconfocal = 1;
    describp2_1t5b.Visible = 'off';
    
    efminpixnumlayer.Visible = 'off';
    
    describstructurethresh2.FontSize = 12;
else
    buttonifconfocal = 0;
    describp2_1t5b.Visible = 'on';
    
    efminpixnumlayer.Visible = 'on';
    
    describstructurethresh2.FontSize = 14;
    minpixnumlayer = efminpixnumlayer.Value;
    
end

buttonforapplythreshold = 0;



checkifapplythresholding.Value = buttonforapplythreshold;

efstructthreshfrontier1.Value = threshfrontier1_values(buttonifconfocal + 1);

frontierthrshK1 = efstructthreshfrontier1.Value;

efstructthreshfrontier2.Value = threshfrontier2_values(buttonifconfocal + 1);

frontierthrshK2 = efstructthreshfrontier2.Value;

efstructurethresh3.Value = anpassungotsuthreshK1_values(buttonifconfocal + 1);

anpassungotsuthreshK1 = efstructurethresh3.Value;

efstructurethresh4.Value = anpassungotsuthreshK2_values(buttonifconfocal + 1);

anpassungotsuthreshK2 = efstructurethresh4.Value;

efstructurethresh5.Value = anpassungotsuthreshK3_values(buttonifconfocal +1);

anpassungotsuthreshK3 = efstructurethresh5.Value;

efstructurethresh7.Value = thresholdnumpixelsforrangefilt_values(buttonifconfocal + 1);
efstructurethresh7b.Value = thresholdnumpixelsforrangefilt_valuesmaximum(buttonifconfocal + 1);

thresholdnumpixelsforrangefilt = efstructurethresh7.Value;
thresholdnumpixelsforrangefiltmaximum = efstructurethresh7b.Value;

describintensthreshold1.Value =  text_anpassungintensotsuthresh2(buttonifconfocal + 1);

efintensthresholdadditionstruct.Value = anpassungotsuthresh2_values(buttonifconfocal + 1);

anpassungotsuthresh2 = efintensthresholdadditionstruct.Value;

outoffocusoption.Value = outoffocusoption_values(buttonifconfocal + 1);

describp2_1t5.Value = maxpixnumlayer_text(buttonifconfocal + 1);

efmaxpixnumlayer.Value = maxpixnumlayer_values(buttonifconfocal + 1);

maxpixnumlayer = efmaxpixnumlayer.Value;

describstructurethresh2.Value =  texts_threshfront2pixlayer(buttonifconfocal + 1);

end


% % fct to check if confocal setting is used or not for rerun
% as different cell detection: some parameters are changed either to
% improve as e.g. bigger pixel number expected, or as other cell detection
% algorithm is used (e.g. with Gaussian filtering for confocal)
function  checkifconfocalfcnrerun(checkifconfocal, event, efstructthreshfrontier1 , threshfrontier1_values, efstructthreshfrontier2,threshfrontier2_values, ...
    efstructurethresh3, anpassungotsuthreshK1_values, efstructurethresh4, anpassungotsuthreshK2_values,efstructurethresh5, anpassungotsuthreshK3_values,...
    efstructurethresh7,efstructurethresh7b, thresholdnumpixelsforrangefilt_values, thresholdnumpixelsforrangefilt_valuesmaximum, describintensthreshold1, text_anpassungintensotsuthresh2, efintensthresholdadditionstruct,anpassungotsuthresh2_values , ...
    outoffocusoption, outoffocusoption_values, describp2_1t5, maxpixnumlayer_text,efmaxpixnumlayer, efminpixnumlayer, describp2_1t6minrerun,  maxpixnumlayer_values, describstructurethresh2, texts_threshfront2pixlayer )
global buttonifconfocal2 frontierthrshK1rerun frontierthrshK2rerun ...
    anpassungotsuthreshK1rerun anpassungotsuthreshK2rerun ...
    anpassungotsuthreshK3rerun thresholdnumpixelsforrangefiltrerun thresholdnumpixelsforrangefiltrerunmaximum...
    anpassungotsuthresh2rerun maxpixnumlayerrerun minpixnumlayerrerun

val = checkifconfocal.Value;

if val
    buttonifconfocal2 = 1;
    efminpixnumlayer.Visible = 'off';
    describstructurethresh2.FontSize = 12;
    describp2_1t6minrerun.Visible = 'off';
    
else
    buttonifconfocal2 = 0;
    efminpixnumlayer.Visible = 'on';
    describstructurethresh2.FontSize = 14;
    describp2_1t6minrerun.Visible = 'on';
    minpixnumlayerrerun = efminpixnumlayer.Value;
end

efstructthreshfrontier1.Value = threshfrontier1_values(buttonifconfocal2 + 1);

frontierthrshK1rerun = efstructthreshfrontier1.Value;

efstructthreshfrontier2.Value = threshfrontier2_values(buttonifconfocal2 + 1);

frontierthrshK2rerun = efstructthreshfrontier2.Value;

efstructurethresh3.Value = anpassungotsuthreshK1_values(buttonifconfocal2 + 1);

anpassungotsuthreshK1rerun = efstructurethresh3.Value;

efstructurethresh4.Value = anpassungotsuthreshK2_values(buttonifconfocal2 + 1);

anpassungotsuthreshK2rerun = efstructurethresh4.Value;

efstructurethresh5.Value = anpassungotsuthreshK3_values(buttonifconfocal2 +1);

anpassungotsuthreshK3rerun = efstructurethresh5.Value;

efstructurethresh7.Value = thresholdnumpixelsforrangefilt_values(buttonifconfocal2 + 1);
efstructurethresh7b.Value = thresholdnumpixelsforrangefilt_valuesmaximum(buttonifconfocal2 + 1);
thresholdnumpixelsforrangefiltrerun = efstructurethresh7.Value;
thresholdnumpixelsforrangefiltrerunmaximum = efstructurethresh7b.Value;

describintensthreshold1.Value =  text_anpassungintensotsuthresh2(buttonifconfocal2 + 1);

efintensthresholdadditionstruct.Value = anpassungotsuthresh2_values(buttonifconfocal2 + 1);

anpassungotsuthresh2rerun = efintensthresholdadditionstruct.Value;

outoffocusoption.Value = outoffocusoption_values(buttonifconfocal2 + 1);

describp2_1t5.Value = maxpixnumlayer_text(buttonifconfocal2 + 1);

efmaxpixnumlayer.Value = maxpixnumlayer_values(buttonifconfocal2 + 1);

maxpixnumlayerrerun = efmaxpixnumlayer.Value;

describstructurethresh2.Value =  texts_threshfront2pixlayer(buttonifconfocal2 + 1);

end


% fct to choose between maximal diameter normalization and averaged
% diameter normalization
% dropwdowndiameter ==1, buttondiameter ==1 is maximal
% dropwdowndiameter ==0, buttondiameter ==0 is averaged
function dropdowndiameter_fcn(dropdowndiameter)
global buttondiameter
val = dropdowndiameter.Value;

if val
    buttondiameter = 1;
    dropdowndiameter.Value = 1;
else
    buttondiameter = 0;
    dropdowndiameter.Value = 0;
    
end

end


% fct to choose between charge normalization
% buttongeneralqnormalization, dropdownifgeneralqnormalization
% 'Charge normalized dependent on volume of cell'(1)
% (number of pixels / 2) * max. poss. charge
% 'Charge normalized dependent on protein distribution of cell'(0)
% (number of positive pixels) * max. poss. charge
function dropdownifgeneralqnormalization_fcn(dropdownifgeneralqnormalization, event)
global buttongeneralqnormalization
buttongeneralqnormalization= dropdownifgeneralqnormalization.Value;

% 'Items', {'Charge normalized dependent on volume of cell (bit)', ...
%     'Charge normalized dependent on protein distribution of cell (bit)', ...
%     'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges', ...
%     'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges', ...
%     'Own max for each cell (else: dependent on bit)', ...
%     'Own max for each cell (spread, else: dependent on bit)'}, 'ItemsData', [1 0 2 3 4 5], ...


end


% fct to save general settings for reuse on similar data sets and as a
% memory for how a data set was analyzed
function SaveSettingsButtonFcn(btn, event, text_anpassungintensotsuthresh2, maxpixnumlayer_text, texts_threshfront2pixlayer, p2_feedbackfield)
% description for:
% text_anpassungintensotsuthresh2 : anpassungotsuthresh2
% maxpixnumlayer_text :       maxpixnumlayer
% texts_threshfront2pixlayer: frontierthrshK2


global pathwayimport phrasetofind pathwayexportimages pathwayexportdata ...
    pixel_x pixel_y voxel_z numberofchannels toignore allchannelnames ...
    whichchannelforcelldetect numberofimages buttonifconfocal ...
    buttonifadvanced buttonforoutoffocuslight...
    buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
    bitsize14
% global names: wouldn't make sense to save it; don't fill out pathwayimport, dataexport, imagesexport when
% loading settings


% Variables and Application Settings
global frontierthrshK1 frontierthrshK2  anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3...
    frontier3 anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum anpassungintensotsufrontier1 ...
    anpassungotsuthresh2 threshforveryfaint anpassungotsuthresh1 frontieraddition1  tomodulate ...
    minnumberpixelstodetectforcell maxnumpixelwholecell maxnumofimagescell minnumofimagescell ...
    maxpixnumlayer ...
    buttondiameter channelnames buttonforapplythreshold buttonforjuststructure ...
    buttontoshow buttonforcomparison buttongeneralqnormalization ...
    buttonifweightingseveralchannels weightingforcelldetection ...
    buttoneachcellnormalizedtoaveragevalue1 ...
    buttoneachcellchargenormalizedcorrespondingtototalvalue1 minpixnumlayer buttonsinglelayer


channelsforcelldetectionb = strjoin(string(channelsforcelldetection), ',');
weightingforcelldetectionb = strjoin(string(weightingforcelldetection), ',');

t_var = minpixnumlayer;
if buttonifconfocal == 0 && ~isempty(t_var)
else
    t_var = 0;
end

textbuttondiameter = {'Normalized by maximal diameter', 'Normalized by averaged diameter'};
if buttondiameter == 1
    txtbuttondia = textbuttondiameter{1};
else
    txtbuttondia = textbuttondiameter{2};
end

texts_threshfront2pixlayer2 = {'Threshold frontier 2', 'Select layers differently if mean of pixel number is bigger than this value'};


variablename = {'Import Pathway', 'Phrase to find in files', 'Export Images Pathway', ...
    'Export Data Pathway', 'Pixel resolution x (nm)', 'Pixel resolution y (nm)', 'Voxel resolution z(nm)',...
    'Number of channels', 'Channel(s) to ignore', 'Channel names', 'Channel taken for cell detection', 'Number of images',...
    'Confocal option', 'Advanced option', 'Out of focus light option', ...
    'Threshold Frontier 1 (Structure)', char(strcat(texts_threshfront2pixlayer2(buttonifconfocal +1),' (Structure)')), 'Threshold addition 1: If global threshold > Threshold frontier 1 (Structure)',...
    'Threshold addition 2: If global threshold < Threshold frontier 1 (Structure)', ...
    'Threshold 3: If global threshold > Threshold frontier 2 (Structure)', 'Threshold frontier after no cell detection',...
    'Threshold subtraction from global threshold after no cell detection (Structure)', ...
    'Minimum number of pixels per layer for Range filter (Structure)', 'Maximum number of pixels per layer for Range filter (Structure)', 'Threshold frontier I1 (Intensity)', ...
    char(strcat(text_anpassungintensotsuthresh2(buttonifconfocal + 1), 'Intensity')), ...
    'Threshold addition to layer after absolutely no cell detection (Intensity)',...
    'Threshold addition for out of focus light first 2 layers (Intensity)', ...
    'Threshold addition to global threshold for out of focus light (Intensity)', ...
    'For impact of out-of-focus light: Move found layers by value (Intensity)',...
    'Minimum number of pixels for each cell (Intensity)', 'Maximum number of pixels for each cell (Intensity)', ...
    'Maximum number of images per cell (Intensity)', 'Minimum number of images per cell (Intensity)', ...
    char(strcat(maxpixnumlayer_text(buttonifconfocal +1))), 'Optional for not confocal: Minimum number of pixels per layer (Intensity)', txtbuttondia, ...
    'Apply Threshold option', 'Apply just for structure option', 'Show Pre-view making option', 'Comparison option', ...
    'Charge normalization option (1-6)', 'Several Channels used for Cell Detection' , ...
    'Several Channels for Cell Detection', 'Button if weighting channels', 'Weights of channels', 'Bitsize 14 special case', ...
    'Normalized to average intensity value equals 1', 'Normalized to total intensity value equals 1', 'Button if single layer input', ...
    'Time stamp'};
variable = {pathwayimport, phrasetofind, pathwayexportimages, ...
    pathwayexportdata, pixel_x, pixel_y, voxel_z, ...
    numberofchannels, toignore, channelnames, whichchannelforcelldetect, numberofimages, ...
    buttonifconfocal, buttonifadvanced, buttonforoutoffocuslight,...
    frontierthrshK1, frontierthrshK2, anpassungotsuthreshK1, ...
    anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3, ...
    anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
    anpassungintensotsufrontier1, anpassungotsuthresh2, threshforveryfaint, ...
    anpassungotsuthresh1, frontieraddition1,  tomodulate,...
    minnumberpixelstodetectforcell, maxnumpixelwholecell, maxnumofimagescell, minnumofimagescell, maxpixnumlayer, t_var, ...
    buttondiameter, buttonforapplythreshold, buttonforjuststructure, buttontoshow, buttonforcomparison, ...
    buttongeneralqnormalization, buttonifcellrecognitionseveralchannels , channelsforcelldetectionb, ...
    buttonifweightingseveralchannels, weightingforcelldetectionb, bitsize14, ...
    buttoneachcellnormalizedtoaveragevalue1, buttoneachcellchargenormalizedcorrespondingtototalvalue1, ...
    buttonsinglelayer, datetime('now')};



T = table(variablename', variable');

try [thefilename, path, indx] = uiputfile(["*.txt"], 'Choose a file name', string(pathwayimport)); % , 'filter', '.txt')
catch
    [thefilename, path, indx] = uiputfile(["*.txt"]);
end

if thefilename == 0
    p2_feedbackfield.Value = 'Please pick a file name for Save Settings';
else
    if isnumeric(thefilename)
        
        writetable(T, [path, '\', thefilename], 'Delimiter', ' ', 'FileType', 'text')
        
    else
        writetable(T, [path, '\', thefilename], 'Delimiter', '\t', 'FileType', 'text')
    end
    
end

end

% fct to load saved settings
function LoadSettingsButtonFcn(p1_feedbackfield, event, describp2_1t5b, ef1b, efpixx, efpixy, efpixz, ef4, ef4b, slider,...
    checkifconfocal, checkifadvanced, outoffocusoption, efstructthreshfrontier1,...
    efstructthreshfrontier2, efstructurethresh3, efstructurethresh4, efstructurethresh5,...
    efstructthreshfrontierafternocell, efstructurethresh6,...
    efintensthreshold1, efintensthresholdadditionstruct, efintensthresh2faint, ...
    efintensthreshoof , effrontieradditional, efintenstomodulateoof, efintensminnumpixcell,...
    efintensmaxnumpixcell, dropdowndiameter, threshfrontier1_values, threshfrontier2_values,...
    anpassungotsuthreshK1_values, anpassungotsuthreshK2_values, anpassungotsuthreshK3_values, ...
    thresholdnumpixelsforrangefilt_values, describintensthreshold1, text_anpassungintensotsuthresh2,...
    anpassungotsuthresh2_values, outoffocusoption_values, describp2_1t5, maxpixnumlayer_text, ...
    maxpixnumlayer_values,describstructurethresh2, texts_threshfront2pixlayer, ...
    describstructurethresh, describstructurethresh6a, describintensthreshoof, describfrontieradditional,...
    describp2_1t3 , describstructurethresh6, describstructurethresh7, efstructurethresh7, efstructurethresh7b,...
    efmaxpixnumlayer, efminpixnumlayer, dropdownifgeneralqnormalization, checkifapplythresholding,...
    efintensmaxnumimcell, efintensminnumimcell, checkifjuststructure, checkifrunopen, ...
    checkcomparisonimages, ax, tableresults, p3_feedbackfield, checkifseveralchannelsforcelldetection, ...
    channelsforcelldetection_field, weightingforcelldetection_field, ...
    describ_bit14, checkifownmask3, checkifownmask4, ef1c, weighting_textfield)


global phrasetofind channelnames

global pixel_x pixel_y voxel_z numberofchannels toignore ...
    allchannelnames whichchannelforcelldetect numberofimages ...
    buttonifconfocal buttonifadvanced buttonforoutoffocuslight...
    frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 ...
    anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
    anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum...
    anpassungintensotsufrontier1 anpassungotsuthresh2 threshforveryfaint ...
    anpassungotsuthresh1 frontieraddition1  tomodulate...
    minnumberpixelstodetectforcell maxnumpixelwholecell maxnumofimagescell ...
    minnumofimagescell maxpixnumlayer minpixnumlayer buttondiameter buttonforapplythreshold...
    buttonforjuststructure buttontoshow buttonforcomparison buttongeneralqnormalization ...
    buttonifcellrecognitionseveralchannels  channelsforcelldetection bitsize14 ...
    buttonifweightingseveralchannels weightingforcelldetection  ...
    buttoneachcellnormalizedtoaveragevalue1 buttoneachcellchargenormalizedcorrespondingtototalvalue1 ...
    buttonsinglelayer


try [thefilename, path, indx] = uigetfile(["*.txt"], 'Choose a file');
catch
    [thefilename, path, indx] = uigetfile(["*.txt"]);
end


if thefilename == 0
    
    p1_feedbackfield.Value = 'Please pick a file name for Load Settings';
    
else
    
    if isnumeric(thefilename)
        
        T = table2cell(readtable([path, '\', thefilename], 'Delimiter', ' ', 'FileType', 'text', ...
            'Format', 'auto'));
    end
    if ~isnumeric(thefilename)
        T = table2cell(readtable([path, '\', thefilename], 'Delimiter', '\t', 'FileType', 'text', ...
            'Format', 'auto'));
    end
    
    
    
    if sum(size(T) == [51,2]) == size(T,2)
        
        
        phrasetofind = string(T(2,2)); %  phrasetofind
        ef1b.Value = string(T(2,2));
        
        pixel_x = str2double(T(5,2)); % pixel_x
        efpixx.Value = str2double(T(5,2));
        
        pixel_y = str2double(T(6,2)); % pixel_y
        efpixy.Value = str2double(T(6,2));
        
        voxel_z = str2double(T(7,2)); % voxel_z
        efpixz.Value = str2double(T(7,2));
        
        numberofchannels = str2double(T(8,2)); % numberofchannels, dependent on fct., not given out
        
        toignore = str2double(T(9,2)); % toignore, dependent on fct., not given out
        
        channelnames = string(T(10,2)); % allchannelnames ef4
        ef4.Value = channelnames;
        allchannelnames =strtrim(string(strsplit(ef4.Value, ',')));
        
        whichchannelforcelldetect = str2double(T(11,2)); % whichchannelforcelldetect
        ef4b.Value = str2double(T(11,2));
        
        
        
        buttonifconfocal = str2double(T(13,2));
        checkifconfocal.Value = str2double(T(13,2));
        
        checkifconfocalfcn(checkifconfocal,  efstructthreshfrontier1, threshfrontier1_values, ...
            efstructthreshfrontier2,threshfrontier2_values, efstructurethresh3, ...
            anpassungotsuthreshK1_values, efstructurethresh4, anpassungotsuthreshK2_values, ...
            efstructurethresh5, anpassungotsuthreshK3_values, efstructurethresh7, efstructurethresh7b,...
            thresholdnumpixelsforrangefilt_values, thresholdnumpixelsforrangefilt_valuesmaximum, describintensthreshold1, text_anpassungintensotsuthresh2, ...
            efintensthresholdadditionstruct,anpassungotsuthresh2_values, outoffocusoption,...
            outoffocusoption_values, describp2_1t5, maxpixnumlayer_text, efmaxpixnumlayer,...
            maxpixnumlayer_values,describstructurethresh2, texts_threshfront2pixlayer, checkifapplythresholding, ...
            describp2_1t5b, efminpixnumlayer);
        
        buttonifadvanced = str2double(T(14,2));
        checkifadvanced.Value = str2double(T(14,2));
        checkifadvancedfcn(checkifadvanced, efstructthreshfrontier1, describstructurethresh, ...
            efstructthreshfrontier2, describstructurethresh2, efstructthreshfrontierafternocell, ...
            describstructurethresh6a, outoffocusoption, describintensthreshoof, describfrontieradditional, ...
            efintensthreshoof, effrontieradditional, describp2_1t3, efintensthreshoof, ...
            describstructurethresh6, efstructurethresh6, describstructurethresh7, describstructurethresh7b, efstructurethresh7, efstructurethresh7b, ...
            efintenstomodulateoof);
        
        buttonforoutoffocuslight = str2double(T(15,2));
        outoffocusoption.Value = str2double(T(15,2));
        
        frontierthrshK1 = str2double(T(16,2));
        efstructthreshfrontier1.Value = str2double(T(16,2));
        
        frontierthrshK2 = str2double(T(17,2));
        efstructthreshfrontier2.Value = str2double(T(17,2));
        
        anpassungotsuthreshK1 = str2double(T(18,2));
        efstructurethresh3.Value = str2double(T(18,2));
        
        anpassungotsuthreshK2 = str2double(T(19,2));
        efstructurethresh4.Value = str2double(T(19,2));
        
        anpassungotsuthreshK3 = str2double(T(20,2));
        efstructurethresh5.Value = str2double(T(20,2));
        
        frontier3 = str2double(T(21,2));
        efstructthreshfrontierafternocell.Value = str2double(T(21,2));
        
        anpassungotsuthreshKsubtr = str2double(T(22,2));
        efstructurethresh6.Value = str2double(T(22,2));
        
        thresholdnumpixelsforrangefilt = str2double(T(23,2));
        efstructurethresh7.Value = str2double(T(23,2));
        
        thresholdnumpixelsforrangefiltmaximum = str2double(T(24,2));
        efstructurethresh7b.Value = str2double(T(24,2));
        
        
        
        
        anpassungintensotsufrontier1 = str2double(T(25,2));
        efintensthreshold1.Value = str2double(T(25,2));
        
        anpassungotsuthresh2 = str2double(T(26,2));
        efintensthresholdadditionstruct.Value = str2double(T(26,2));
        
        threshforveryfaint = str2double(T(27,2));
        efintensthresh2faint.Value = str2double(T(27,2));
        
        anpassungotsuthresh1 = str2double(T(28,2));
        efintensthreshoof.Value = str2double(T(28,2));
        
        frontieraddition1 = str2double(T(29,2));
        effrontieradditional.Value = str2double(T(29,2));
        
        tomodulate = str2double(T(30,2));
        efintenstomodulateoof.Value = str2double(T(30,2));
        
        minnumberpixelstodetectforcell = str2double(T(31,2));
        efintensminnumpixcell.Value = str2double(T(31,2));
        
        maxnumpixelwholecell = str2double(T(32,2));
        efintensmaxnumpixcell.Value = str2double(T(32,2));
        
        maxnumofimagescell = str2double(T(33,2));
        efintensmaxnumimcell.Value = str2double(T(33,2));
        
        minnumofimagescell = str2double(T(34,2));
        efintensminnumimcell.Value = str2double(T(34,2));
        
        maxpixnumlayer = str2double(T(35,2));
        efmaxpixnumlayer.Value = str2double(T(35,2));
        
        minpixnumlayer = str2double(T(36,2));
        efminpixnumlayer.Value = str2double(T(36,2));
        
        buttondiameter = str2double(T(37,2));
        dropdowndiameter.Value = str2double(T(37,2));
        
        buttonforapplythreshold = str2double(T(38,2));
        checkifapplythresholding.Value = str2double(T(38,2));
        
        buttonforjuststructure = str2double(T(39,2));
        checkifjuststructure.Value = str2double(T(39,2));
        
        buttontoshow = str2double(T(40,2));
        checkifrunopen.Value = str2double(T(40,2));
        
        buttonforcomparison = str2double(T(41,2));
        checkcomparisonimages.Value = str2double(T(41,2));
        
        buttongeneralqnormalization = str2double(T(42,2));
        dropdownifgeneralqnormalization.Value = str2double(T(42,2));
        
        buttonifcellrecognitionseveralchannels = str2double(T(43,2));
        checkifseveralchannelsforcelldetection.Value = str2double(T(43,2));
        
        
        
        channelsforcelldetection = str2double(strsplit(string(T(44,2)),','))';
        
        
        
        channelsforcelldetection_field.Value = string(T(44,2));
        
        buttonifweightingseveralchannels = str2double(T(45,2));
        weighting_textfield.Value = str2double(T(45,2));
        
        a = str2double(T(46,2));
        try a = cell2mat([a, T(46,3:end)]);
        catch
        end
        
        weightingforcelldetection = str2double(strsplit(string(T(46,2)), ','))'; %cell2mat(T(44, 2:end));%str2double(strsplit(T(44,2:end)));
        
        
        
        weightingforcelldetection_field.Value = string(T(46,2));
        
        bitsize14 =str2double(T(47,2));
        describ_bit14.Value = str2double(T(47,2));
        
        
        buttoneachcellnormalizedtoaveragevalue1 = str2double(T(48,2));
        checkifownmask3.Value = buttoneachcellnormalizedtoaveragevalue1;
        
        buttoneachcellchargenormalizedcorrespondingtototalvalue1 = str2double(T(49,2));
        checkifownmask4.Value = buttoneachcellchargenormalizedcorrespondingtototalvalue1;
        
        buttonsinglelayer = str2double(T(50,2));
        ef1c.Value = buttonsinglelayer;
        
        
        
        global pathwayimport names channeltoshowval
        
        if ~isempty(pathwayimport) && ~isempty(names)
            
            path = strcat(pathwayimport,'\', names{1});
            
            if isempty(whichchannelforcelldetect)
                whichchannelforcelldetect = 1;
            end
            
            if isempty(channeltoshowval) || channeltoshowval == 0
                channeltoshowval = 1;
            end
            
            b = imfinfo(path);
            stacknum = numel(b);
            
            count = 1;
            M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
            for k = channeltoshowval:length(allchannelnames):stacknum
                M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
            end
            
            montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax);
            title(allchannelnames(channeltoshowval), 'Parent', ax ,  'FontWeight', 'bold', 'FontSize', 20);
            
        end
        
        slider.Value = 1;
        
        if isempty(numberofimages)
            slider.Limits = [1 2];
        else
            slider.Limits = [1 numberofimages];
        end
        
        
        if length(slider.Limits(1):1:slider.Limits(2)) < 10
            slider.MajorTicks = slider.Limits(1):1:slider.Limits(2);
            slider.MinorTicks = [];
        end
        
        if (10 < length(slider.Limits(1):1:slider.Limits(2))) &&  ( length(slider.Limits(1):1:slider.Limits(2))< 100)
            slider.MajorTicks = slider.Limits(1):10:slider.Limits(2);
            slider.MinorTicks = slider.Limits(1):1:slider.Limits(2);
        end
        
        if length(slider.Limits(1):1:slider.Limits(2)) > 100
            slider.MajorTicks = slider.Limits(1):100:slider.Limits(2);
            slider.MinorTicks = slider.Limits(1):10:slider.Limits(2);
        end
        
        slidervalue2 = 1;
        
        updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
        
        
    else
        
        p1_feedbackfield.Value = '.txt file to import does not show appropriate size';
        
    end
    
    
end

end




% fct for calculating all parameters like normalized dipole moment, dipole
% moment, ...
function [dipolmomentnormalized dipolmoment Rnormalized diameter_maxvec diameter_avvec qnormalized ...
    qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
    RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
    percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
    countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
    howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
    distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
    arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
    lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
    allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
    arrayofclustersdistancetheta arrayofclusterstheta, ...
    final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
    sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
    sorted_meanintensitylist, sorted_maxintensitylist, ...
    arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist] = ...
    polarityquantification(path, z, numberofimages, names, ...
    allchannelnames, toignore, mask, stackstotake, pixlength_x, pixlength_y, pixlength_z, pathwaytoexportimages,...
    saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, ...
    diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
    RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
    countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
    zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
    lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
    clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
    startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
    clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
    arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
    final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
    sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
    sorted_meanintensitylist, sorted_maxintensitylist, ...
    arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist)

%"test polarity quantification here"
close all
global buttonimportmasksofcells
if isempty(saveimagesyes)
    saveimagesyes = 1;
end

if saveimagesyes ==1 && ~isempty(pathwaytoexportimages)
    %save mask as tiff
    t = Tiff(strcat(pathwaytoexportimages, '\',string(names{z}),' Masked Cell ',num2str(z), '.tif'), 'w');
    tagstruct.ImageLength = size(mask,1);
    tagstruct.ImageWidth = size(mask,2);
    tagstruct.Photometric = Tiff.Photometric.Mask;
    tagstruct.BitsPerSample = 8;
    tagstruct.SamplesPerPixel = 1;
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.Compression = Tiff.Compression.None;
    tagstruct.Software = 'MATLAB';
    setTag(t, tagstruct)
    setTag(t, 'XResolution', pixlength_x);
    setTag(t, 'YResolution', pixlength_y);
    
    
    write(t, squeeze(im2uint8(mask(:,:,1))));
    
    for m = 2:size(mask,3)
        writeDirectory(t);
        setTag(t, tagstruct);
        write(t, squeeze(im2uint8(mask(:,:,m))));
    end
    
    close(t)
end

if  buttonimportmasksofcells == 1
    mask = mask./max(max(max(mask)));
end

% don't need whole mask:
mask_original = mask;
clear   mask
mask = mask_original(:,:,stackstotake);


mask_background = zeros(size(mask));
mask_background(mask == 0) = 1;


indices = 1:length(allchannelnames);
indices(toignore) = [];


b = imfinfo(path);
stacknum = length(stackstotake);


global bitsize14
if bitsize14 ==1
    max_val = 2^14-1;
else
    try
        if ~isempty(b(1).SampleFormat)
            if isequal(b(1).SampleFormat, "Two's complement signed integer")
                max_val = 2^(b(1).BitDepth/2) - 1;
            else
                max_val = 2^(b(1).BitDepth) - 1;
            end
            
        else
            max_val = 2^(b(1).BitDepth) - 1;
        end
    catch
        max_val = 2^(b(1).BitDepth) - 1;
    end
end

pixel_vol = pixlength_x * pixlength_y * pixlength_z;
M = zeros(b(1).Height, b(1).Width, length(stackstotake));
for uka = indices
    
    count = 1;
    
    for k = uka+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):uka+length(allchannelnames)*(stackstotake(end)-1)
        M(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    
    if saveimagesyes == 1 && ~isempty(pathwaytoexportimages)
        
        montage(double(M).*double(mask)./double(max(max(max(M)))));
        set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
        saveas(gcf,strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), '.png'));
        
        close all
    end
    
    av_background = 0;
    background = 0;
    count_back = 0;
    for t = 1:stacknum
        for i = 1:size(mask_background,1)
            for j = 1:size(mask_background,2)
                
                if mask_background(i,j,t) == 1
                    background = background + double(M(i,j,t));
                    count_back = count_back + 1;
                end
                
            end
        end
    end
    % get average background by dividing total background through count
    av_background = background / count_back;
    
    % correct the signal, by subtracting the average background
    
    M = double(M) - av_background;
    
    
    bound_x = 0; %values of frontier
    bound_y = 0; % values of frontier
    bound_z = 0; % values of frontier
    
    
    for i = 1:stacknum
        
        roiboundaries = bwboundaries(mask(:,:,i));
        
        try xy = roiboundaries{1};
            x = xy(:,2);
            y = xy(:,1);
            bound_x = [bound_x; x];
            bound_y = [bound_y; y];
            bound_z = [bound_z; repelem(i, size(xy,1))' ];
        catch
        end
        
    end
    
    bound_x(1) = [];
    bound_y(1) = [];
    bound_z(1) = [];
    
    % Sum over all signal values, divide by new count to get average value
    
    value = 0;
    
    count = 0;
    
    
    
    
    for t = 1:stacknum
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    value = value + double(M(j,k,t));
                    count = count + 1;
                    
                    
                    
                end
            end
        end
    end
    
    count_intensity = value;
    
    
    %------------------------------
    
    
    
    av_val = value/count;
    
    avintensity(z,uka) = av_val;
    
    global buttoneachcellnormalizedtoaveragevalue1
    if buttoneachcellnormalizedtoaveragevalue1 ==1
        count = 0;
        value = 0;
        M = double(M)./av_val;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    
    global buttoneachcellchargenormalizedcorrespondingtototalvalue1
    if buttoneachcellchargenormalizedcorrespondingtototalvalue1 == 1
        count = 0;
        value = 0;
        M = double(M)./count_intensity;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    
    
    if buttongeneralqnormalization == 6
        
        max_val = av_val * count;
        
    end
    
    
    
    %%%%%%%
    % goal: get 'charge' density for every pixel of masked signal area
    
    clear mask_pos;
    clear mask_neg;
    clear N;
    clear r_posx;
    clear r_posy;
    clear r_posz;
    clear q_pos;
    clear r_negx;
    clear r_negy;
    clear r_negz;
    clear q_neg;
    
    r_posx = zeros(1);
    r_posy = zeros(1);
    r_posz = zeros(1);
    q_pos = zeros(1);
    
    r_negx = zeros(1);
    r_negy = zeros(1);
    r_negz = zeros(1);
    q_neg = zeros(1);
    
    zaehler_pos = 0;
    zaehler_neg = 0;
    zaehler_tot = 0;
    list_pos = zeros(1,5);
    list_neg = zeros(1,5);
    
    
    if buttongeneralqnormalization == 3 || buttongeneralqnormalization == 4
        qposmax = 0;
    end
    
    
    
    for t = 1:stacknum
        
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    N(j,k,t) = (double(M(j,k,t)) - double(av_val))/pixel_vol;
                    % N: 3D Matrix with 'charge' density values
                    zaehler_tot = zaehler_tot + 1; %total count of voxels
                    
                    if N(j,k,t)>0 % for positive 'charge' density
                        
                        r_posx = r_posx + j * N(j,k,t); % here: sum(q * <r>)
                        r_posy = r_posy + k * N(j,k,t); % here: sum(q * <r>)
                        r_posz = r_posz + t * N(j,k,t); % here: sum(q * <r>)
                        q_pos = q_pos + N(j,k,t); % here: sum(q)
                        
                        % sum(q * <r>) / sum(q) later calculated;
                        
                        
                        if buttongeneralqnormalization == 3 || buttongeneralqnormalization == 4
                            if N(j,k,t) > qposmax
                                qposmax = N(j,k,t);
                            end
                        end
                        
                        
                        
                        zaehler_pos = zaehler_pos + 1; % important later for normalization of Dipole Moment
                        list_pos(zaehler_pos,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                        
                    end
                    
                    if N(j,k,t)<0 % if negative density
                        % case == 0: no impact on where high or low charge, left out
                        
                        r_negx = r_negx + j * N(j,k,t);
                        r_negy = r_negy + k * N(j,k,t);
                        r_negz = r_negz + t * N(j,k,t);
                        q_neg = q_neg + N(j,k,t);
                        zaehler_neg = zaehler_neg + 1;
                        list_neg(zaehler_neg,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                    end % for == 0: no impact on where high or low charge, left out
                end
            end
        end
    end
    
    cd(pathwaytoexportimages)
    save( [char( 'list_pos cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'list_pos', '-v7.3');
    save( [char( 'list_neg cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'list_neg', '-v7.3');
    
    % sum(q * <r>) / sum(q)
    % as Matrix-definition to x and y is different:
    % need to adjust for it and change x and y
    
    R_pos = [r_posy/q_pos, r_posx/q_pos, r_posz/q_pos];
    % weighted mean position of positive 'charge' density
    
    R_neg = [r_negy/q_neg, r_negx/q_neg, r_negz/q_neg];
    % weighted mean position of negative 'charge' denstiy
    
    save( [char( 'R_pos cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'R_pos', '-v7.3');
    save( [char( 'R_neg cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'R_neg', '-v7.3');
    
    distances = zeros(1, size(list_pos,1));
    
    for k = 1:size(list_pos,1)
        distances(k) = ((list_pos(k,1)-R_pos(2))^2 + (list_pos(k,2)-R_pos(1))^2 + (list_pos(k,3)-R_pos(3))^2)^0.5;
    end
    
    sumofdistancesqRpos(uka,z) = sum(distances);
    
    %R_eval = norm(R_pos - R_neg);
    % distance between R_pos and R_neg
    
    % now: in nm
    % herefore: defined center of voxel as the position of value.
    % thus, always -0.5 pixlength
    
    R_posnm = [ (R_pos(1) -0.5) * pixlength_x, (R_pos(2)- 0.5) * pixlength_y, (R_pos(3) - 0.5) * pixlength_z];
    
    R_negnm = [ (R_neg(1)-0.5) * pixlength_x, (R_neg(2) - 0.5)* pixlength_y, (R_neg(3) - 0.5) * pixlength_z];
    
    R_evalnm = norm(R_posnm - R_negnm);
    
    %%%%%%%%%%%%%
    
    % goal: get the center of volume of interest and the maximal diameter / average radius ,...
    
    % restructure the mask with its 0 and 1 values into 3D coordinates of the
    % positions of the 1 values
    pixList = regionprops(mask, 'PixelList'); % (struct, 3D Matrix with doubles)
    pixsM2 = pixList.PixelList; % values in pixel,
    %through changing from matrix to structure: 1st column x, 2nd column y, 3rd
    %column z
    pixsM(:,1) = ((pixsM2(:,1)-0.5)* pixlength_x); % values in nm
    pixsM(:,2) = ((pixsM2(:,2)-0.5)* pixlength_y); % values in nm
    
    global buttonsinglelayer
    if buttonsinglelayer == 0
        try pixsM(:,3) = ((pixsM2(:,3)-0.5)* pixlength_z); % values in nm
        catch
            pixsM(:,3) = ones(size(pixsM,1),1);
        end
    else
        pixsM(:,3) = ones(size(pixsM,1),1);
    end
    
      if buttonsinglelayer ==1
       pixsM2(:,3) = ones(size(pixsM2,1),1); 
    end
    
    
    
    Mmeanpix = [mean(pixsM2(:,1)), mean(pixsM2(:,2)), mean(pixsM2(:,3))];
    if uka ==1
        save( [char( 'Mmean pix cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'Mmeanpix', '-v7.3');
    end
    
    
    xlist = list_pos(:,2) - Mmeanpix(1);
    ylist = list_pos(:,1) - Mmeanpix(2);
    zlist = list_pos(:,3) - Mmeanpix(3);
    Mlist = list_pos(:,5);
    
    
    Mlist2 = Mlist - mean(Mlist);
    index_totake = find(Mlist2 > 0);
    Mlist3 = Mlist(index_totake);
    xlist3 = xlist(index_totake);
    ylist3 = ylist(index_totake);
    zlist3 = zlist(index_totake);
    
    
    y_min = min(list_pos(:,1));
    y_max = max(list_pos(:,1));
    x_min = min(list_pos(:,2));
    x_max = max(list_pos(:,2));
    z_min = min(list_pos(:,3));
    z_max = max(list_pos(:,3));
    
    
    Mpos = zeros(y_max + 10, x_max + 10, z_max - z_min);
    
    for i = 1:length(Mlist3)
        
        Mpos(ylist(index_totake(i)) + Mmeanpix(2), xlist(index_totake(i)) + Mmeanpix(1), zlist(index_totake(i)) + Mmeanpix(3)- z_min + 1) = Mlist3(i);
        
        
    end
    
    Mpos_normalized = Mpos ./ max(max(max(Mpos)));
    figure()
    montage(Mpos_normalized); %(:,:,2)./max(max(max(Mpos(:,:,2)))))
    title([string(allchannelnames(uka)), ': qpos of qpos '])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qposofqpos.png'))
    
    
    Mposjustqpos = zeros(y_max + 10, x_max + 10, z_max - z_min);
    
    for i = 1:length(Mlist)
        
        Mposjustqpos(ylist(i) + Mmeanpix(2), xlist(i) + Mmeanpix(1), zlist(i) + Mmeanpix(3)- z_min + 1) = Mlist(i);
        
        
    end
    
    Mposjustqpos_normalized = Mposjustqpos ./ max(max(max(Mposjustqpos)));
    figure()
    montage(Mposjustqpos_normalized); %(:,:,2)./max(max(max(Mpos(:,:,2)))))
    title([string(allchannelnames(uka)), ': qpos'])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qpos.png'))
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    se = strel('disk',1)
    afterOpening = imopen(Mpos_normalized,se);
    
    figure()
    montage(afterOpening)
    title([string(allchannelnames(uka)), ': qpos of qpos after opening'])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qposofqposafteropening.png'))
    
    
    C = bwconncomp(afterOpening, 26)
    
    numPixelsC = cellfun(@numel,C.PixelIdxList);
    totakeclusters = find(numPixelsC > 50)
    
    stats = regionprops3(C, afterOpening,  "all")
    findstats = find(table2array(stats(:,1))<50);
    
    
    stats(findstats,:) = [];
    stats
    volume = table2array(stats(:,1))
    centroid = table2array(stats(:,2))
    equivdiameter = table2array(stats(:,6));
    voxellist = table2array(stats(:,8));
    surfacearea = table2array(stats(:,18));
    voxelvalues = table2array(stats(:,19));
    weightedcentroid = table2array(stats(:,20));
    meanintensity = table2array(stats(:,21));
    maxintensity = table2array(stats(:,22));
    
    [sorted_volume sorted_index] = sort(volume, 'desc')
    sorted_centroid = centroid(sorted_index,:);
    sorted_equivdiameter = equivdiameter(sorted_index);
    sorted_voxellist = voxellist(sorted_index);
    sorted_surfacearea = surfacearea(sorted_index);
    sorted_voxelvalues = voxelvalues(sorted_index);
    sorted_weightedcentroid = weightedcentroid(sorted_index,:);
    sorted_meanintensity = meanintensity(sorted_index);
    sorted_maxintensity = maxintensity(sorted_index);
    
    
    strengthclusters3d = sorted_volume ./ sum(sorted_volume);
    array_tofillstrength = zeros(1,length(strengthclusters3d));
    array_tofilldistance = zeros(1,length(strengthclusters3d));
    
    
    
    
    try
        maxclusterdirection = sorted_centroid(1,:) - Mmeanpix;
        projectedtoxy = maxclusterdirection(1,1:2);
    catch
        maxclusterdirection = [NaN, NaN , NaN];
        projectedtoxy = [NaN NaN];
        
    end
    
    
    arrayfixed4distance = zeros(1,4);
    arrayfixed5strength = zeros(1,5);
    for i = 1:length(strengthclusters3d)
        
        if strengthclusters3d(i) >= 0.60
            array_tofillstrength(i) = 1;
            arrayfixed5strength(1) = arrayfixed5strength(1) + 1;
        end
        if  0.4 <= strengthclusters3d(i) && strengthclusters3d(i) <0.6
            array_tofillstrength(i) = 2;
            arrayfixed5strength(2) = arrayfixed5strength(2) + 1;
        end
        if  0.2 <= strengthclusters3d(i) && strengthclusters3d(i) <0.4
            array_tofillstrength(i) = 3;
            arrayfixed5strength(3) = arrayfixed5strength(3) + 1;
        end
        if  0.1 <= strengthclusters3d(i) && strengthclusters3d(i) <0.2
            array_tofillstrength(i) = 4;
            arrayfixed5strength(4) = arrayfixed5strength(4) + 1;
        end
        if  0 <= strengthclusters3d(i) && strengthclusters3d(i) <0.1
            array_tofillstrength(i) = 5;
            arrayfixed5strength(5) = arrayfixed5strength(5) + 1;
        end
        
        
        
        
        alpharad = acos(dot(projectedtoxy, sorted_centroid(i,1:2)- Mmeanpix(1:2)) / (sqrt(dot(projectedtoxy, projectedtoxy)) * sqrt(dot( sorted_centroid(i,1:2)- Mmeanpix(1:2),  sorted_centroid(i,1:2)- Mmeanpix(1:2)))));
        alphadeg = alpharad / (2* pi()) * 360;
        
        if alphadeg <= 45
            array_tofilldistance(i) = 1;
            arrayfixed4distance(1) = arrayfixed4distance(1) + 1;
        end
        if alphadeg <= 90 && alphadeg > 45
            array_tofilldistance(i) = 2;
            arrayfixed4distance(2) = arrayfixed4distance(2) + 1;
        end
        if alphadeg <= 135 && alphadeg > 90
            array_tofilldistance(i) = 3;
            arrayfixed4distance(3) = arrayfixed4distance(3) + 1;
        end
        if alphadeg <= 180 && alphadeg > 135
            array_tofilldistance(i) = 4;
            arrayfixed4distance(4) = arrayfixed4distance(4) + 1;
        end
        
        
        
        
    end
    
    
    [array_tofillstrengthsorted index_sortedstrengtharray] = sort(array_tofillstrength, 'asc');
    array_tofilldistancesorted = array_tofilldistance(index_sortedstrengtharray);
    
    final_array = 0;
    for let = 1:length(array_tofillstrengthsorted)
        
        final_array = final_array + array_tofillstrengthsorted(let).* 10^(length(array_tofillstrengthsorted)- let );
        final_array = final_array + array_tofilldistancesorted(let).* 10^(2*length(array_tofillstrengthsorted)-let +1);
        
        
    end
    
    
    
    final_distancestrengthlist(z, uka) = final_array;
    
    sorted_volumelist{z, uka} = sorted_volume;
    sorted_centroidlist{z, uka} = sorted_centroid;
    sorted_equivdiameterlist{z, uka} = sorted_equivdiameter;
    sorted_voxellistlist{z, uka} = sorted_voxellist;
    sorted_surfacearealist{z, uka} = sorted_surfacearea;
    sorted_voxelvalueslist{z, uka} = sorted_voxelvalues;
    sorted_weightedcentroidlist{z, uka} = sorted_weightedcentroid;
    sorted_meanintensitylist{z, uka} = sorted_meanintensity;
    sorted_maxintensitylist{z, uka} = sorted_maxintensity;
    
    arrayfixed4distancelist(z,uka,:) = arrayfixed4distance;
    arrayfixed5strengthlist(z,uka,:) = arrayfixed5strength;
    
    sorted_array_tofilldistancelist{z,uka} = array_tofilldistancesorted;
    sorted_array_tofillstrengthlist{z,uka}= array_tofillstrengthsorted;
    
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    r = (xlist3.^2 + ylist3.^2 + zlist3.^2);
    theta = acos(zlist3./(xlist3.^2 + ylist3.^2 + zlist3.^2).^0.5); % 0 to pi
    phi = zeros(1,length(xlist3));                   % 0 to 2 pi
    
    
    
    
    
    for q = 1:length(xlist3)
        if xlist3(q) >= 0
            phi(q) = atan(ylist3(q)./xlist3(q)) + pi()/2;
        else
            phi(q) = atan(ylist3(q)./xlist3(q)) + 3/2 *pi();
        end
    end
    
    
    
    
    thetadeg = rad2deg(theta);
    phideg = rad2deg(phi);
    binedgestotakeforphi = 0:10:360;
    randval = 1 / (length(binedgestotakeforphi) - 1);
    
    
    global pathwayexportdata
    save([char(pathwayexportdata),'\phideg', char(num2str(z)), 'channel', char(num2str(uka)), '.mat'], 'phideg', '-v7.3');
    save([char(pathwayexportdata),'\thetadeg', char(num2str(z)), 'channel', char(num2str(uka)), '.mat'], 'thetadeg', '-v7.3');
    
    
    
    figure()
    subplot(1,2,1)
    ahistogram = histogram(phideg, 'BinEdges', binedgestotakeforphi, 'Normalization', 'probability');
    title('\phi from 0° to 360° in 10° bins')
    xlabel('Binned Degree (°)')
    ylabel('Normalized Probability')
    
    data_ahistogram = ahistogram.Values;
    whatisaboverandom = data_ahistogram - randval;
    whatisaboverandom(whatisaboverandom < 0) = 0;
    
    countess = 0;
    howlonghowoften = zeros(1);
    tocount = 0;
    zaehlerhowlong = 1;
    
    findabove0forstart = find(whatisaboverandom == 0);
    start = findabove0forstart(1);
    
    endpoints = zeros(1);
    zaehlerendpoints = 1;
    
    howmuchoverit = 0;
    howmuchoveritatall = [];
    zaehlerhowmuchoverit = 1;
    
    
    if start == 1 || sum(findabove0forstart == 36) == 1 % start: first bin, that 0 (not over average); if not possibility that above random for bin 1 and 36
        for i = 1:length(whatisaboverandom)
            if whatisaboverandom(i)>0
                countess = countess + 1;
                tocount = tocount + 1;
                howmuchoverit = howmuchoverit + whatisaboverandom(i);
                if i == length(whatisaboverandom)
                    howlonghowoften(zaehlerhowlong) = tocount;
                    endpoints(zaehlerendpoints) = i;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                end
                
                
            else
                if tocount ~=0
                    howlonghowoften(zaehlerhowlong) = tocount;
                    zaehlerhowlong = zaehlerhowlong + 1;
                    tocount = 0;
                    endpoints(zaehlerendpoints) = i -1;
                    zaehlerendpoints = zaehlerendpoints + 1;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    howmuchoverit = 0;
                    zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                end
            end
            
        end
        
        
    else % could go above 36 / 1 bin
        
        for i = start:36 + start - 1
            
            if i <=36
                if whatisaboverandom(i)>0
                    countess = countess + 1;
                    tocount = tocount + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandom(i);
                    if i == 36 + start - 1
                        howlonghowoften(zaehlerhowlong) = tocount;
                        endpoints(zaehlerendpoints) = i;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocount ~=0
                        howlonghowoften(zaehlerhowlong) = tocount;
                        zaehlerhowlong = zaehlerhowlong + 1;
                        tocount = 0;
                        endpoints(zaehlerendpoints) = i-1;
                        zaehlerendpoints = zaehlerendpoints + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            else
                
                zaehler_start = i - 36;
                if whatisaboverandom(zaehler_start)>0
                    countess = countess + 1;
                    tocount = tocount + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandom(zaehler_start);
                    if i == 36 + start - 1
                        howlonghowoften(zaehlerhowlong) = tocount;
                        endpoints(zaehlerendpoints) = i ;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocount ~=0
                        howlonghowoften(zaehlerhowlong) = tocount;
                        zaehlerhowlong = zaehlerhowlong + 1;
                        tocount = 0;
                        endpoints(zaehlerendpoints) = i -1 ;
                        zaehlerendpoints = zaehlerendpoints + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            end
            
        end
        
        
    end
    
    startpoints = endpoints - howlonghowoften + 1;
    meanpoints = (endpoints + startpoints) / 2;
    lengthpoints = endpoints - startpoints + 1;
    
    
    distancetonext = zeros(length(startpoints),1);
    for i = 1:length(startpoints)
        
        if i == length(startpoints)
            if endpoints(end) > 36
                
                distancetonext(i) = startpoints(1) - (endpoints(end)-36);
            else
                distancetonext(i) = startpoints(1) - endpoints(end);
            end
        else
            distancetonext(i) = startpoints(i+1) - endpoints(i);
        end
    end
    
    meanpoints2 = meanpoints;
    meanpoints2(end +1) = meanpoints2(1);
    
    distancetomean = diff(meanpoints2);
    distancetomean(distancetomean<0) = distancetomean(distancetomean<0) + 36;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    clusterphi = {};
    for i = 1:length(howmuchoveritatall)
        
        tosavevariable = [];
        if endpoints(i) <= 36
            
            for j = 1:length(phideg)
                if startpoints(i)*10 - 10 <= phideg(j) && phideg(j) <= endpoints(i)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            
            clusterphi{i} =  tosavevariable;
            tosavevariable = [];
            
        else
            
            for j = 1:length(phideg)
                if startpoints(i)*10 - 10 <= phideg(j) || phideg(j) <= (endpoints(i)-36)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            
            clusterphi{i} =  tosavevariable;
            tosavevariable = [];
            
        end
        
    end
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    
    clusterlength =  cellfun(@length, clusterphi);
    allclusterinput = sum(clusterlength);
    clusterpercent = clusterlength / allclusterinput;
    clusterpercenttoallpixelspos = clusterlength / size(xlist3,1);
    
    arrayofclusterstrength = zeros(5,1);
    arrayofclustersdistance = zeros(5,1);
    arrayofclusters = zeros(length(clusterlength),3);
    arrayofclusters(:,1) = clusterpercent;
    
    maxclusterpercentposition = find(clusterpercent == max(clusterpercent));
    if length(maxclusterpercentposition)>1
        maxclusterpercentposition = maxclusterpercentposition(1);
    end
    
    for i = 1:length(clusterpercent)
        
        if clusterpercent(i) >=0.60
            arrayofclusterstrength(1) = arrayofclusterstrength(1) +1;
        end
        if 0.4 <= clusterpercent(i) && clusterpercent(i) <0.6
            arrayofclusterstrength(2) = arrayofclusterstrength(2) +1;
        end
        if 0.2 <= clusterpercent(i) && clusterpercent(i) <0.4
            arrayofclusterstrength(3) = arrayofclusterstrength(3) +1;
        end
        if 0.1 <= clusterpercent(i) && clusterpercent(i) <0.2
            arrayofclusterstrength(4) = arrayofclusterstrength(4) +1;
        end
        if 0 <= clusterpercent(i) && clusterpercent(i) <0.1
            arrayofclusterstrength(5) = arrayofclusterstrength(5) +1;
        end
        
        
        if abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10 >180
            
            abseval = 360 - abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            arrayofclusters(i,3) = abseval;
            arrayofclusters(i,2) = (meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            
            
            if abseval <= 45
                arrayofclustersdistance(1) = arrayofclustersdistance(1) + 1;
            end
            
            if abseval <= 90 && abseval > 45
                arrayofclustersdistance(2) = arrayofclustersdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclustersdistance(3) = arrayofclustersdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclustersdistance(4) = arrayofclustersdistance(4) + 1;
            end
            
        else
            
            abseval = abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            arrayofclusters(i,3) = abseval;
            arrayofclusters(i,2) = (meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            
            
            if abseval <= 45
                arrayofclustersdistance(1) = arrayofclustersdistance(1) + 1;
            end
            
            if abseval  <= 90 && abseval > 45
                arrayofclustersdistance(2) = arrayofclustersdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclustersdistance(3) = arrayofclustersdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclustersdistance(4) = arrayofclustersdistance(4) + 1;
            end
        end
        
        
    end
    
    
    % rules
    % find biggest cluster; if >=60% of values: very big; if >=40 big; if
    % 20-40%: middle; if 10-20% small, if 0-10% very small
    
    %from biggest one, meanpoints: +/- 45°: next element;
    % from 45° till 90° and -90° till -45°: same side;
    % from 90° till 135°,  -90° till - 135° other side;
    % from 135 to 180°, -135°, -180°: opposite side;
    
    
    % result e.g.:
    % 1 very big; 2 very small (opposite and other side)
    
    
    howmuchoveritatallphi{uka,z} = howmuchoveritatall;
    percover = countess / 36 * 100;
    
    percoverphi(uka, z) = percover;
    countessphi(uka,z) = countess;
    
    
    
    distancetoavval = sum(((data_ahistogram - randval).^2).^0.5);
    distancetoavvalphi(uka, z) = distancetoavval;
    
    zaehlerhowlonghowoftenphi{uka,z} = howlonghowoften;
    endpointsphi{uka,z} = endpoints;
    
    startpointsphi{uka,z} = startpoints;
    meanpointsphi{uka,z} = meanpoints;
    lengthpointsphi{uka,z} = lengthpoints;
    histogramvaluesphi(z,uka,:) =  data_ahistogram;
    distancetonextphi{uka,z} = distancetonext;
    distancetomeanphi{uka,z} = distancetomean;
    clusterallphi{uka,z} = clusterphi; % arrayofclusters;
    clusterlengthphi{uka,z} = clusterlength;
    allclusterinputphi(uka,z) = allclusterinput;
    clusterpercentphi{uka,z} =  clusterpercent;
    clusterpercenttoallpixelsposphi{uka,z} = clusterpercenttoallpixelspos;
    arrayofclusterstrengthphi(z, uka,:) = arrayofclusterstrength;
    arrayofclustersdistancephi(z, uka,:) = arrayofclustersdistance;
    arrayofclustersphi{uka,z} = arrayofclusters;
    
    subplot(1,2,2)
    binsedgestotakefortheta = 0:10:180;
    randval = 1 / (length(binsedgestotakefortheta) - 1);
    
    bhistogram = histogram(thetadeg, 'BinEdges', binsedgestotakefortheta, 'Normalization', 'probability');
    data_bhistogram = bhistogram.Values;
    whatisaboverandomtheta = data_bhistogram - randval;
    whatisaboverandomtheta(whatisaboverandomtheta < 0) = 0;
    title('\theta from 0° to 180° in 10° bins')
    xlabel('Binned Degree (°)')
    ylabel('Normalized Probability')
    
    
    countessthetaa = 0;
    howlonghowoftentheta = zeros(1);
    tocounttheta = 0;
    zaehlerhowlongtheta = 1;
    
    
    findabove0forstart = find(whatisaboverandomtheta == 0);
    start = findabove0forstart(1);
    endpointstheta2 = zeros(1);
    zaehlerendpointstheta = 1;
    howmuchoverit = 0;
    howmuchoveritatall = [];
    zaehlerhowmuchoverit = 1;
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf,strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'phiandtheta','.png'));
    close all
    
    if start == 1 || sum(findabove0forstart == 18) == 1
        for i = 1:length(whatisaboverandomtheta)
            if whatisaboverandomtheta(i)>0
                countessthetaa = countessthetaa + 1;
                tocounttheta = tocounttheta + 1;
                howmuchoverit = howmuchoverit + whatisaboverandomtheta(i);
                if i == length(whatisaboverandomtheta)
                    howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                    endpointstheta2(zaehlerendpointstheta) = i;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                end
                
                
            else
                if tocounttheta ~=0
                    howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                    zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                    tocounttheta = 0;
                    endpointstheta2(zaehlerendpointstheta) = i -1;
                    zaehlerendpointstheta = zaehlerendpointstheta + 1;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    howmuchoverit = 0;
                    zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                end
            end
            
        end
        
        
    else
        
        for i = start:18 + start - 1
            
            
            if i <=18
                if whatisaboverandomtheta(i)>0
                    countessthetaa = countessthetaa + 1;
                    tocounttheta = tocounttheta + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandomtheta(i);
                    if i == 18 + start - 1
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        endpointstheta2(zaehlerendpointstheta) = i;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocounttheta ~=0
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                        tocounttheta = 0;
                        endpointstheta2(zaehlerendpointstheta) = i-1;
                        zaehlerendpointstheta = zaehlerendpointstheta + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            else
                
                zaehler_start = i - 18;
                if whatisaboverandomtheta(zaehler_start)>0
                    countessthetaa = countessthetaa + 1;
                    tocounttheta = tocounttheta + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandomtheta(zaehler_start);
                    if i == 18 + start - 1
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        endpointstheta2(zaehlerendpointstheta) = i ;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocounttheta ~=0
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                        tocounttheta = 0;
                        endpointstheta2(zaehlerendpointstheta) = i -1 ;
                        zaehlerendpointstheta = zaehlerendpointstheta + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            end
            
        end
        
        
    end
    
    
    startpoints = endpointstheta2 - howlonghowoftentheta + 1;
    meanpoints = (endpointstheta2 + startpoints) / 2;
    lengthpoints = endpointstheta2 - startpoints + 1;
    
    
    distancetonext = zeros(length(startpoints),1);
    for i = 1:length(startpoints)
        
        if i == length(startpoints)
            if endpointstheta2(end) > 18
                
                distancetonext(i) = startpoints(1) - (endpointstheta2(end)-18);
            else
                distancetonext(i) = startpoints(1) - endpointstheta2(end);
            end
        else
            distancetonext(i) = startpoints(i+1) - endpointstheta2(i);
        end
    end
    
    meanpoints2 = meanpoints;
    meanpoints2(end +1) = meanpoints2(1);
    
    
    distancetomean = diff(meanpoints2);
    distancetomean(distancetomean<0) = distancetomean(distancetomean<0) + 18;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    clustertheta = {};
    
    for i = 1:length(howmuchoveritatall)
        
        tosavevariable = [];
        if endpointstheta2(i) <= 18
            
            for j = 1:length(thetadeg)
                if startpoints(i)*10 - 10 <= thetadeg(j) && thetadeg(j) <= endpointstheta2(i)*10
                    tosavevariable = [tosavevariable, j];
                    
                end
            end
            
            clustertheta{i} =  tosavevariable;
            tosavevariable = [];
            
        else
            
            for j = 1:length(thetadeg)
                if startpoints(i)*10 - 10 <= thetadeg(j) || thetadeg(j) <= (endpointstheta2(i)-18)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            tosavevariable(1)
            clustertheta{i} =  tosavevariable;
            tosavevariable = [];
            
        end
        
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    clusterthetalength =  cellfun(@length, clustertheta);
    allclusterthetainput = sum(clusterthetalength);
    clusterthetapercent = clusterthetalength / allclusterthetainput;
    
    
    
    clusterthetapercenttoallpixelspos = clusterthetalength / size(xlist3,1);
    
    arrayofclusterthetastrength = zeros(5,1);
    arrayofclusterthetasdistance = zeros(5,1);
    arrayofclusterthetas = zeros(length(clusterthetalength),3);
    arrayofclusterthetas(:,1) = clusterthetapercent;
    
    
    % maxclusterthetapercentposition = find(clusterthetapercent == max(clusterthetapercent))
    
    
    maxclusterthetapercentposition = find(clusterthetapercent == max(clusterthetapercent));
    
    if length(maxclusterthetapercentposition)>1
        maxclusterthetapercentposition = maxclusterthetapercentposition(1);
    end
    
    for i = 1:length(clusterthetapercent)
        if clusterthetapercent(i) >=0.60
            arrayofclusterthetastrength(1) = arrayofclusterthetastrength(1) +1;
        end
        if 0.4 <= clusterthetapercent(i) && clusterthetapercent(i) <0.6
            arrayofclusterthetastrength(2) = arrayofclusterthetastrength(2) +1;
        end
        if 0.2 <= clusterthetapercent(i) && clusterthetapercent(i) <0.4
            arrayofclusterthetastrength(3) = arrayofclusterthetastrength(3) +1;
        end
        if 0.1 <= clusterthetapercent(i) && clusterthetapercent(i) <0.2
            arrayofclusterthetastrength(4) = arrayofclusterthetastrength(4) +1;
        end
        if 0 <= clusterthetapercent(i) && clusterthetapercent(i) <0.1
            arrayofclusterthetastrength(5) = arrayofclusterthetastrength(5) +1;
        end
        
        if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 >180
            %  should not be possible as [0, 180]
            abseval =  180 - (abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 - 180);
            arrayofclusterthetas(i,3) = 180 - (abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 - 180);
            arrayofclusterthetas(i,2) = (meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            
            if abseval <= 45
                arrayofclusterthetasdistance(1) = arrayofclusterthetasdistance(1) + 1;
            end
            
            if abseval <= 90 && abseval > 45
                arrayofclusterthetasdistance(2) = arrayofclusterthetasdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclusterthetasdistance(3) = arrayofclusterthetasdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclusterthetasdistance(4) = arrayofclusterthetasdistance(4) + 1;
            end
            
        else
            %  arrayofclusterthetas(i,3)
            % abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10
            % meanpoints(i)
            % maxclusterthetapercentposition
            % meanpoints(maxclusterthetapercentposition)
            arrayofclusterthetas(i,3) = abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            arrayofclusterthetas(i,2) = (meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 45
                arrayofclusterthetasdistance(1) = arrayofclusterthetasdistance(1) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 90 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 45
                arrayofclusterthetasdistance(2) = arrayofclusterthetasdistance(2) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 135 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 90
                arrayofclusterthetasdistance(3) = arrayofclusterthetasdistance(3) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 180 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 135
                arrayofclusterthetasdistance(4) = arrayofclusterthetasdistance(4) + 1;
            end
        end
    end
    
    
    howmuchoveritatalltheta{uka,z} = howmuchoveritatall;
    
    percoverthetaa = countessthetaa / 18 * 100;
    percovertheta(uka, z) = percoverthetaa;
    countesstheta(uka,z) = countessthetaa;
    
    
    distancetoavvaltheta2 = sum(((data_bhistogram - randval).^2).^0.5);
    distancetoavvaltheta(uka, z) = distancetoavvaltheta2;
    
    zaehlerhowlonghowoftentheta{uka,z} = howlonghowoftentheta;
    endpointstheta{uka,z} = endpointstheta2;
    
    
    startpointstheta{uka,z} = startpoints;
    meanpointstheta{uka,z} = meanpoints;
    lengthpointstheta{uka,z} = lengthpoints;
    histogramvaluestheta(z,uka,:) =  data_bhistogram;
    distancetonexttheta{uka,z} = distancetonext;
    distancetomeantheta{uka,z} = distancetomean;
    clusteralltheta{uka,z} = clustertheta; % arrayofclusters;
    clusterlengththeta{uka,z} = clusterthetalength;
    allclusterinputtheta(uka,z) = allclusterthetainput;
    clusterpercenttheta{uka,z} =  clusterthetapercent;
    clusterpercenttoallpixelspostheta{uka,z} = clusterthetapercenttoallpixelspos;
    arrayofclusterstrengththeta(z,uka,:) = arrayofclusterthetastrength;
    arrayofclustersdistancetheta(z,uka,:) = arrayofclusterthetasdistance;
    arrayofclusterstheta{uka,z} = arrayofclusterthetas;
    
    
    
    
    %center of masked signal volume
    Mmean = [mean(pixsM(:,1)), mean(pixsM(:,2)),  mean(pixsM(:,3))];
    
    % diameter: here: usage of boundary
    pixs = [bound_x, bound_y, bound_z];
    % now in nm
    pixs2 = [(pixs(:,1)- 0.5)* pixlength_x, (pixs(:,2)- 0.5)* pixlength_y, (pixs(:,3)-0.5)* pixlength_z];
    
    distances = pdist(pixs2); % all distances are calculated
    
    aver_radius = ( (pixs2(:,1) - repmat(mean(pixsM(:,1)), size(bound_x,1),1)).^2 + (pixs2(:,2) - repmat(mean(pixsM(:,2)), size(bound_x,1),1)).^2 + (pixs2(:,3) - repmat(mean(pixsM(:,3)), size(bound_z,1),1)).^2 ).^(0.5);
    
    % as output: av_radius, max_radius, max_diameter
    
    %averaged radius
    av_radius = mean(aver_radius);
    
    %maximal diameter
    max_diameter = max(distances);
    
    
    
    %%%% later at output: normalized R evalnm calculated
    
    
    
    %%%%%
    % goal: calculate Dipole moment and its normalizations
    %Definition: Dipolmoment_norm = (q_pos*pixelvol = charge) / Q_gesamt * d / av_radius;
    
    % dipolnormalizedgeneral: if ==1: calculated by zaehler_tot/2 else:
    % zaehler_pos
    %Dipolmoment = q_pos * pixel_vol * R_evalnm;
    
    
    
    %    global buttongeneralqnormalization
    % dropdownifgeneralqnormalization = uidropdown(p2b, 'Position', [320 a(4)-870 350 40], 'Items', {'Charge normalized dependent on volume of cell (bit)', ...
    %     'Charge normalized dependent on protein distribution of cell (bit)', ...
    %     'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges', ...
    %     'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges', ...
    %     'Own max for each cell (else: dependent on bit)', ...
    %     'Own max for each cell (spread, else: dependent on bit)'}, 'ItemsData', [1 0 2 3 4 5], ...
    %     'ValueChangedFcn', @(dropdownifgeneralqnormalization, event) dropdownifgeneralqnormalization_fcn(dropdownifgeneralqnormalization, event));
    % buttongeneralqnormalization = dropdownifgeneralqnormalization.Value;
    
    if buttongeneralqnormalization == 1
        % 'Charge normalized dependent on volume of cell (bit)'
        Dipolmoment_normdav = q_pos / (zaehler_tot/2 * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (zaehler_tot/2 * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = q_pos / (zaehler_tot / 2 * (max_val - av_background - av_val) / pixel_vol);
    end
    
    if buttongeneralqnormalization == 2
        % 'Charge normalized dependent on protein distribution of cell (bit)'
        Dipolmoment_normdav = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol);
    end
    
    
    if buttongeneralqnormalization == 3
        %  'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges'
        Dipolmoment_normdav = q_pos / (qposmax * zaehler_pos)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (qposmax * zaehler_pos)  * R_evalnm / max_diameter;
        q_norm = q_pos / (qposmax * zaehler_pos);
        
    end
    
    if buttongeneralqnormalization == 4
        % 'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges'
        Dipolmoment_normdav = q_pos / (qposmax * zaehler_tot/2)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (qposmax * zaehler_tot / 2)  * R_evalnm / max_diameter;
        q_norm = q_pos / (qposmax * zaehler_tot / 2);
    end
    
    
    if buttongeneralqnormalization == 5
        % 'Own max for each cell normalized by mean value of qpos'
        Dipolmoment_normdav = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / max_diameter;
        q_norm = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2);
        
    end
    
    if buttongeneralqnormalization == 6
        %  'Own max for each cell (else: dependent on bit)'
        Dipolmoment_normdav = (q_pos + (av_val * zaehler_pos)/pixel_vol)/ (max_val / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val / pixel_vol) ;
    end
    
    Revalnmnormdav = R_evalnm / (2*av_radius);
    % favoured variant:
    Revalnmnormdmax = R_evalnm / max_diameter ;
    intensityvaluetotal(z, uka) = count_intensity;
    if buttondiameter ==1 % normalized by max diameter
        dipolmomentnormalized(z,uka) = Dipolmoment_normdmax;
        Rnormalized(z,uka) = Revalnmnormdmax;
        diameter_maxvec(z) = max_diameter;
        diameter_avvec(z) = 2* av_radius;
    else                % normalized by av diameter
        
        dipolmomentnormalized(z,uka) = Dipolmoment_normdav;
        Rnormalized(z,uka) = Revalnmnormdav;
        diameter_maxvec(z) = max_diamter;
        diameter_avvec(z) = 2* av_radius;
    end
    
    dipolmoment(z,uka,:) = q_pos * pixel_vol * (R_posnm - R_negnm);
    qnormalized(z,uka) = q_norm;
    qposvec(z,uka) = q_pos;
    numberofpixels(z) = zaehler_tot;
    numberofpixelspos(z,uka) = zaehler_pos;
    RposRmean(z, uka, :) = R_posnm - Mmean;
    RnegRmean(z, uka, :) = R_negnm - Mmean;
    RposRneg(z, uka, :) = R_posnm - R_negnm;
    alpharad = 0;
    anglealphadeg = 0;
    
    veca = R_posnm - Mmean;
    vecb = R_posnm - R_negnm;
    alpharad = acos(dot(veca, vecb) / (sqrt(dot(veca, veca)) * sqrt(dot(vecb, vecb))));
    anglealphadeg = alpharad / (2* pi()) * 360;
    
    displacementRposRnegMRposMRneg(z,uka) = sin(anglealphadeg) * norm(R_posnm - Mmean);
    displacementDipoleMomentfromMiddle(z,uka) = norm((R_posnm + R_negnm )./2 - Mmean);
end


end

% fct to calculate essential parameters for polarity quantification
function  [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, ...
    numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] = ...
    polarityquantificationnotallparameters(path, z, numberofimages, names, allchannelnames, toignore, mask, ...
    stackstotake, pixlength_x, pixlength_y, pixlength_z, pathwayexportimages, saveimagesyes, buttongeneralqnormalization, ...
    buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, ...
    qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg)
close all
global buttonimportmasksofcells

if saveimagesyes ==1 && ~isempty(pathwayexportimages)
    %save mask as tiff
    t = Tiff(strcat(pathwayexportimages, '\',string(names{z}),' Masked Cell ',num2str(z), '.tif'), 'w');
    tagstruct.ImageLength = size(mask,1);
    tagstruct.ImageWidth = size(mask,2);
    tagstruct.Photometric = Tiff.Photometric.Mask;
    tagstruct.BitsPerSample = 8;
    tagstruct.SamplesPerPixel = 1;
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.Compression = Tiff.Compression.None;
    tagstruct.Software = 'MATLAB';
    setTag(t, tagstruct)
    setTag(t, 'XResolution', pixlength_x);
    setTag(t, 'YResolution', pixlength_y);
    
    
    write(t, squeeze(im2uint8(mask(:,:,1))));
    
    for m = 2:size(mask,3)
        writeDirectory(t);
        setTag(t, tagstruct);
        write(t, squeeze(im2uint8(mask(:,:,m))));
    end
    
    close(t)
end

if  buttonimportmasksofcells == 1
    mask = mask./max(max(max(mask)));
end



% don't need whole mask:
mask_original = mask;
clear   mask
mask = mask_original(:,:,stackstotake);


mask_background = zeros(size(mask));
mask_background(mask == 0) = 1;


indices = 1:length(allchannelnames);
indices(toignore) = [];


b = imfinfo(path);
stacknum = length(stackstotake);


global bitsize14
if bitsize14 ==1
    max_val = 2^14-1;
else
    try
        if ~isempty(b(1).SampleFormat)
            if isequal(b(1).SampleFormat, "Two's complement signed integer")
                max_val = 2^(b(1).BitDepth/2) - 1;
            else
                max_val = 2^(b(1).BitDepth) - 1;
            end
            
        else
            max_val = 2^(b(1).BitDepth) - 1;
        end
    catch
        max_val = 2^(b(1).BitDepth) - 1;
    end
end


pixel_vol = pixlength_x * pixlength_y * pixlength_z;

M = zeros(b(1).Height, b(1).Width, length(stackstotake));

for uka = indices
    
    count = 1;
    
    for k = uka+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):uka+length(allchannelnames)*(stackstotake(end)-1)
        M(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    
    if saveimagesyes ==1 && ~isempty(pathwayexportimages)
        
        montage(double(M).*double(mask)./double(max(max(max(M)))));
        set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
        saveas(gcf,strcat(pathwayexportimages, '\', names{z}, allchannelnames(uka), '.png'));
        
        close all
    end
    
    av_background = 0;
    background = 0;
    count_back = 0;
    sum(sum(sum(mask_background)))
    for t = 1:stacknum
        for i = 1:size(mask_background,1)
            for j = 1:size(mask_background,2)
                
                if mask_background(i,j,t) == 1
                    background = background + double(M(i,j,t));
                    count_back = count_back + 1;
                end
                
            end
        end
    end
    % get average background by dividing total background through count
    av_background = background / count_back;
    
    % correct the signal, by subtracting the average background
    
    M = double(M) - av_background;
    
    
    bound_x = 0; %values of frontier
    bound_y = 0; % values of frontier
    bound_z = 0; % values of frontier
    
    
    for i = 1:stacknum
        
        roiboundaries = bwboundaries(mask(:,:,i));
        
        try xy = roiboundaries{1};
            x = xy(:,2);
            y = xy(:,1);
            bound_x = [bound_x; x];
            bound_y = [bound_y; y];
            bound_z = [bound_z; repelem(i, size(xy,1))' ];
        catch
        end
        
    end
    
    bound_x(1) = [];
    bound_y(1) = [];
    bound_z(1) = [];
    
    % Sum over all signal values, divide by new count to get average value
    
    value = 0;
    
    count = 0;
    
    
    
    
    for t = 1:stacknum
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    value = value + double(M(j,k,t));
                    count = count + 1;
                    
                    
                end
            end
        end
    end
    
    
    
    count_intensity = value;
    
    
    
    
    av_val = value/count;
    
    
    avintensity(z, uka) = av_val;
    
    global buttoneachcellnormalizedtoaveragevalue1
    if buttoneachcellnormalizedtoaveragevalue1 ==1
        count = 0;
        value = 0;
        M = double(M)./av_val;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    global buttoneachcellchargenormalizedcorrespondingtototalvalue1
    if buttoneachcellchargenormalizedcorrespondingtototalvalue1 == 1
        count = 0;
        value = 0;
        M = double(M)./count_intensity;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    
    
    
    
    if buttongeneralqnormalization == 6
        max_val = av_val * count;
    end
    
    %%%%%%%
    % goal: get 'charge' density for every pixel of masked signal area
    
    clear mask_pos;
    clear mask_neg;
    clear N;
    clear r_posx;
    clear r_posy;
    clear r_posz;
    clear q_pos;
    clear r_negx;
    clear r_negy;
    clear r_negz;
    clear q_neg;
    
    r_posx = zeros(1);
    r_posy = zeros(1);
    r_posz = zeros(1);
    q_pos = zeros(1);
    
    r_negx = zeros(1);
    r_negy = zeros(1);
    r_negz = zeros(1);
    q_neg = zeros(1);
    
    zaehler_pos = 0;
    zaehler_neg = 0;
    zaehler_tot = 0;
    
    
    
    if buttongeneralqnormalization == 3 || buttongeneralqnormalization == 4
        qposmax = 0;
    end
    
    for t = 1:stacknum
        
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    N(j,k,t) = (double(M(j,k,t)) - double(av_val))/pixel_vol;
                    % N: 3D Matrix with 'charge' density values
                    zaehler_tot = zaehler_tot + 1; %total count of voxels
                    
                    if N(j,k,t)>0 % for positive 'charge' density
                        
                        r_posx = r_posx + j * N(j,k,t); % here: sum(q * <r>)
                        r_posy = r_posy + k * N(j,k,t); % here: sum(q * <r>)
                        r_posz = r_posz + t * N(j,k,t); % here: sum(q * <r>)
                        q_pos = q_pos + N(j,k,t); % here: sum(q)
                        
                        % sum(q * <r>) / sum(q) later calculated;
                        
                        zaehler_pos = zaehler_pos + 1; % important later for normalization of Dipole Moment
                        % list_pos(zaehler_pos,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                        
                        
                        
                        if buttongeneralqnormalization == 3 || buttongeneralqnormalization == 4
                            if N(j,k,t) > qposmax
                                qposmax = N(j,k,t);
                            end
                        end
                        
                        
                    end
                    
                    if N(j,k,t)<0 % if negative density
                        % case == 0: no impact on where high or low charge, left out
                        
                        r_negx = r_negx + j * N(j,k,t);
                        r_negy = r_negy + k * N(j,k,t);
                        r_negz = r_negz + t * N(j,k,t);
                        q_neg = q_neg + N(j,k,t);
                        zaehler_neg = zaehler_neg + 1;
                        
                    end % for == 0: no impact on where high or low charge, left out
                end
            end
        end
    end
    
    
    
    
    % sum(q * <r>) / sum(q)
    % as Matrix-definition to x and y is different:
    % need to adjust for it and change x and y
    
    
    
    R_pos = [r_posy/q_pos, r_posx/q_pos, r_posz/q_pos];
    % weighted mean position of positive 'charge' density
    
    R_neg = [r_negy/q_neg, r_negx/q_neg, r_negz/q_neg];
    % weighted mean position of negative 'charge' denstiy
    
    
    
    %R_eval = norm(R_pos - R_neg);
    % distance between R_pos and R_neg
    
    % now: in nm
    % herefore: defined center of voxel as the position of value.
    % thus, always -0.5 pixlength
    
    R_posnm = [ (R_pos(1) -0.5) * pixlength_x, (R_pos(2)- 0.5) * pixlength_y, (R_pos(3) - 0.5) * pixlength_z];
    
    R_negnm = [ (R_neg(1)-0.5) * pixlength_x, (R_neg(2) - 0.5)* pixlength_y, (R_neg(3) - 0.5) * pixlength_z];
    
    R_evalnm = norm(R_posnm - R_negnm);
    
    
    %%%%%%%%%%%%%
    
    % goal: get the center of volume of interest and the maximal diameter / average radius ,...
    
    % restructure the mask with its 0 and 1 values into 3D coordinates of the
    % positions of the 1 values
    pixList = regionprops(mask, 'PixelList'); % (struct, 3D Matrix with doubles)
    pixsM2 = pixList.PixelList; % values in pixel,
    %through changing from matrix to structure: 1st column x, 2nd column y, 3rd
    %column z
    pixsM(:,1) = ((pixsM2(:,1)-0.5)* pixlength_x); % values in nm
    pixsM(:,2) = ((pixsM2(:,2)-0.5)* pixlength_y); % values in nm
    
    global buttonsinglelayer
    if buttonsinglelayer == 0
        try pixsM(:,3) = ((pixsM2(:,3)-0.5)* pixlength_z); % values in nm
        catch
            pixsM(:,3) = ones(size(pixsM,1),1);
        end
    else
        pixsM(:,3) = ones(size(pixsM,1),1);
    end
    
    
    %center of masked signal volume
    Mmean = [mean(pixsM(:,1)), mean(pixsM(:,2)),  mean(pixsM(:,3))];
    
    % diameter: here: usage of boundary
    pixs = [bound_x, bound_y, bound_z];
    % now in nm
    pixs2 = [(pixs(:,1)- 0.5)* pixlength_x, (pixs(:,2)- 0.5)* pixlength_y, (pixs(:,3)-0.5)* pixlength_z];
    
    distances = pdist(pixs2); % all distances are calculated
    
    aver_radius = ( (pixs2(:,1) - repmat(mean(pixsM(:,1)), size(bound_x,1),1)).^2 + (pixs2(:,2) - repmat(mean(pixsM(:,2)), size(bound_x,1),1)).^2 + (pixs2(:,3) - repmat(mean(pixsM(:,3)), size(bound_z,1),1)).^2 ).^(0.5);
    
    % as output: av_radius, max_radius, max_diameter
    
    %averaged radius
    av_radius = mean(aver_radius);
    
    %maximal diameter
    max_diameter = max(distances);
    
    
    
    %%%% later at output: normalized R evalnm calculated
    
    
    
    %%%%%
    % goal: calculate Dipole moment and its normalizations
    %Definition: Dipolmoment_norm = (q_pos*pixelvol = charge) / Q_gesamt * d / av_radius;
    
    % dipolnormalizedgeneral: if ==1: calculated by zaehler_tot/2 else:
    % zaehler_pos
    %Dipolmoment = q_pos * pixel_vol * R_evalnm;
    
    
    if buttongeneralqnormalization == 1
        % 'Charge normalized dependent on volume of cell (bit)'
        Dipolmoment_normdav = q_pos / (zaehler_tot/2 * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (zaehler_tot/2 * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = q_pos / (zaehler_tot / 2 * (max_val - av_background - av_val) / pixel_vol);
    end
    
    if buttongeneralqnormalization == 2
        % 'Charge normalized dependent on protein distribution of cell (bit)'
        Dipolmoment_normdav = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = q_pos / (zaehler_pos * (max_val - av_background - av_val) / pixel_vol);
    end
    
    
    if buttongeneralqnormalization == 3
        %  'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges'
        Dipolmoment_normdav = q_pos / (qposmax * zaehler_pos)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (qposmax * zaehler_pos)  * R_evalnm / max_diameter;
        q_norm = q_pos / (qposmax * zaehler_pos);
    end
    
    
    if buttongeneralqnormalization == 4
        % 'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges'
        Dipolmoment_normdav = q_pos / (qposmax * zaehler_tot/2)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (qposmax * zaehler_tot / 2)  * R_evalnm / max_diameter;
        q_norm = q_pos / (qposmax * zaehler_tot / 2);
        
    end
    
    
    if buttongeneralqnormalization == 5
        % 'Own max for each cell normalized by mean value of q_pos'
        Dipolmoment_normdav = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / max_diameter;
        q_norm = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2);
    end
    
    if buttongeneralqnormalization == 6
        %  'Own max for each cell (else: dependent on bit)'
        Dipolmoment_normdav = (q_pos + (av_val * zaehler_pos)/pixel_vol)/ (max_val / pixel_vol)  * R_evalnm / (2*av_radius);
        Dipolmoment_normdmax = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val / pixel_vol)  * R_evalnm / max_diameter;
        q_norm = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val / pixel_vol) ;
    end
    
    
    Revalnmnormdav = R_evalnm / (2*av_radius);
    % favoured variant:
    Revalnmnormdmax = R_evalnm / max_diameter ;
    intensityvaluetotal(z, uka) = count_intensity;
    if buttondiameter ==1 % normalized by max diameter
        dipolmomentnormalized(z,uka) = Dipolmoment_normdmax;
        Rnormalized(z,uka) = Revalnmnormdmax;
        diameter_maxvec(z) = max_diameter;
        diameter_avvec(z) = 2* av_radius;
    else                % normalized by av diameter
        
        dipolmomentnormalized(z,uka) = Dipolmoment_normdav;
        Rnormalized(z,uka) = Revalnmnormdav;
        diameter_maxvec(z) = max_diameter;
        diameter_avvec(z) = 2* av_radius;
    end
    
    dipolmoment(z,uka,:) = q_pos * pixel_vol * (R_posnm - R_negnm);
    qnormalized(z,uka) = q_norm;
    qposvec(z,uka) = q_pos;
    numberofpixels(z) = zaehler_tot;
    numberofpixelspos(z,uka) = zaehler_pos;
    RposRmean(z, uka, :) = R_posnm - Mmean;
    RnegRmean(z, uka, :) = R_negnm - Mmean;
    RposRneg(z, uka, :) = R_posnm - R_negnm;
    
end


end


% fct for adapting of shown cell images to a change in slidervalue for Tab 3
% different possibilities: just showing cell images of input
% (buttonforapplythreshold == 0) or applying threshold
% (buttonforapplythreshold == 1)
% buttonforjuststructure is within preview fct (shows just automatically
% chosen cell layers)
function SliderValueChanged2(app, event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin)
global slidervalue2 names pathwayimport allchannelnames toignore channelnames numberofchannels ...
    whichchannelforcelldetect numberofimages channeltoshowval2 slidervalue_before buttonallnormalizations ...
    numberofpixels_finished


value = round(app.Value);
app.Value = value;



try app.Limits = [1 numberofimages];
catch
    app.Limits = [1 2];
end



if length(app.Limits(1):1:app.Limits(2)) < 10
    app.MajorTicks = app.Limits(1):1:app.Limits(2);
    app.MinorTicks = [];
end

if (10 < length(app.Limits(1):1:app.Limits(2))) &&  ( length(app.Limits(1):1:app.Limits(2))< 100)
    app.MajorTicks = app.Limits(1):10:app.Limits(2);
    app.MinorTicks = app.Limits(1):1:app.Limits(2);
end

if length(app.Limits(1):1:app.Limits(2)) > 100
    app.MajorTicks = app.Limits(1):100:app.Limits(2);
    app.MinorTicks = app.Limits(1):10:app.Limits(2);
end

checkifrerun.Value = 0;
if buttonallnormalizations == 0
    global dipolmomentnormalized_finished Rnormalized_finished qnormalized_finished
end

if buttonallnormalizations == 1
    global dipolmomentnormalized11_finished dipolmomentnormalized12_finished dipolmomentnormalized21_finished ...
        dipolmomentnormalized22_finished dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
        dipolmomentnormalized14_finished dipolmomentnormalized24_finished dipolmomentnormalized15_finished ...
        dipolmomentnormalized25_finished dipolmomentnormalized16_finished dipolmomentnormalized26_finished  ...
        Rnormalized1_finished Rnormalized2_finished...
        qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
        qnormalized4_finished qnormalized5_finished qnormalized6_finished
    
end

global dipolmoment_finished diameter_maxvecfinished diameter_avvecfinished...
    qposvec_finished numberofpixels_finished ...
    numberofpixelspos_finished buttonforcellsviewbeforerunbyexport ...
    buttonimportsavingparametersofcells buttonimportmasksofcells

if isempty(buttonimportmasksofcells)
    buttonimportmasksofcells2 = 0;
else
    buttonimportmasksofcells2 = buttonimportmasksofcells;
end


if isempty( buttonimportsavingparametersofcells)
    buttonimportsavingparametersofcells2 = 0;
else
    buttonimportsavingparametersofcells2 = buttonimportsavingparametersofcells;
end


if buttonimportsavingparametersofcells2 == 1 && buttonimportmasksofcells2 == 1
    buttonimportmasksofcells2 = 0;
end


slidervalue2 = value;
efcellnumbershownandcanbeputin.Value = slidervalue2;
names
if ~isempty(names)
    'poss2'
    
    if  buttonforcellsviewbeforerunbyexport == 1 || buttonimportsavingparametersofcells2 == 1
        path = strcat(pathwayimport,'\', names{value});
        if isempty(whichchannelforcelldetect)
            whichchannelforcelldetect = 1;
        end
        
        if isempty(channeltoshowval2) || channeltoshowval2 == 0 %|| channeltoshowval > length(allchannelnames)
            channeltoshowval2 = 1;
        end
        
        
        if channeltoshowval2 <= length(allchannelnames)
            
            global savingofsettingsofcertaincells
            
            if isempty(savingofsettingsofcertaincells)
                savingofsettingsofcertaincells = cell(numberofimages,1);
            end
            
            
            if ~isempty(savingofsettingsofcertaincells{slidervalue2})
                
                
                [channeltoshowval3rerun, buttonforcomparisonrerun,  buttonforjuststructurererun, ...
                    frontierthrshK1rerun, frontierthrshK2rerun ,anpassungotsuthreshK1rerun , ...
                    anpassungotsuthreshK2rerun , anpassungotsuthreshK3rerun, frontier3rerun,...
                    anpassungotsuthreshKsubtrrerun,thresholdnumpixelsforrangefiltrerun,thresholdnumpixelsforrangefiltrerunmaximum, ...
                    anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun,...
                    threshforveryfaintrerun, anpassungintensotsufrontier1rerun,...
                    buttonforoutoffocuslightrerun, buttontoshowrerun, tomodulatererun, ...
                    maxnumofimagescellrerun, minnumofimagescellrerun, maxpixnumlayerrerun, ...
                    minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, maxnumpixelwholecellrerun, ...
                    buttonifconfocalrerun ] =savingofsettingsofcertaincells{slidervalue2}{1:27};
                
                
                frontierthrshK1a = frontierthrshK1rerun;
                
                frontierthrshK2a= frontierthrshK2rerun;
                
                anpassungotsuthreshK1a = anpassungotsuthreshK1rerun;
                
                anpassungotsuthreshK2a = anpassungotsuthreshK2rerun;
                
                anpassungotsuthreshK3a = anpassungotsuthreshK3rerun;
                
                frontier3a = frontier3rerun;
                
                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtrrerun;
                
                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefiltrerun;
                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltrerunmaximum;
                anpassungotsuthresh1a = anpassungotsuthresh1rerun;
                
                anpassungotsuthresh2a = anpassungotsuthresh2rerun;
                
                frontieraddition1a = frontieraddition1rerun;
                
                threshforveryfainta = threshforveryfaintrerun;
                
                anpassungintensotsufrontier1a = anpassungintensotsufrontier1rerun;
                
                buttonforoutoffocuslighta = buttonforoutoffocuslightrerun;
                
                
                
                tomodulatea = tomodulatererun;
                
                maxnumofimagescella = maxnumofimagescellrerun;
                
                minnumofimagescella = minnumofimagescellrerun;
                
                maxpixnumlayera = maxpixnumlayerrerun;
                
                minpixnumlayera = minpixnumlayerrerun;
                
                minnumberpixelstodetectforcella = minnumberpixelstodetectforcellrerun;
                
                maxnumpixelwholecella = maxnumpixelwholecellrerun;
                
                buttonifconfocala = buttonifconfocalrerun;
                
                
                
            else
                
                global  names  pathwayimport allchannelnames toignore channelnames numberofchannels ...
                    whichchannelforcelldetect numberofimages frontierthrshK1 frontierthrshK2...
                    anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                    anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
                    anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 threshforveryfaint ...
                    anpassungintensotsufrontier1 buttonforoutoffocuslight tomodulate...
                    maxnumofimagescell minnumofimagescell  maxpixnumlayer minpixnumlayer ...
                    minnumberpixelstodetectforcell maxnumpixelwholecell buttonifconfocal
                
                
                
                frontierthrshK1a = frontierthrshK1;
                
                frontierthrshK2a= frontierthrshK2;
                
                anpassungotsuthreshK1a = anpassungotsuthreshK1;
                
                anpassungotsuthreshK2a = anpassungotsuthreshK2;
                
                anpassungotsuthreshK3a = anpassungotsuthreshK3;
                
                frontier3a = frontier3;
                
                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtr;
                
                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefilt;
                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltmaximum;
                anpassungotsuthresh1a = anpassungotsuthresh1;
                
                anpassungotsuthresh2a = anpassungotsuthresh2;
                
                frontieraddition1a = frontieraddition1;
                
                threshforveryfainta = threshforveryfaint;
                
                anpassungintensotsufrontier1a = anpassungintensotsufrontier1;
                
                buttonforoutoffocuslighta = buttonforoutoffocuslight;
                
                
                
                tomodulatea = tomodulate;
                
                maxnumofimagescella = maxnumofimagescell;
                
                minnumofimagescella = minnumofimagescell;
                
                maxpixnumlayera = maxpixnumlayer;
                minpixnumlayera = minpixnumlayer;
                minnumberpixelstodetectforcella = minnumberpixelstodetectforcell;
                
                maxnumpixelwholecella = maxnumpixelwholecell;
                
                buttonifconfocala = buttonifconfocal;
                
            end
            
            global buttonforjuststructure2 buttonforcomparison2 ...
                buttonifcellrecognitionseveralchannels channelsforcelldetection ...
                mask_all stackstotakeforcertainimagenumber2
            
            runyes = 0;
            buttontoshowa = 0;
            
            try   [mask imagetoshow stackstotake] = previewcell(path, numberofimages, allchannelnames,...
                    whichchannelforcelldetect, frontierthrshK1a,frontierthrshK2a, anpassungotsuthreshK1a,...
                    anpassungotsuthreshK2a, anpassungotsuthreshK3a, frontier3a, anpassungotsuthreshKsubtra,...
                    thresholdnumpixelsforrangefilta, thresholdnumpixelsforrangefiltmaximuma, anpassungotsuthresh1a, anpassungotsuthresh2a,...
                    frontieraddition1a, threshforveryfainta,anpassungintensotsufrontier1a, ...
                    buttonforoutoffocuslighta, buttontoshowa, tomodulatea, maxnumofimagescella, ...
                    minnumofimagescella, maxpixnumlayera, minpixnumlayera, minnumberpixelstodetectforcella, ...
                    maxnumpixelwholecella, channeltoshowval2, buttonforjuststructure2, p3_feedbackfield,...
                    ax2 , buttonforcomparison2,buttonifconfocala, runyes, checkoverviewchannels2.Value, ...
                    buttonifcellrecognitionseveralchannels, channelsforcelldetection) ;
                
            catch
                mask = 0;
            end
            
            if sum(sum(sum(mask)))> 0
                mask_all(slidervalue2) = 1;
            end
            
            stackstotakeforcertainimagenumber2 = {slidervalue2, stackstotake, mask};
            
            
            
            
        else
            
            p3_feedbackfield.Value = 'No valid channel number';
        end
        
        
        % buttonforapplythreshold ~= 0
        % so here: need to apply now: buttonforapplythreshold
        
        
        updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
        
        global nottotake
        
        checkifnottotakeresult.Value = nottotake(slidervalue2);
        
        
    end
    
    
    
    if  buttonforcellsviewbeforerunbyexport == 0 ||  buttonimportmasksofcells2 == 1
        if sum(sum(numberofpixels_finished)) == 0
            p3_feedbackfield.Value = 'Not run through for results yet';
            
        else
            global nottotake rerunchecked
            
            try
                checkifnottotakeresult.Value = nottotake(slidervalue2);
            catch
                checkifnottotakeresult.Value = 0;
            end
            
            
            
            if buttonallnormalizations == 0
                
                if ~isempty(dipolmomentnormalized_finished) && size(dipolmomentnormalized_finished,1) >= slidervalue2
                    
                    if sum(dipolmomentnormalized_finished(slidervalue2,:)) ==0 % &&   buttonforcellsviewbeforerunbyexport ==0
                        p3_feedbackfield.Value = 'Not run through the images or wrong settings so that no cell detected';
                        
                        
                        if sum(dipolmomentnormalized_finished(:,:)) ~=0
                            
                            p3_feedbackfield.Value = 'No cell detected';
                            updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
                            
                            emptyimage = zeros(500, 500);
                            imshow(emptyimage, 'Parent', ax2);
                            
                        end
                        
                    else
                        
                        path = strcat(pathwayimport,'\', names{value});
                        if isempty(whichchannelforcelldetect)
                            whichchannelforcelldetect = 1;
                        end
                        
                        if isempty(channeltoshowval2) || channeltoshowval2 == 0 %|| channeltoshowval > length(allchannelnames)
                            channeltoshowval2 = 1;
                        end
                        
                        if channeltoshowval2 <= length(allchannelnames)
                            
                            global savingofsettingsofcertaincells
                            
                            if isempty(savingofsettingsofcertaincells)
                                savingofsettingsofcertaincells = cell(numberofimages,1);
                            end
                            
                            
                            
                            
                            if ~isempty(savingofsettingsofcertaincells{slidervalue2})
                                
                                
                                [channeltoshowval3rerun, buttonforcomparisonrerun, buttonforjuststructurererun, ...
                                    frontierthrshK1rerun, frontierthrshK2rerun, anpassungotsuthreshK1rerun, ...
                                    anpassungotsuthreshK2rerun , anpassungotsuthreshK3rerun, frontier3rerun,...
                                    anpassungotsuthreshKsubtrrerun,thresholdnumpixelsforrangefiltrerun, thresholdnumpixelsforrangefiltrerunmaximum,...
                                    anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
                                    threshforveryfaintrerun, anpassungintensotsufrontier1rerun, ...
                                    buttonforoutoffocuslightrerun, buttontoshowrerun, tomodulatererun, ...
                                    maxnumofimagescellrerun, minnumofimagescellrerun, maxpixnumlayerrerun, ...
                                    minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, ...
                                    maxnumpixelwholecellrerun,buttonifconfocalrerun ] = ...
                                    savingofsettingsofcertaincells{slidervalue2}{1:27};
                                
                                
                                frontierthrshK1a = frontierthrshK1rerun;
                                
                                frontierthrshK2a= frontierthrshK2rerun;
                                
                                anpassungotsuthreshK1a = anpassungotsuthreshK1rerun;
                                
                                anpassungotsuthreshK2a = anpassungotsuthreshK2rerun;
                                
                                anpassungotsuthreshK3a = anpassungotsuthreshK3rerun;
                                
                                frontier3a = frontier3rerun;
                                
                                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtrrerun;
                                
                                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefiltrerun;
                                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltrerunmaximum;
                                
                                anpassungotsuthresh1a = anpassungotsuthresh1rerun;
                                
                                anpassungotsuthresh2a = anpassungotsuthresh2rerun;
                                
                                frontieraddition1a = frontieraddition1rerun;
                                
                                threshforveryfainta = threshforveryfaintrerun;
                                
                                anpassungintensotsufrontier1a = anpassungintensotsufrontier1rerun;
                                
                                buttonforoutoffocuslighta = buttonforoutoffocuslightrerun;
                                
                                
                                
                                tomodulatea = tomodulatererun;
                                
                                maxnumofimagescella = maxnumofimagescellrerun;
                                
                                minnumofimagescella = minnumofimagescellrerun;
                                
                                maxpixnumlayera = maxpixnumlayerrerun;
                                
                                minpixnumlayera = minpixnumlayerrerun;
                                
                                minnumberpixelstodetectforcella = minnumberpixelstodetectforcellrerun;
                                
                                maxnumpixelwholecella = maxnumpixelwholecellrerun;
                                
                                buttonifconfocala = buttonifconfocalrerun;
                                
                            else
                                
                                global  names  pathwayimport allchannelnames toignore channelnames numberofchannels  whichchannelforcelldetect numberofimages ...
                                    frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                                    anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum...
                                    anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 threshforveryfaint anpassungintensotsufrontier1 ...
                                    buttonforoutoffocuslight buttontoshow tomodulate maxnumofimagescell minnumofimagescell  maxpixnumlayer minpixnumlayer ...
                                    minnumberpixelstodetectforcell maxnumpixelwholecell buttonifconfocal
                                
                                
                                
                                frontierthrshK1a = frontierthrshK1;
                                
                                frontierthrshK2a= frontierthrshK2;
                                
                                anpassungotsuthreshK1a = anpassungotsuthreshK1;
                                
                                anpassungotsuthreshK2a = anpassungotsuthreshK2;
                                
                                anpassungotsuthreshK3a = anpassungotsuthreshK3;
                                
                                frontier3a = frontier3;
                                
                                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtr;
                                
                                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefilt;
                                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltmaximum;
                                anpassungotsuthresh1a = anpassungotsuthresh1;
                                
                                anpassungotsuthresh2a = anpassungotsuthresh2;
                                
                                frontieraddition1a = frontieraddition1;
                                
                                threshforveryfainta = threshforveryfaint;
                                
                                anpassungintensotsufrontier1a = anpassungintensotsufrontier1;
                                
                                buttonforoutoffocuslighta = buttonforoutoffocuslight;
                                
                                
                                
                                tomodulatea = tomodulate;
                                
                                maxnumofimagescella = maxnumofimagescell;
                                
                                minnumofimagescella = minnumofimagescell;
                                
                                maxpixnumlayera = maxpixnumlayer;
                                
                                minpixnumlayera = minpixnumlayer;
                                
                                minnumberpixelstodetectforcella = minnumberpixelstodetectforcell;
                                
                                maxnumpixelwholecella = maxnumpixelwholecell;
                                
                                buttonifconfocala = buttonifconfocal;
                                
                            end
                            
                            global buttonforjuststructure2 buttonforcomparison2 ...
                                buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
                                stackstotakeforcertainimagenumber2
                            
                            runyes = 0;
                            buttontoshowa = 0;
                            [mask imagetoshow stackstotake] =  previewcell(path, numberofimages, ...
                                allchannelnames, whichchannelforcelldetect,   frontierthrshK1a, ...
                                frontierthrshK2a, anpassungotsuthreshK1a, anpassungotsuthreshK2a,...
                                anpassungotsuthreshK3a, frontier3a, anpassungotsuthreshKsubtra, ...
                                thresholdnumpixelsforrangefilta, thresholdnumpixelsforrangefiltmaximuma, anpassungotsuthresh1a, ...
                                anpassungotsuthresh2a, frontieraddition1a, threshforveryfainta, ...
                                anpassungintensotsufrontier1a, buttonforoutoffocuslighta, buttontoshowa,...
                                tomodulatea, maxnumofimagescella , minnumofimagescella, maxpixnumlayera, minpixnumlayera,...
                                minnumberpixelstodetectforcella, maxnumpixelwholecella, channeltoshowval2,...
                                buttonforjuststructure2, p3_feedbackfield, ax2, buttonforcomparison2, ...
                                buttonifconfocala, runyes, checkoverviewchannels2.Value, ...
                                buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
                            
                            stackstotakeforcertainimagenumber2 = {slidervalue2, stackstotake, mask};
                            
                            
                            
                        else
                            
                            p3_feedbackfield.Value = 'No valid channel number';
                        end
                        
                        
                        
                        
                        
                        
                        updateresultstable(tableresults, slidervalue2, p3_feedbackfield);
                        p3_feedbackfield.Value = '';
                    end
                else
                    p3_feedbackfield.Value = 'Normalized absolute Dipole Moment is empty or initialized with NaN. Thus, no runthrough has taken place.';
                end
            end
            
            
            if buttonallnormalizations == 1
                
                if ~isempty(dipolmomentnormalized11_finished) && size(dipolmomentnormalized11_finished,1) >= slidervalue2
                    
                    if sum(dipolmomentnormalized11_finished(slidervalue2,:)) ==0 % &&   buttonforcellsviewbeforerunbyexport ==0
                        p3_feedbackfield.Value = 'Not run through the images or wrong settings so that no cell detected';
                        
                        
                        if sum(dipolmomentnormalized11_finished(:,:)) ~=0
                            
                            p3_feedbackfield.Value = 'No cell detected';
                            updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
                            
                            emptyimage = zeros(500, 500);
                            imshow(emptyimage, 'Parent', ax2);
                            
                        end
                        
                    else
                        
                        path = strcat(pathwayimport,'\', names{value});
                        if isempty(whichchannelforcelldetect)
                            whichchannelforcelldetect = 1;
                        end
                        
                        if isempty(channeltoshowval2) || channeltoshowval2 == 0 %|| channeltoshowval > length(allchannelnames)
                            channeltoshowval2 = 1;
                        end
                        
                        if channeltoshowval2 <= length(allchannelnames)
                            
                            global savingofsettingsofcertaincells
                            
                            if isempty(savingofsettingsofcertaincells)
                                savingofsettingsofcertaincells = cell(numberofimages,1);
                            end
                            
                            
                            
                            if ~isempty(savingofsettingsofcertaincells{slidervalue2})
                                
                                
                                [channeltoshowval3rerun, buttonforcomparisonrerun, buttonforjuststructurererun, ...
                                    frontierthrshK1rerun, frontierthrshK2rerun, anpassungotsuthreshK1rerun, ...
                                    anpassungotsuthreshK2rerun , anpassungotsuthreshK3rerun, frontier3rerun,...
                                    anpassungotsuthreshKsubtrrerun,thresholdnumpixelsforrangefiltrerun, thresholdnumpixelsforrangefiltrerunmaximum,...
                                    anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
                                    threshforveryfaintrerun, anpassungintensotsufrontier1rerun, ...
                                    buttonforoutoffocuslightrerun, buttontoshowrerun, tomodulatererun, ...
                                    maxnumofimagescellrerun, minnumofimagescellrerun, maxpixnumlayerrerun, ...
                                    minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, ...
                                    maxnumpixelwholecellrerun,buttonifconfocalrerun ] = ...
                                    savingofsettingsofcertaincells{slidervalue2}{1:27};
                                
                                
                                frontierthrshK1a = frontierthrshK1rerun;
                                
                                frontierthrshK2a= frontierthrshK2rerun;
                                
                                anpassungotsuthreshK1a = anpassungotsuthreshK1rerun;
                                
                                anpassungotsuthreshK2a = anpassungotsuthreshK2rerun;
                                
                                anpassungotsuthreshK3a = anpassungotsuthreshK3rerun;
                                
                                frontier3a = frontier3rerun;
                                
                                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtrrerun;
                                
                                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefiltrerun;
                                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltrerunmaximum;
                                anpassungotsuthresh1a = anpassungotsuthresh1rerun;
                                
                                anpassungotsuthresh2a = anpassungotsuthresh2rerun;
                                
                                frontieraddition1a = frontieraddition1rerun;
                                
                                threshforveryfainta = threshforveryfaintrerun;
                                
                                anpassungintensotsufrontier1a = anpassungintensotsufrontier1rerun;
                                
                                buttonforoutoffocuslighta = buttonforoutoffocuslightrerun;
                                
                                
                                
                                tomodulatea = tomodulatererun;
                                
                                maxnumofimagescella = maxnumofimagescellrerun;
                                
                                minnumofimagescella = minnumofimagescellrerun;
                                
                                maxpixnumlayera = maxpixnumlayerrerun;
                                
                                minpixnumlayera = minpixnumlayerrerun;
                                
                                minnumberpixelstodetectforcella = minnumberpixelstodetectforcellrerun;
                                
                                maxnumpixelwholecella = maxnumpixelwholecellrerun;
                                
                                buttonifconfocala = buttonifconfocalrerun;
                                
                            else
                                
                                global  names  pathwayimport allchannelnames toignore channelnames numberofchannels  whichchannelforcelldetect numberofimages ...
                                    frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                                    anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum ...
                                    anpassungotsuthresh1 anpassungotsuthresh2 frontieraddition1 threshforveryfaint anpassungintensotsufrontier1 ...
                                    buttonforoutoffocuslight buttontoshow tomodulate maxnumofimagescell minnumofimagescell  maxpixnumlayer minpixnumlayer ...
                                    minnumberpixelstodetectforcell maxnumpixelwholecell buttonifconfocal
                                
                                
                                
                                frontierthrshK1a = frontierthrshK1;
                                
                                frontierthrshK2a= frontierthrshK2;
                                
                                anpassungotsuthreshK1a = anpassungotsuthreshK1;
                                
                                anpassungotsuthreshK2a = anpassungotsuthreshK2;
                                
                                anpassungotsuthreshK3a = anpassungotsuthreshK3;
                                
                                frontier3a = frontier3;
                                
                                anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtr;
                                
                                thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefilt;
                                thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltmaximum;
                                anpassungotsuthresh1a = anpassungotsuthresh1;
                                
                                anpassungotsuthresh2a = anpassungotsuthresh2;
                                
                                frontieraddition1a = frontieraddition1;
                                
                                threshforveryfainta = threshforveryfaint;
                                
                                anpassungintensotsufrontier1a = anpassungintensotsufrontier1;
                                
                                buttonforoutoffocuslighta = buttonforoutoffocuslight;
                                
                                %buttontoshowa = buttontoshowrerun; % ?
                                
                                tomodulatea = tomodulate;
                                
                                maxnumofimagescella = maxnumofimagescell;
                                
                                minnumofimagescella = minnumofimagescell;
                                
                                maxpixnumlayera = maxpixnumlayer;
                                
                                minpixnumlayera = minpixnumlayer;
                                
                                minnumberpixelstodetectforcella = minnumberpixelstodetectforcell;
                                
                                maxnumpixelwholecella = maxnumpixelwholecell;
                                
                                buttonifconfocala = buttonifconfocal;
                                
                            end
                            
                            global buttonforjuststructure2 buttonforcomparison2 ...
                                buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
                                stackstotakeforcertainimagenumber2
                            
                            runyes = 0;
                            buttontoshowa = 0;
                            [mask imagetoshow stackstotake] =  previewcell(path, numberofimages, ...
                                allchannelnames, whichchannelforcelldetect,   frontierthrshK1a, ...
                                frontierthrshK2a, anpassungotsuthreshK1a, anpassungotsuthreshK2a,...
                                anpassungotsuthreshK3a, frontier3a, anpassungotsuthreshKsubtra, ...
                                thresholdnumpixelsforrangefilta, thresholdnumpixelsforrangefiltmaximuma, anpassungotsuthresh1a, ...
                                anpassungotsuthresh2a, frontieraddition1a, threshforveryfainta, ...
                                anpassungintensotsufrontier1a, buttonforoutoffocuslighta, buttontoshowa,...
                                tomodulatea, maxnumofimagescella , minnumofimagescella, maxpixnumlayera, minpixnumlayera,...
                                minnumberpixelstodetectforcella, maxnumpixelwholecella, channeltoshowval2,...
                                buttonforjuststructure2, p3_feedbackfield, ax2, buttonforcomparison2, ...
                                buttonifconfocala, runyes, checkoverviewchannels2.Value, ...
                                buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
                            
                            stackstotakeforcertainimagenumber2 = {slidervalue2, stackstotake, mask};
                            
                            
                            
                        else
                            
                            p3_feedbackfield.Value = 'No valid channel number';
                        end
                        
                        
                        
                        
                        updateresultstable(tableresults, slidervalue2, p3_feedbackfield);
                        p3_feedbackfield.Value = '';
                    end
                else
                    p3_feedbackfield.Value = 'Normalized absolute Dipole Moment is empty or initialized with NaN. Thus, no runthrough has taken place.';
                end
            end
            
            
            
            
            
        end
    end
    
    slidervalue_before = slidervalue2;
    
    
else
    p3_feedbackfield.Value = 'No runthrough done yet';
    
end

end


% fct to switch viewed channel and refresh cell view in Tab 2
function channeltoshow2(efp3channeltoshow2,  ax2, p3_feedbackfield)
global channeltoshowval2 slidervalue2 names  pathwayimport allchannelnames toignore ...
    channelnames numberofchannels whichchannelforcelldetect  ...
    numberofimages stackstotakeforcertainimagenumber2 buttonforapplythreshold ...
    buttonforcomparison2 buttonforjuststructure2 dipolmomentnormalized_finished ...
    dipolmoment_finished Rnormalized_finished diameter_maxvecfinished diameter_avvecfinished ...
    qnormalized_finished qposvec_finished numberofpixels_finished numberofpixelspos_finished ...
    buttonoverviewoverchannels2 buttontoshow2
mask = 0;
if ~isempty(stackstotakeforcertainimagenumber2)
    if sum(stackstotakeforcertainimagenumber2{2}) ~=0
        if slidervalue2 == stackstotakeforcertainimagenumber2{1}
            stackstotake = stackstotakeforcertainimagenumber2{2};
            
        end
    end
    
    if sum(sum(sum(stackstotakeforcertainimagenumber2{3}))) ~= 0
        if slidervalue2 == stackstotakeforcertainimagenumber2{1}
            mask = stackstotakeforcertainimagenumber2{3};
        end
        
    end
end

channeltoshowval2 = efp3channeltoshow2.Value;



value = round(slidervalue2);
if slidervalue2 == 0 || isempty(slidervalue2)
    value = 1;
end


if ~isempty(names)
    path = strcat(pathwayimport,'\', names{value});
    
    if isempty(whichchannelforcelldetect) || whichchannelforcelldetect == 0
        whichchannelforcelldetect = 1;
    end
    
    b = imfinfo(path);
    stacknum = numel(b);
    
    if channeltoshowval2 <= length(allchannelnames)
        
        
        if sum(sum(sum(dipolmomentnormalized_finished))) ==0
            p3_feedbackfield.Value = 'Not run through the images or wrong settings so that no cell detected';
            
        else
            
            if buttonforjuststructure2 ==1 % show result of K threshold
                count = 1;
                
                M_original = zeros(b(1).Height, b(1).Width, length(stackstotake));
                for k = channeltoshowval2+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval2+length(allchannelnames)*(stackstotake(end)-1)
                    M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                    count = count + 1;
                end
                
                
                if buttonforcomparison2 == 0
                    montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))), 'Parent', ax2);
                    title(allchannelnames(channeltoshowval2), 'Parent', ax2, 'FontWeight', 'bold',...
                        'FontSize', 20);
                end
                
                
                if buttonforcomparison2 ==1
                    
                    count = 1;
                    M_original_all = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
                    for k = channeltoshowval2:length(allchannelnames):stacknum
                        M_original_all(1:b(1).Height, 1:b(1).Width, count) = imread(path,k);
                        count = count + 1;
                    end
                    
                    a= montage(double(M_original_all(:,:,:))./max(max(double(M_original_all(:,:,:)))));
                    totake_a = a.CData;
                    totake_a(:,size(totake_a,2)+1:size(totake_a,2)+10) = 1;
                    b= montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))));
                    totake_b = b.CData;
                    close all
                    
                    title(allchannelnames(channeltoshowval2), 'Parent', ax2, 'FontWeight', ...
                        'bold', 'FontSize', 20)
                    imshowpair(totake_a, totake_b, 'montage', 'Parent', ax2);
                    
                    
                end
                
            else
                
                
                if exist('stackstotake') ==1
                    
                    
                    if ~isempty(stackstotake) && sum(sum(sum(mask))) ~= 0
                        
                        count = 1;
                        M_original = zeros(b(1).Height, b(1).Width, length(stackstotake));
                        for k = channeltoshowval2+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval2+length(allchannelnames)*(stackstotake(end)-1)
                            M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                            count = count + 1;
                        end
                        
                        
                        
                        runyes = 0;
                        if runyes == 0
                            [mask, path, image_toshowc] = toshow(allchannelnames, path,...
                                mask, stackstotake, ax2, buttonforcomparison2, channeltoshowval2,...
                                buttonoverviewoverchannels2 ) ;
                        end
                        
                        
                        
                        
                        
                        
                        
                    end
                    
                else
                    
                    if ~isempty(savingofsettingsofcertaincells{slidervalue2})
                        
                        
                        [channeltoshowval3rerun, buttonforcomparisonrerun, buttonforjuststructurererun,...
                            frontierthrshK1rerun, frontierthrshK2rerun, anpassungotsuthreshK1rerun, ...
                            anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun, frontier3rerun, ...
                            anpassungotsuthreshKsubtrrerun,thresholdnumpixelsforrangefiltrerun, thresholdnumpixelsforrangefiltrerunmaximum, ...
                            anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun,...
                            threshforveryfaintrerun, anpassungintensotsufrontier1rerun, ...
                            buttonforoutoffocuslightrerun, buttontoshowrerun, tomodulatererun, ...
                            maxnumofimagescellrerun, minnumofimagescellrerun, maxpixnumlayerrerun,...
                            minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, ...
                            maxnumpixelwholecellrerun,buttonifconfocalrerun ] = ...
                            savingofsettingsofcertaincells{slidervalue2}{1:27};
                        
                        
                        frontierthrshK1a = frontierthrshK1rerun;
                        
                        frontierthrshK2a= frontierthrshK2rerun;
                        
                        anpassungotsuthreshK1a = anpassungotsuthreshK1rerun;
                        
                        anpassungotsuthreshK2a = anpassungotsuthreshK2rerun;
                        
                        anpassungotsuthreshK3a = anpassungotsuthreshK3rerun;
                        
                        frontier3a = frontier3rerun;
                        
                        anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtrrerun;
                        
                        thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefiltrerun;
                        thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltrerunmaximum;
                        anpassungotsuthresh1a = anpassungotsuthresh1rerun;
                        
                        anpassungotsuthresh2a = anpassungotsuthresh2rerun;
                        
                        frontieraddition1a = frontieraddition1rerun;
                        
                        threshforveryfainta = threshforveryfaintrerun;
                        
                        anpassungintensotsufrontier1a = anpassungintensotsufrontier1rerun;
                        
                        buttonforoutoffocuslighta = buttonforoutoffocuslightrerun;
                        
                        
                        
                        tomodulatea = tomodulatererun;
                        
                        maxnumofimagescella = maxnumofimagescellrerun;
                        
                        minnumofimagescella = minnumofimagescellrerun;
                        
                        maxpixnumlayera = maxpixnumlayerrerun;
                        
                        minpixnumlayera = minpixnumlayerrerun;
                        
                        minnumberpixelstodetectforcella = minnumberpixelstodetectforcellrerun;
                        
                        maxnumpixelwholecella = maxnumpixelwholecellrerun;
                        
                        buttonifconfocala = buttonifconfocalrerun;
                        
                        
                        
                    else
                        
                        global  names  pathwayimport allchannelnames toignore ...
                            channelnames numberofchannels  whichchannelforcelldetect numberofimages ...
                            frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 ...
                            anpassungotsuthreshK3 frontier3 anpassungotsuthreshKsubtr ...
                            thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum anpassungotsuthresh1 anpassungotsuthresh2...
                            frontieraddition1 threshforveryfaint anpassungintensotsufrontier1 ...
                            buttonforoutoffocuslight buttontoshow tomodulate maxnumofimagescell ...
                            minnumofimagescell  maxpixnumlayer minnumberpixelstodetectforcell...
                            maxnumpixelwholecell buttonifconfocal minpixnumlayer
                        
                        
                        
                        frontierthrshK1a = frontierthrshK1;
                        
                        frontierthrshK2a= frontierthrshK2;
                        
                        anpassungotsuthreshK1a = anpassungotsuthreshK1;
                        
                        anpassungotsuthreshK2a = anpassungotsuthreshK2;
                        
                        anpassungotsuthreshK3a = anpassungotsuthreshK3;
                        
                        frontier3a = frontier3;
                        
                        anpassungotsuthreshKsubtra = anpassungotsuthreshKsubtr;
                        
                        thresholdnumpixelsforrangefilta = thresholdnumpixelsforrangefilt;
                        thresholdnumpixelsforrangefiltmaximuma = thresholdnumpixelsforrangefiltmaximum;
                        anpassungotsuthresh1a = anpassungotsuthresh1;
                        
                        anpassungotsuthresh2a = anpassungotsuthresh2;
                        
                        frontieraddition1a = frontieraddition1;
                        
                        threshforveryfainta = threshforveryfaint;
                        
                        anpassungintensotsufrontier1a = anpassungintensotsufrontier1;
                        
                        buttonforoutoffocuslighta = buttonforoutoffocuslight;
                        
                        
                        
                        tomodulatea = tomodulate;
                        
                        maxnumofimagescella = maxnumofimagescell;
                        
                        minnumofimagescella = minnumofimagescell;
                        
                        maxpixnumlayera = maxpixnumlayer;
                        
                        minpixnumlayera = minpixnumlayer;
                        
                        minnumberpixelstodetectforcella = minnumberpixelstodetectforcell;
                        
                        maxnumpixelwholecella = maxnumpixelwholecell;
                        
                        buttonifconfocala = buttonifconfocal;
                        
                    end
                    
                    global buttonforjuststructure2 buttonforcomparison2 ...
                        buttonifcellrecognitionseveralchannels channelsforcelldetection ...
                        mask_all stackstotakeforcertainimagenumber2
                    
                    runyes = 0;
                    
                    try  [mask imagetoshow stackstotake] =  previewcell(path, numberofimages, ...
                            allchannelnames, whichchannelforcelldetect,   frontierthrshK1a, ...
                            frontierthrshK2a, anpassungotsuthreshK1a, anpassungotsuthreshK2a,...
                            anpassungotsuthreshK3a, frontier3a, anpassungotsuthreshKsubtra,...
                            thresholdnumpixelsforrangefilta,thresholdnumpixelsforrangefiltmaximuma, anpassungotsuthresh1a, anpassungotsuthresh2a,...
                            frontieraddition1a, threshforveryfainta,anpassungintensotsufrontier1a,...
                            buttonforoutoffocuslighta, buttontoshow2, tomodulatea, maxnumofimagescella, ...
                            minnumofimagescella, maxpixnumlayera,minpixnumlayera, minnumberpixelstodetectforcella, ...
                            maxnumpixelwholecella, channeltoshowval2, buttonforjuststructure2, ...
                            p3_feedbackfield, ax2 , buttonforcomparison2,buttonifconfocala, runyes, ...
                            checkoverviewchannels2.Value, buttonifcellrecognitionseveralchannels ,...
                            channelsforcelldetection);
                    catch
                        mask = 0;
                    end
                    
                    
                    if sum(sum(sum(mask)))> 0
                        mask_all(slidervalue2) = 1;
                    end
                    
                    stackstotakeforcertainimagenumber2 = {slidervalue2, stackstotake, mask};
                    
                end
            end
        end
    else
        p3_feedbackfield.Value = 'No valid channel number';
        
    end
else
    p3_feedbackfield.Value = 'No importable images. Probably pathway to data folder missing';
    efp3channeltoshow2.Value = 1;
    channeltoshowval2 = efp3channeltoshow2.Value;
end

end





% function ExportButtonPushed(btnexport, p3_feedbackfield,  checkifmatexport, checkifnonanexport)

% fct to a) export calculated values visible in results table i) important
% parameters, ii) all parameters
% to b) export and hereby run through images after cell detection approved
% (buttonforcellsviewbeforerunbyexport) i) important parameters ii) all
% parameters
function ExportButtonPushed(btnexport, p3_feedbackfield, ax2, checkifmatexport)
global savingofsettingsofcertaincells buttonimportmasksofcells buttonallnormalizations names buttonPearson

if ~isempty(savingofsettingsofcertaincells) || buttonimportmasksofcells == 1
    
    
    global  buttonforcellsviewbeforerunbyexport
    if  buttonforcellsviewbeforerunbyexport ==1 && buttonimportmasksofcells == 0
        tic
        global numberofimages allchannelnames whichchannelforcelldetect buttonconfocal ...
            buttonifcellrecognitionseveralchannels channelsforcelldetection ...
            pathwayimport numberofchannels nottotake buttonforallparameters toignore pathwayexportdata
        
        
        [thefilename, path, indx] = uiputfile(("*.txt"), 'Choose a Filename', string(pathwayexportdata));
        
        fig2 = uifigure;
        d = uiprogressdlg(fig2, 'Title', 'Please Wait', ...
            'Message', 'Start Calculation', 'Cancelable', 'on');
        d.Value = 0;
        
        % initialize variables
        thefilename2 = thefilename(1:end-4);
        
        if checkifmatexport.Value == 1 && ~isempty(savingofsettingsofcertaincells) && buttonimportmasksofcells == 0
            
            cd(pathwayexportdata)
            
            save([thefilename2,char('savingofsettingsofcertaincells.mat')], 'savingofsettingsofcertaincells', '-v7.3');
        end
        
        
        if buttonallnormalizations == 0
            dipolmomentnormalized = zeros(numberofimages, numberofchannels);
            Rnormalized = zeros(numberofimages, numberofchannels);
            qnormalized = zeros(numberofimages, numberofchannels);
            
        else
            dipolmomentnormalized11 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized21 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized12 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized22 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized13 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized23 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized14 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized24 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized15 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized25 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized16 = zeros(numberofimages, numberofchannels);
            dipolmomentnormalized26 = zeros(numberofimages, numberofchannels);
            
            Rnormalized1 = zeros(numberofimages, numberofchannels);
            Rnormalized2 = zeros(numberofimages, numberofchannels);
            
            qnormalized1 = zeros(numberofimages, numberofchannels);
            qnormalized2 = zeros(numberofimages, numberofchannels);
            qnormalized3 = zeros(numberofimages, numberofchannels);
            qnormalized4 = zeros(numberofimages, numberofchannels);
            qnormalized5 = zeros(numberofimages, numberofchannels);
            qnormalized6 = zeros(numberofimages, numberofchannels);
            
        end
        
        
        
        
        
        
        
        
        dipolmoment = zeros(numberofimages, numberofchannels, 3);
        
        diameter_maxvec = zeros(numberofimages,1);
        diameter_avvec = zeros(numberofimages,1);
        
        qposvec = zeros(numberofimages, numberofchannels);
        numberofpixels = zeros(numberofimages,1);
        numberofpixelspos = zeros(numberofimages, numberofchannels);
        avintensity = zeros(numberofimages, numberofchannels);
        RposRmean = zeros(numberofimages, numberofchannels, 3);
        RnegRmean = zeros(numberofimages, numberofchannels, 3);
        RposRneg = zeros(numberofimages, numberofchannels, 3);
        intensityvaluetotal = zeros(numberofimages, numberofchannels);
        
        if buttonforallparameters == 1
            displacementRposRnegMRposMRneg = zeros(numberofimages, numberofchannels);
            displacementDipoleMomentfromMiddle = zeros(numberofimages, numberofchannels);
            
            sumofdistancesqRpos = zeros(numberofchannels, numberofimages);
            percoverphi = zeros(numberofchannels,numberofimages);
            countessphi = zeros(numberofchannels,numberofimages);
            distancetoavvalphi = zeros(numberofchannels, numberofimages);
            zaehlerhowlonghowoftenphi = {};
            endpointsphi = {};
            
            percovertheta = zeros(numberofchannels, numberofimages);
            countesstheta = zeros(numberofchannels, numberofimages);
            distancetoavvaltheta = zeros(numberofchannels, numberofimages);
            zaehlerhowlonghowoftentheta = {};
            endpointstheta = {};
            
            howmuchoveritatallphi = {};
            howmuchoveritatalltheta = {};
            
            startpointsphi = {};
            meanpointsphi = {};
            lengthpointsphi = {};
            histogramvaluesphi =  zeros(numberofimages, numberofchannels, 36);
            distancetonextphi = {};
            distancetomeanphi = {};
            clusterallphi = {}; % arrayofclusters;
            clusterlengthphi = {};
            allclusterinputphi = zeros(numberofchannels, numberofimages);
            clusterpercentphi = {};
            clusterpercenttoallpixelsposphi = {};
            arrayofclusterstrengthphi = zeros(numberofimages,numberofchannels,  5);
            arrayofclustersdistancephi = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersphi= {};
            
            
            startpointstheta = {};
            meanpointstheta = {};
            lengthpointstheta = {};
            histogramvaluestheta =  zeros(numberofimages, numberofchannels, 18);
            distancetonexttheta = {};
            distancetomeantheta = {};
            clusteralltheta = {}; % arrayofclusters;
            clusterlengththeta = {};
            allclusterinputtheta = zeros(numberofchannels, numberofimages);
            clusterpercenttheta = {};
            clusterpercenttoallpixelspostheta = {};
            arrayofclusterstrengththeta = zeros( numberofimages,numberofchannels, 5);
            arrayofclustersdistancetheta = zeros(numberofimages, numberofchannels, 5);
            arrayofclusterstheta= {};
            
            
            
            final_distancestrengthlist = zeros(numberofimages, numberofchannels);
            sorted_volumelist = cell(numberofimages, numberofchannels);
            sorted_centroidlist = cell(numberofimages, numberofchannels);
            sorted_equivdiameterlist  = cell(numberofimages, numberofchannels);
            sorted_voxellistlist = cell(numberofimages, numberofchannels);
            sorted_surfacearealist  = cell(numberofimages, numberofchannels);
            sorted_voxelvalueslist = cell(numberofimages, numberofchannels);
            sorted_weightedcentroidlist = cell(numberofimages, numberofchannels);
            sorted_meanintensitylist = cell(numberofimages, numberofchannels);
            sorted_maxintensitylist = cell(numberofimages, numberofchannels);
            arrayfixed4distancelist = zeros(numberofimages, numberofchannels, 4);
            arrayfixed5strengthlist = zeros(numberofimages, numberofchannels, 5);
            
            sorted_array_tofilldistancelist = cell(numberofimages, numberofchannels);
            sorted_array_tofillstrengthlist= cell(numberofimages, numberofchannels);
            
            
            
            
        end
        
        if buttonPearson ==1
            global Pearson_finished
            Pearson_finished = zeros(numberofimages, numberofchannels * (numberofchannels-1)/2);
            % numberofchannels* (numberofchannels-1)/2 is number of
            % combinations of channels
        end
        
        
        
        
        for z = 1:numberofimages
            
            d.Message = ['Cell ',num2str(z),' out of ',num2str(numberofimages), ' cells'];
            d.Value = 1 / numberofimages *z;
            
            if d.CancelRequested
                btn.Enable = 'on';
                break
            end
            
            if nottotake(z) == 0
                channeltoshowval3rerun = cell2mat(savingofsettingsofcertaincells{z}(1));
                buttonforcomparisonrerun = cell2mat(savingofsettingsofcertaincells{z}(2));
                buttonforjuststructurererun = cell2mat(savingofsettingsofcertaincells{z}(3));
                frontierthrshK1rerun= cell2mat(savingofsettingsofcertaincells{z}(4));
                frontierthrshK2rerun = cell2mat(savingofsettingsofcertaincells{z}(5));
                anpassungotsuthreshK1rerun= cell2mat(savingofsettingsofcertaincells{z}(6));
                anpassungotsuthreshK2rerun= cell2mat(savingofsettingsofcertaincells{z}(7));
                anpassungotsuthreshK3rerun= cell2mat(savingofsettingsofcertaincells{z}(8));
                frontier3rerun= cell2mat(savingofsettingsofcertaincells{z}(9));
                anpassungotsuthreshKsubtrrerun= cell2mat(savingofsettingsofcertaincells{z}(10));
                thresholdnumpixelsforrangefiltrerun= cell2mat(savingofsettingsofcertaincells{z}(11));
                thresholdnumpixelsforrangefiltrerunmaximum = cell2mat(savingofsettingsofcertaincells{z}(12));
                anpassungotsuthresh1rerun= cell2mat(savingofsettingsofcertaincells{z}(13));
                anpassungotsuthresh2rerun= cell2mat(savingofsettingsofcertaincells{z}(14));
                frontieraddition1rerun= cell2mat(savingofsettingsofcertaincells{z}(15));
                threshforveryfaintrerun= cell2mat(savingofsettingsofcertaincells{z}(16));
                anpassungintensotsufrontier1rerun= cell2mat(savingofsettingsofcertaincells{z}(17));
                buttonforoutoffocuslightrerun= cell2mat(savingofsettingsofcertaincells{z}(18));
                buttontoshowrerun= cell2mat(savingofsettingsofcertaincells{z}(19));
                tomodulatererun= cell2mat(savingofsettingsofcertaincells{z}(20));
                maxnumofimagescellrerun= cell2mat(savingofsettingsofcertaincells{z}(21));
                minnumofimagescellrerun= cell2mat(savingofsettingsofcertaincells{z}(22));
                maxpixnumlayerrerun= cell2mat(savingofsettingsofcertaincells{z}(23));
                minpixnumlayerrerun= cell2mat(savingofsettingsofcertaincells{z}(24));
                minnumberpixelstodetectforcellrerun= cell2mat(savingofsettingsofcertaincells{z}(25));
                maxnumpixelwholecellrerun= cell2mat(savingofsettingsofcertaincells{z}(26));
                buttonifconfocalrerun = cell2mat(savingofsettingsofcertaincells{z}(27));
                
                path = strcat(pathwayimport,'\', names{z});
                
                
                [mask, imagetoshow, stackstotake] = previewcell(path, numberofimages, allchannelnames, whichchannelforcelldetect,   frontierthrshK1rerun,frontierthrshK2rerun, anpassungotsuthreshK1rerun, anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun, frontier3rerun,...
                    anpassungotsuthreshKsubtrrerun, thresholdnumpixelsforrangefiltrerun, thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, threshforveryfaintrerun,anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun, 0, tomodulatererun, ...
                    maxnumofimagescellrerun , minnumofimagescellrerun, maxpixnumlayerrerun, minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, maxnumpixelwholecellrerun, channeltoshowval3rerun, 0, p3_feedbackfield, ax2 , 0, buttonifconfocalrerun, 1, 0, buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
                
                
                if sum(sum(sum(mask))) == 0 || isempty(stackstotake) || nottotake(z) ==1
                    
                    
                    p3_feedbackfield.Value = strcat(['No cell detected, cell number: ', num2str(z), ' of ', num2str(numberofimages), ' cells']);
                    
                    
                else
                    
                    
                    p3_feedbackfield.Value = strcat(['cell number: ',num2str(z), ' of ', num2str(numberofimages), ' cells']);
                    
                    global pixel_x pixel_y voxel_z pathwayexportimages saveimagesyes  buttongeneralqnormalization buttondiameter
                    
                    
                    
                    
                    if buttonforallparameters ==1 && buttonallnormalizations == 0
                        [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                            startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta,clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]= ...
                            polarityquantification(path, z, numberofimages,names, allchannelnames, toignore, mask, ...
                            stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, ...
                            buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax2, intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg,displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, ...
                            startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                            startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta,clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, ...
                            arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                        
                    end
                    if buttonforallparameters ==0 && buttonallnormalizations == 0
                        % polarity quantification without all parameters
                        [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] = polarityquantificationnotallparameters(path, z, numberofimages,names, allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax2, intensityvaluetotal, RnegRmean, RposRneg);
                        
                    end
                    if buttonforallparameters == 1 && buttonallnormalizations == 1
                        [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
                            dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
                            dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
                            dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
                            qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
                            qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
                            RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
                            percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
                            countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
                            howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
                            distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
                            arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
                            lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
                            allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
                            arrayofclustersdistancetheta arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]  ...
                            = polarityquantificationallnormalizations(path, z, numberofimages, names, ...
                            allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                            saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
                            dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
                            dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
                            dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
                            diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, ...
                            numberofpixelspos, avintensity, RposRmean, ax2, intensityvaluetotal, ...
                            RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                            countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
                            zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                            lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
                            clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                            startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
                            clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                            arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                            final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                            sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                            sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
                        
                    end
                    if buttonforallparameters == 0 && buttonallnormalizations == 1
                        [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                            dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                            dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
                            dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                            qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                            numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                            = polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
                            toignore, mask,  stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                            saveimagesyes, buttongeneralqnormalization, buttondiameter, ...
                            dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                            dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                            dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
                            dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                            qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                            numberofpixels, numberofpixelspos, avintensity, RposRmean, ax2, intensityvaluetotal, RnegRmean, RposRneg);
                        
                        
                    end
                    
                    
                    
                    if buttonPearson == 1
                        
                        pearsonscorrelationcoefficient(mask, stackstotake, path, z);
                        
                    end
                    
                    
                end
            end
            if z == numberofimages
                d.Message = 'Finished';
                pause(1)
                
            end
            
        end
        
        
        
        
        if d.CancelRequested
            btn.Enable = 'on';
            
        else
            
            index = find(nottotake==1);
            
            
            if buttonPearson == 1
                Pearson_finished2 = Pearson_finished;
                Pearson_finished2(index,:) = [];
            end
            
            
            if buttonallnormalizations == 0
                dipolmomentnormalized(index,:) = [];
                Rnormalized(index,:) = [];
                qnormalized(index,:) = [];
            end
            
            if buttonallnormalizations == 1
                
                dipolmomentnormalized11(index,:) = [];
                dipolmomentnormalized21(index,:) = [];
                dipolmomentnormalized12(index,:) = [];
                dipolmomentnormalized22(index,:) = [];
                dipolmomentnormalized13(index,:) = [];
                dipolmomentnormalized23(index,:) = [];
                dipolmomentnormalized14(index,:) = [];
                dipolmomentnormalized24(index,:) = [];
                dipolmomentnormalized15(index,:) = [];
                dipolmomentnormalized25(index,:) = [];
                dipolmomentnormalized16(index,:) = [];
                dipolmomentnormalized26(index,:) = [];
                
                Rnormalized1(index,:) = [];
                Rnormalized2(index,:) = [];
                
                qnormalized1(index,:) = [];
                qnormalized2(index,:) = [];
                qnormalized3(index,:) = [];
                qnormalized4(index,:) = [];
                qnormalized5(index,:) = [];
                qnormalized6(index,:) = [];
            end
            
            
            dipolmoment(index,:,:) = [];
            
            diameter_maxvec(index) = [];
            diameter_avvec(index) = [];
            
            qposvec(index,:) = [];
            
            numberofpixels(index) = [];
            numberofpixelspos(index,:) = [];
            avintensity(index,:) = [];
            RposRmean(index,:,:) = [];
            
            RnegRmean(index,:,:) = [];
            RposRneg(index,:,:) = [];
            intensityvaluetotal(index,:) = [];
            
            if buttonforallparameters == 1
                displacementRposRnegMRposMRneg(index,:) = [];
                displacementDipoleMomentfromMiddle(index,:) = [];
                sumofdistancesqRpos(:,index) = [];
                percoverphi(:,index) = [];
                countessphi(:,index) = [];
                distancetoavvalphi(:,index) = [];
                final_distancestrengthlist(index,:) = [];
                
                
                arrayfixed4distancelist(index,:,:) = [];
                arrayfixed5strengthlist(index,:,:) = [];
                
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            zaehlerhowlonghowoftenphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                zaehlerhowlonghowoftenphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            endpointsphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                endpointsphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            endpointstheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                endpointstheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            startpointsphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                startpointsphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            meanpointsphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                meanpointsphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            lengthpointsphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                lengthpointsphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            distancetonextphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                distancetonextphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            distancetomeanphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                distancetomeanphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                percovertheta(:,index) = [];
                countesstheta(:,index) = [];
                distancetoavvaltheta(:,index) = [];
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            zaehlerhowlonghowoftentheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                zaehlerhowlonghowoftentheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            howmuchoveritatallphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                howmuchoveritatallphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            howmuchoveritatalltheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                howmuchoveritatalltheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                histogramvaluesphi(index,:,:) = [];
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterallphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterallphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterlengthphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterlengthphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            allclusterinputphi(:,index(length(index) - zaehler_index + 1)) = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            % for zaehler_numberofchannels = 1:numberofchannels
                            allclusterinputphi(:, index(length(index)-zaehler_index + 1)) = [];
                            %   end
                        end
                    end
                end
                
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterpercentphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterpercentphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterpercenttoallpixelsposphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterpercenttoallpixelsposphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                arrayofclusterstrengthphi(index,:,:) = [];
                
                arrayofclustersdistancephi(index,:,:) = [];
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            arrayofclustersphi{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                arrayofclustersphi{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            startpointstheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                startpointstheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            meanpointstheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                meanpointstheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            lengthpointstheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                lengthpointstheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            distancetonexttheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                distancetonexttheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            distancetomeantheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                distancetomeantheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                histogramvaluestheta(index,:,:) = [];
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusteralltheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusteralltheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            
                            clusterlengththeta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterlengththeta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            allclusterinputtheta(:,index(length(index) - zaehler_index + 1)) = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            %  for zaehler_numberofchannels = 1:numberofchannels
                            allclusterinputtheta(:, index(length(index)-zaehler_index + 1)) = [];
                            %  end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterpercenttheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterpercenttheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            clusterpercenttoallpixelspostheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                clusterpercenttoallpixelspostheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                arrayofclusterstrengththeta(index,:,:) = [];
                
                arrayofclustersdistancetheta(index,:,:) = [];
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            arrayofclusterstheta{index(length(index) - zaehler_index + 1)} = [];
                        end
                    else
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                arrayofclusterstheta{zaehler_numberofchannels, index(length(index)-zaehler_index + 1)} = [];
                            end
                        end
                    end
                end
                
                if ~isempty(index)
                    if numberofchannels ==1
                        for zaehler_index = 1:length(index)
                            sorted_volumelist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_centroidlist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_equivdiameterlist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_voxellistlist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_surfacearealist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_voxelvalueslist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_weightedcentroidlist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_meanintensitylist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_maxintensitylist{index(length(index) - zaehler_index + 1)} = [];
                            
                            sorted_array_tofilldistancelist{index(length(index) - zaehler_index + 1)} = [];
                            sorted_array_tofillstrengthlist{index(length(index) - zaehler_index + 1)}=[];
                        end
                        
                    else
                        
                        for zaehler_index = 1:length(index)
                            for zaehler_numberofchannels = 1:numberofchannels
                                sorted_volumelist{ index(length(index)-zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_centroidlist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_equivdiameterlist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_voxellistlist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_surfacearealist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_voxelvalueslist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_weightedcentroidlist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_meanintensitylist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_maxintensitylist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_array_tofilldistancelist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels} = [];
                                sorted_array_tofillstrengthlist{index(length(index) - zaehler_index + 1), zaehler_numberofchannels}=[];
                                
                            end
                        end
                    end
                end
                
                
            end
            
            namesofchannel = allchannelnames;
            findcolumns = 1:length(allchannelnames);
            
            for i = toignore
                
                namesofchannel{i} = [];
                findcolumns(i) = 0;
                
            end
            findcolumns(findcolumns == 0) = [];
            
            naming = {};
            count = 1;
            for i = 1:length(allchannelnames)
                
                try
                    if ~isempty(namesofchannel{i})
                        naming{count} = char(namesofchannel{i});
                        count = count + 1;
                    end
                catch
                end
            end
            
            
            if buttonPearson == 1
                
                namingPearson = {};
                count = 1;
                for i = 1:length(namesofchannel)-1
                    for j =i+1:length(namesofchannel)
                       % namesofchannel{j}
                      try  namingPearson{count} = [namesofchannel{i}, '-', namesofchannel{j}];
                        count = count + 1;
                      catch
                      end
                    end
                end
                
                
            end
            
            
            % export txt files
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            if exist('naming')
                
                time = string(yyyymmdd(datetime('now')));
                thefilename2 = thefilename(1:end-4);
                
                if buttonPearson == 1
                    
                    Pearsontable = array2table(Pearson_finished2);
                    Pearsontable.Properties.VariableNames = {namingPearson{1:length(namingPearson)}};
                    thefilename = strcat(time, thefilename2, strjoin(['Pearsoncorrelationcoefficient', string(allchannelnames)]));
                    writetable(Pearsontable, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(Pearsontable, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                end
                
                if buttonallnormalizations == 0
                    dipoltable = array2table(dipolmomentnormalized(:,findcolumns));
                    dipoltable.Properties.VariableNames = {naming{1:length(naming) }};
                    
                    
                    
                    if buttondiameter ==1
                        
                        thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMomentMaxDiameterChargeOption', num2str(buttongeneralqnormalization), string(allchannelnames)]));
                        
                    else
                        
                        thefilename = strcat(time,thefilename2, strjoin(['NormalizedDipoleMomentAvDiameterChargeOption', num2str(buttongeneralqnormalization), string(allchannelnames)]));
                        
                    end
                    writetable(dipoltable, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    Rnormalizedtable = array2table(Rnormalized(:,findcolumns));
                    Rnormalizedtable.Properties.VariableNames = {naming{1:length(naming)}};
                    
                    if buttondiameter ==1
                        Rnormalizedtable.Properties.DimensionNames = {'Distance normalized by max. diameter', 'Analyzed Channels'};
                        thefilename = char(strcat(time, thefilename2,'NormalizedDistanceMaxDiameter',strjoin(string(allchannelnames)) ));
                    else
                        Rnormalizedtable.Properties.DimensionNames = {'Distance normalized by av. diameter', 'Analyzed Channels'};
                        thefilename = char(strcat(time, thefilename2, 'NormalizedDistanceAvDiameter', strjoin(string(allchannelnames)) ));
                    end
                    writetable(Rnormalizedtable, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(Rnormalizedtable, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    qnormalizedtable = array2table(qnormalized(:,findcolumns));
                    qnormalizedtable.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable.Properties.DimensionNames = {['ChosenChargeOption', num2str(buttongeneralqnormalization)], 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption', num2str(buttongeneralqnormalization), string(allchannelnames)])));
                    writetable(qnormalizedtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                end
                
                
                if buttonallnormalizations == 1
                    dipoltable11 = array2table(dipolmomentnormalized11(:,findcolumns));
                    dipoltable11.Properties.VariableNames = {naming{1:length(naming)}};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment11Option', string(allchannelnames)]));
                    writetable(dipoltable11, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable11, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    
                    dipoltable12 = array2table(dipolmomentnormalized12(:,findcolumns));
                    dipoltable12.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment12Option', string(allchannelnames)]));
                    writetable(dipoltable12, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable12, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable21 = array2table(dipolmomentnormalized21(:,findcolumns));
                    dipoltable21.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment21Option', string(allchannelnames)]));
                    writetable(dipoltable21, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable21, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable22 = array2table(dipolmomentnormalized22(:,findcolumns));
                    dipoltable22.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment22Option', string(allchannelnames)]));
                    writetable(dipoltable22, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable22, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable13 = array2table(dipolmomentnormalized13(:,findcolumns));
                    dipoltable13.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment13Option', string(allchannelnames)]));
                    writetable(dipoltable13, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable13, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable23 = array2table(dipolmomentnormalized23(:,findcolumns));
                    dipoltable23.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment23Option', string(allchannelnames)]));
                    writetable(dipoltable23, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    writetable(dipoltable23, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable14 = array2table(dipolmomentnormalized14(:,findcolumns));
                    dipoltable14.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment14Option', string(allchannelnames)]));
                    writetable(dipoltable14, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable14, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    
                    dipoltable24 = array2table(dipolmomentnormalized24(:,findcolumns));
                    dipoltable24.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment24Option', string(allchannelnames)]));
                    writetable(dipoltable24, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable24, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable15 = array2table(dipolmomentnormalized15(:,findcolumns));
                    dipoltable15.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment15Option', string(allchannelnames)]));
                    writetable(dipoltable15, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable15, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    
                    dipoltable25 = array2table(dipolmomentnormalized25(:,findcolumns));
                    dipoltable25.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment25Option', string(allchannelnames)]));
                    writetable(dipoltable25, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable25, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable16 = array2table(dipolmomentnormalized16(:,findcolumns));
                    dipoltable16.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment16Option', string(allchannelnames)]));
                    writetable(dipoltable16, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable16, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    dipoltable26 = array2table(dipolmomentnormalized26(:,findcolumns));
                    dipoltable26.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment26Option', string(allchannelnames)]));
                    writetable(dipoltable26, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                    writetable(dipoltable26, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                    
                    
                    
                    Rnormalizedtable1 = array2table(Rnormalized1(:,findcolumns));
                    Rnormalizedtable1.Properties.VariableNames = {naming{1:length(naming)}};
                    Rnormalizedtable1.Properties.DimensionNames = {'Distance normalized by max. diameter', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,'NormalizedDistanceMaxDiameter',strjoin(string(allchannelnames)) ));
                    writetable(Rnormalizedtable1, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(Rnormalizedtable1, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    Rnormalizedtable2 = array2table(Rnormalized2(:,findcolumns));
                    Rnormalizedtable2.Properties.VariableNames = {naming{1:length(naming)}};
                    Rnormalizedtable2.Properties.DimensionNames = {'Distance normalized by av. diameter', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,'NormalizedDistanceAvDiameter',strjoin(string(allchannelnames)) ));
                    writetable(Rnormalizedtable2, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(Rnormalizedtable2, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    qnormalizedtable1 = array2table(qnormalized1(:,findcolumns));
                    qnormalizedtable1.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable1.Properties.DimensionNames = {'ChosenChargeOption1', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption1', string(allchannelnames)])));
                    writetable(qnormalizedtable1, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable1, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    qnormalizedtable2 = array2table(qnormalized2(:,findcolumns));
                    qnormalizedtable2.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable2.Properties.DimensionNames = {'ChosenChargeOption2', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption2', string(allchannelnames)])));
                    writetable(qnormalizedtable2, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable2, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    qnormalizedtable3 = array2table(qnormalized3(:,findcolumns));
                    qnormalizedtable3.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable3.Properties.DimensionNames = {'ChosenChargeOption3', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption3', string(allchannelnames)])));
                    writetable(qnormalizedtable3, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable3, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    qnormalizedtable4 = array2table(qnormalized4(:,findcolumns));
                    qnormalizedtable4.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable4.Properties.DimensionNames = {'ChosenChargeOption4', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption4', string(allchannelnames)])));
                    writetable(qnormalizedtable4, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable4, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    qnormalizedtable5 = array2table(qnormalized5(:,findcolumns));
                    qnormalizedtable5.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable5.Properties.DimensionNames = {'ChosenChargeOption5', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption5', string(allchannelnames)])));
                    writetable(qnormalizedtable5, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable5, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    qnormalizedtable6 = array2table(qnormalized6(:,findcolumns));
                    qnormalizedtable6.Properties.VariableNames = {naming{1:length(naming)}};
                    qnormalizedtable6.Properties.DimensionNames = {'ChosenChargeOption6', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption6', string(allchannelnames)])));
                    writetable(qnormalizedtable6, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(qnormalizedtable6, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                end
                
                
                
                
                
                
                
                diametertablemax = array2table(diameter_maxvec);
                diametertablemax.Properties.VariableNames = {'Max. diameter (nm)'};
                thefilename = char(strcat(time, thefilename2,'MaxDiameter',strjoin(string(allchannelnames)) ));
                writetable(diametertablemax, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(diametertablemax, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                diametertable = array2table(diameter_avvec);
                diametertable.Properties.VariableNames = {'Av. diameter (nm)'} ;
                thefilename = char(strcat(time, thefilename2,'AvDiameter',strjoin(string(allchannelnames)) ));
                
                writetable(diametertable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(diametertable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                qpostable = array2table(qposvec(:,findcolumns));
                qpostable.Properties.VariableNames = {naming{1:length(naming)}};
                qpostable.Properties.DimensionNames = {'Chargedensitypos', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2, 'Chargedensitypos', strjoin(string(allchannelnames))));
                writetable(qpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                pixnumtable = array2table(numberofpixels);
                pixnumtable.Properties.VariableNames = {'Number of pixels per cell'};
                pixnumtable.Properties.DimensionNames = {'Number of pixels', 'cells'};
                thefilename = char(strcat(time,thefilename2,'NumberOfPixels',strjoin(string(allchannelnames))));
                writetable(pixnumtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(pixnumtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                numberofpixelspostable = array2table(numberofpixelspos(:,findcolumns));
                
                numberofpixelspostable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'PositivePixelNumber',strjoin(string(allchannelnames))) ;
                writetable(numberofpixelspostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(numberofpixelspostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                avintensitytable = array2table(avintensity(:,findcolumns));
                
                avintensitytable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, 'AveragedIntensityAUperPixel', strjoin(string(allchannelnames))) ;
                writetable(avintensitytable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(avintensitytable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                intensitytotaltable = array2table(intensityvaluetotal(:,findcolumns));
                
                intensitytotaltable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'TotalIntensity',strjoin(string(allchannelnames))) ;
                writetable(intensitytotaltable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(intensitytotaltable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                namingdipolmoment = {};
                t = 1;
                
                for i = 1:3:length(naming)*3
                    namingdipolmoment{i} = strcat([naming{t}, 'x']);
                    namingdipolmoment{i+1} = strcat([naming{t}, 'y']);
                    namingdipolmoment{i+2} = strcat([naming{t}, 'z']);
                    t = t + 1;
                end
                
                dipolmoment_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
                
                for i = 1:size(dipolmoment_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        dipolmoment_table(i,(j-1).*3+1:(j-1).*3+3) = dipolmoment(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                
                
                
                dipolmomenttable = array2table(dipolmoment_table);
                
                size(dipolmomenttable)
                dipolmomenttable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
                thefilename = strcat(time,thefilename2,'DipolMoment',strjoin(string(allchannelnames))) ;
                writetable(dipolmomenttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(dipolmomenttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                RposRmean_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
                
                for i = 1:size(RposRmean_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        RposRmean_table(i,(j-1).*3+1:(j-1).*3+3) = RposRmean(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                
                
                RposRmeantable = array2table(RposRmean_table);
                RposRmeantable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
                thefilename = strcat(time,thefilename2,'RposRmean',strjoin(string(allchannelnames))) ;
                writetable(RposRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(RposRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                RnegRmean_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
                
                for i = 1:size(RnegRmean_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        RnegRmean_table(i,(j-1).*3+1:(j-1).*3+3) = RnegRmean(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                RnegRmeantable = array2table(RnegRmean_table);
                RnegRmeantable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
                thefilename = strcat(time,thefilename2,'RnegRmean',strjoin(string(allchannelnames))) ;
                writetable(RnegRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(RnegRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                RposRneg_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
                
                for i = 1:size(RposRneg_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        RposRneg_table(i,(j-1).*3+1:(j-1).*3+3) = RposRneg(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                RposRnegtable = array2table(RposRneg_table);
                RposRnegtable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
                thefilename = strcat(time,thefilename2,'RposRneg',strjoin(string(allchannelnames))) ;
                writetable(RposRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(RposRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                if ~isempty(index)
                    indextable = array2table(index);
                    indextable.Properties.VariableNames = {'Cell index'};
                    thefilename = strcat(time,thefilename2,'indexnottaken',strjoin(string(allchannelnames))) ;
                    writetable(indextable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(indextable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                end
                
                %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                if buttonforallparameters ==1
                    displacementRposRnegMRposMRnegtable = array2table(displacementRposRnegMRposMRneg(:,findcolumns));
                    displacementRposRnegMRposMRnegtable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'displacementRposRnegMRposMRneg',strjoin(string(allchannelnames))) ;
                    writetable(displacementRposRnegMRposMRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(displacementRposRnegMRposMRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    displacementDipoleMomentfromMiddletable = array2table(displacementDipoleMomentfromMiddle(:,findcolumns));
                    displacementDipoleMomentfromMiddletable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'displacementDipoleMomentfromMiddle',strjoin(string(allchannelnames))) ;
                    writetable(displacementDipoleMomentfromMiddletable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(displacementDipoleMomentfromMiddletable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    sumofdistancesqRpostable = array2table(sumofdistancesqRpos(findcolumns,:)');
                    sumofdistancesqRpostable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sumofdistancesqRpos',strjoin(string(allchannelnames))) ;
                    writetable(sumofdistancesqRpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sumofdistancesqRpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    percoverphitable = array2table(percoverphi(findcolumns,:)');
                    percoverphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'percoverphi',strjoin(string(allchannelnames))) ;
                    writetable(percoverphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(percoverphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    countessphitable = array2table(countessphi(findcolumns,:)');
                    countessphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'countessphi',strjoin(string(allchannelnames))) ;
                    writetable(countessphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(countessphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetoavvalphitable = array2table(distancetoavvalphi(findcolumns,:)');
                    distancetoavvalphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetoavvalphi',strjoin(string(allchannelnames))) ;
                    writetable(distancetoavvalphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetoavvalphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    percoverthetatable = array2table(percovertheta(findcolumns,:)');
                    percoverthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'percovertheta',strjoin(string(allchannelnames))) ;
                    writetable(percoverthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(percoverthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    countessthetatable = array2table(countesstheta(findcolumns,:)');
                    countessthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'countesstheta',strjoin(string(allchannelnames))) ;
                    writetable(countessthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(countessthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetoavvalthetatable = array2table(distancetoavvaltheta(findcolumns,:)');
                    distancetoavvalthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetoavvaltheta',strjoin(string(allchannelnames))) ;
                    writetable(distancetoavvalthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetoavvalthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                   % length(naming)
                   % final_distancestrengthlist(:,findcolumns)
                    array2table(final_distancestrengthlist(:,findcolumns)')
                    final_distancestrengthlisttable = array2table(final_distancestrengthlist(:,findcolumns));
                  try  final_distancestrengthlisttable.Properties.VariableNames = {naming{1:length(naming) }};
                  catch
                  end
                    thefilename = strcat(time,thefilename2,'combdistancestrength',strjoin(string(allchannelnames))) ;
                    writetable(final_distancestrengthlisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(final_distancestrengthlisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    t = 1;
                    
                    zaehlerhowlonghowoftenphi3 = {};
                    zaehlerhowlonghowoftentheta3 = {};
                    endpointsphi3 = {};
                    endpointstheta3 = {};
                    howmuchoveritatallphi3 = {};
                    howmuchoveritatalltheta3 = {};
                    startpointsphi3 = {};
                    meanpointsphi3 = {};
                    lengthpointsphi3 = {};
                    distancetonextphi3 = {};
                    distancetomeanphi3 = {};
                    clusterallphi3 = {};
                    clusteralltheta3 = {};
                    startpointstheta3 = {};
                    meanpointstheta3 = {};
                    lengthpointstheta3 = {};
                    arrayofclusterstheta3 = {};
                    clusterpercenttoallpixelspostheta3 = {};
                    clusterpercenttheta3 = {};
                    
                    
                    
                    clusterlengththeta3 = {};
                    arrayofclustersphi3 = {};
                    clusterpercenttoallpixelsposphi3 = {};
                    clusterpercentphi3 = {};
                    
                    
                    
                    clusterlengthphi3 = {};
                    distancetomeantheta3 = {};
                    distancetonexttheta3 = {};
                    
                    
                    sorted_volumelist3 = {};
                    sorted_centroidlist3= {};
                    sorted_equivdiameterlist3 = {};
                    sorted_voxellistlist3 = {};
                    sorted_surfacearealist3   = {};
                    sorted_voxelvalueslist3= {};
                    sorted_weightedcentroidlist3= {};
                    sorted_meanintensitylist3 = {};
                    sorted_maxintensitylist3 = {};
                    sorted_array_tofilldistancelist3 = {}        ;
                    sorted_array_tofillstrengthlist3 = {};
                    
                    
                    
                    for i = findcolumns
                        for j = 1:size(zaehlerhowlonghowoftenphi,2)
                            
                            zaehlerhowlonghowoftenphi3{t,j} = zaehlerhowlonghowoftenphi{i,j};
                            zaehlerhowlonghowoftentheta3{t,j} =zaehlerhowlonghowoftentheta{i,j};
                            endpointsphi3{t,j} = endpointsphi{i,j};
                            endpointstheta3{t,j} = endpointstheta{i,j};
                            howmuchoveritatallphi3{t,j} = howmuchoveritatallphi{i,j};
                            howmuchoveritatalltheta3{t,j} = howmuchoveritatalltheta{i,j}
                            startpointsphi3{t,j} = startpointsphi{i,j}
                            meanpointsphi3{t,j} = meanpointsphi{i,j}
                            lengthpointsphi3{t,j} = lengthpointsphi{i,j}
                            distancetonextphi3{t,j} = distancetonextphi{i,j}
                            distancetomeanphi3{t,j} =  distancetomeanphi{i,j}
                            clusterallphi3{t,j} =  clusterallphi{i,j}
                            clusteralltheta3{t,j} = clusteralltheta{i,j}
                            startpointstheta3{t,j} = startpointstheta{i,j}
                            meanpointstheta3{t,j} = meanpointstheta{i,j}
                            lengthpointstheta3{t,j} = lengthpointstheta{i,j}
                            arrayofclusterstheta3{t,j} = arrayofclusterstheta{i,j}
                            clusterpercenttoallpixelspostheta3{t,j} = clusterpercenttoallpixelspostheta{i,j}
                            clusterpercenttheta3{t,j} = clusterpercenttheta{i,j}
                            
                            
                            
                            clusterlengththeta3{t,j} =  clusterlengththeta{i,j}
                            arrayofclustersphi3{t,j} = arrayofclustersphi{i,j}
                            clusterpercenttoallpixelsposphi3{t,j} = clusterpercenttoallpixelsposphi{i,j}
                            clusterpercentphi3{t,j} = clusterpercentphi{i,j}
                            
                            clusterlengthphi3{t,j} = clusterlengthphi{i,j}
                            distancetomeantheta3{t,j} = distancetomeantheta{i,j}
                            distancetonexttheta3{t,j} = distancetonexttheta{i,j}
                            
                            sorted_volumelist3{j,t} = sorted_volumelist{j,i};
                            sorted_centroidlist3{j,t} = sorted_centroidlist{j,i};
                            sorted_equivdiameterlist3{j,t} = sorted_equivdiameterlist{j,i};
                            sorted_voxellistlist3{j,t} = sorted_voxellistlist{j,i};
                            sorted_surfacearealist3{j,t}   =sorted_surfacearealist{j,i};
                            sorted_voxelvalueslist3{j,t}= sorted_voxelvalueslist{j,i};
                            sorted_weightedcentroidlist3{j,t}=  sorted_weightedcentroidlist{j,i};
                            sorted_meanintensitylist3{j,t} = sorted_meanintensitylist{j,i};
                            sorted_maxintensitylist3{j,t} = sorted_maxintensitylist{j,i};
                            sorted_array_tofilldistancelist3{j,t} = sorted_array_tofilldistancelist{j,i};
                            sorted_array_tofillstrengthlist3{j,t} = sorted_array_tofillstrengthlist{j,i};
                            
                            
                        end
                        t = t + 1;
                    end
                    
                    
                    
                    %  zaehlerhowlonghowoftenphitable = array2table(zaehlerhowlonghowoftenphi3');
                    %  zaehlerhowlonghowoftenphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    %  thefilename = strcat(time,thefilename2,'zaehlerhowlonghowoftenphi',strjoin(string(allchannelnames))) ;
                    %  writetable(zaehlerhowlonghowoftenphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    %  writetable(zaehlerhowlonghowoftenphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    %  zaehlerhowlonghowoftenthetatable = array2table(zaehlerhowlonghowoftentheta3');
                    %  zaehlerhowlonghowoftenthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    %  thefilename = strcat(time,thefilename2,'zaehlerhowlonghowoftentheta',strjoin(string(allchannelnames))) ;
                    %  writetable(zaehlerhowlonghowoftenthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    %  writetable(zaehlerhowlonghowoftenthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    endpointsphitable = array2table(endpointsphi3');
                    endpointsphitable.Properties.VariableNames = {naming{1:length(naming)}};
                    thefilename = strcat(time,thefilename2,'endpointsphi',strjoin(string(allchannelnames))) ;
                    writetable(endpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(endpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    endpointsthetatable = array2table(endpointstheta3');
                    endpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'endpointstheta',strjoin(string(allchannelnames))) ;
                    writetable(endpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(endpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    howmuchoveritatallphitable = array2table(howmuchoveritatallphi3');
                    howmuchoveritatallphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'howmuchoveritatallphi',strjoin(string(allchannelnames))) ;
                    writetable(howmuchoveritatallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(howmuchoveritatallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    howmuchoveritatallthetatable = array2table(howmuchoveritatalltheta3');
                    howmuchoveritatallthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'howmuchoveritatalltheta',strjoin(string(allchannelnames))) ;
                    writetable(howmuchoveritatallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(howmuchoveritatallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    startpointsphitable = array2table(startpointsphi3');
                    startpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'startpointsphi',strjoin(string(allchannelnames))) ;
                    writetable(startpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(startpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    meanpointsphitable = array2table(meanpointsphi3');
                    meanpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'meanpointsphi',strjoin(string(allchannelnames))) ;
                    writetable(meanpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(meanpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    lengthpointsphitable = array2table(lengthpointsphi3');
                    lengthpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'lengthpointsphi',strjoin(string(allchannelnames))) ;
                    writetable(lengthpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(lengthpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    naminghistogram = {};
                    t = 1;
                    for i = 1:36:length(naming)*36
                        naminghistogram{i} = strcat([naming{t}, '[0-10°)']);
                        naminghistogram{i+1} = strcat([naming{t}, '[10-20°)']);
                        naminghistogram{i+2} = strcat([naming{t}, '[20-30°)']);
                        naminghistogram{i+3} = strcat([naming{t}, '[30-40°)']);
                        naminghistogram{i+4} = strcat([naming{t}, '[40-50°)']);
                        naminghistogram{i+5} = strcat([naming{t}, '[50-60°)']);
                        naminghistogram{i+6} = strcat([naming{t}, '[60-70°)']);
                        naminghistogram{i+7} = strcat([naming{t}, '[70-80°)']);
                        naminghistogram{i+8} = strcat([naming{t}, '[80-90°)']);
                        naminghistogram{i+9} = strcat([naming{t}, '[90-100°)']);
                        naminghistogram{i+10} = strcat([naming{t}, '[100-110°)']);
                        naminghistogram{i+11} = strcat([naming{t}, '[110-120°)']);
                        naminghistogram{i+12} = strcat([naming{t}, '[120-130°)']);
                        naminghistogram{i+13} = strcat([naming{t}, '[130-140°)']);
                        naminghistogram{i+14} = strcat([naming{t}, '[140-150°)']);
                        naminghistogram{i+15} = strcat([naming{t}, '[150-160°)']);
                        naminghistogram{i+16} = strcat([naming{t}, '[160-170°)']);
                        naminghistogram{i+17} = strcat([naming{t}, '[170-180°)']);
                        naminghistogram{i+18} = strcat([naming{t}, '[180-190°)']);
                        naminghistogram{i+19} = strcat([naming{t}, '[190-200°)']);
                        naminghistogram{i+20} = strcat([naming{t}, '[200-210°)']);
                        naminghistogram{i+21} = strcat([naming{t}, '[210-220°)']);
                        naminghistogram{i+22} = strcat([naming{t}, '[220-230°)']);
                        naminghistogram{i+23} = strcat([naming{t}, '[230-240°)']);
                        naminghistogram{i+24} = strcat([naming{t}, '[240-250°)']);
                        naminghistogram{i+25}  = strcat([naming{t}, '[250-260°)']);
                        naminghistogram{i+26}  = strcat([naming{t}, '[260-270°)']);
                        naminghistogram{i+27}  = strcat([naming{t}, '[270-280°)']);
                        naminghistogram{i+28}  = strcat([naming{t}, '[280-290°)']);
                        naminghistogram{i+29}  = strcat([naming{t}, '[290-300°)']);
                        naminghistogram{i+30}  = strcat([naming{t}, '[300-310°)']);
                        naminghistogram{i+31} = strcat([naming{t}, '[310-320°)']);
                        naminghistogram{i+32} = strcat([naming{t}, '[320-330°)']);
                        naminghistogram{i+33} = strcat([naming{t}, '[330-340°)']);
                        naminghistogram{i+34} = strcat([naming{t}, '[340-350°)']);
                        naminghistogram{i+35} = strcat([naming{t}, '[350-360°]']);
                        
                        t = t + 1;
                    end
                    
                    
                    
                    
                    histogramvaluesphi_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*36);
                    
                    for i = 1:size(histogramvaluesphi_table,1)
                        zaehler = 1;
                        for j = 1:length(findcolumns)
                            
                            z = findcolumns(j);
                            
                            histogramvaluesphi_table(i,(j-1).*36+1:(j-1).*36+36) = histogramvaluesphi(i,z,:);
                            
                            
                            zaehler = zaehler + 1;
                        end
                        
                    end
                    
                    
                    
                    histogramvaluesphitable = array2table(histogramvaluesphi_table);
                    histogramvaluesphitable.Properties.VariableNames = {naminghistogram{1:length(naminghistogram)}};
                    thefilename = strcat(time,thefilename2,'histogramvaluesphi',strjoin(string(allchannelnames))) ;
                    writetable(histogramvaluesphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(histogramvaluesphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetonextphitable = array2table(distancetonextphi3');
                    
                    distancetonextphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetonextphi',strjoin(string(allchannelnames))) ;
                    writetable(distancetonextphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetonextphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetomeanphitable = array2table(distancetomeanphi3');
                    
                    distancetomeanphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetomeanphi',strjoin(string(allchannelnames))) ;
                    writetable(distancetomeanphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetomeanphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    %   clusterallphitable = array2table(clusterallphi3');
                    
                    %  clusterallphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    %  thefilename = strcat(time,thefilename2,'clusterallphi',strjoin(string(allchannelnames))) ;
                    %  writetable(clusterallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    %  writetable(clusterallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    %      clusterallthetatable = array2table(clusteralltheta3');
                    
                    %     clusterallthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    %     thefilename = strcat(time,thefilename2,'clusteralltheta',strjoin(string(allchannelnames))) ;
                    %     writetable(clusterallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    %     writetable(clusterallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    startpointsthetatable = array2table(startpointstheta3');
                    
                    startpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'startpointstheta',strjoin(string(allchannelnames))) ;
                    writetable(startpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(startpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    meanpointsthetatable = array2table(meanpointstheta3');
                    
                    meanpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'meanpointstheta',strjoin(string(allchannelnames))) ;
                    writetable(meanpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(meanpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    lengthpointsthetatable = array2table(lengthpointstheta3');
                    
                    lengthpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'lengthpointstheta',strjoin(string(allchannelnames))) ;
                    writetable(lengthpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(lengthpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    naminghistogram2 = {};
                    t = 1;
                    for i = 1:18:length(naming)*18
                        naminghistogram2{i} = strcat([naming{t}, '[0-10°)']);
                        naminghistogram2{i+1} = strcat([naming{t}, '[10-20°)']);
                        naminghistogram2{i+2} = strcat([naming{t}, '[20-30°)']);
                        naminghistogram2{i+3} = strcat([naming{t}, '[30-40°)']);
                        naminghistogram2{i+4} = strcat([naming{t}, '[40-50°)']);
                        naminghistogram2{i+5} = strcat([naming{t}, '[50-60°)']);
                        naminghistogram2{i+6} = strcat([naming{t}, '[60-70°)']);
                        naminghistogram2{i+7} = strcat([naming{t}, '[70-80°)']);
                        naminghistogram2{i+8} = strcat([naming{t}, '[80-90°)']);
                        naminghistogram2{i+9} = strcat([naming{t}, '[90-100°)']);
                        naminghistogram2{i+10} = strcat([naming{t}, '[100-110°)']);
                        naminghistogram2{i+11} = strcat([naming{t}, '[110-120°)']);
                        naminghistogram2{i+12} = strcat([naming{t}, '[120-130°)']);
                        naminghistogram2{i+13} = strcat([naming{t}, '[130-140°)']);
                        naminghistogram2{i+14} = strcat([naming{t}, '[140-150°)']);
                        naminghistogram2{i+15} = strcat([naming{t}, '[150-160°)']);
                        naminghistogram2{i+16} = strcat([naming{t}, '[160-170°)']);
                        naminghistogram2{i+17} = strcat([naming{t}, '[170-180°]']);
                        
                        t = t + 1;
                    end
                    
                    
                    histogramvaluestheta_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*18);
                    
                    for i = 1:size(histogramvaluestheta_table,1)
                        zaehler = 1;
                        for j = 1:length(findcolumns)
                            
                            z = findcolumns(j);
                            
                            histogramvaluestheta_table(i,(j-1).*18+1:(j-1).*18+18) = histogramvaluestheta(i,z,:);
                            
                            
                            zaehler = zaehler + 1;
                        end
                        
                    end
                    
                    
                    histogramvaluesthetatable = array2table(histogramvaluestheta_table);
                    histogramvaluesthetatable.Properties.VariableNames = {naminghistogram2{1:length(naminghistogram2)}};
                    thefilename = strcat(time,thefilename2,'histogramvaluestheta',strjoin(string(allchannelnames))) ;
                    writetable(histogramvaluesthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(histogramvaluesthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetonextthetatable = array2table(distancetonexttheta3');
                    
                    distancetonextthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetonexttheta',strjoin(string(allchannelnames))) ;
                    writetable(distancetonextthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetonextthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    distancetomeanthetatable = array2table(distancetomeantheta3');
                    
                    distancetomeanthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'distancetomeantheta',strjoin(string(allchannelnames))) ;
                    writetable(distancetomeanthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(distancetomeanthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterlengthphitable = array2table(clusterlengthphi3');
                    
                    clusterlengthphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterlengthphi',strjoin(string(allchannelnames))) ;
                    writetable(clusterlengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterlengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    allclusterinputphitable = array2table(allclusterinputphi(findcolumns, :)');
                    
                    allclusterinputphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'allclusterinputphi',strjoin(string(allchannelnames))) ;
                    writetable(allclusterinputphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(allclusterinputphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterpercentphitable = array2table(clusterpercentphi3');
                    
                    clusterpercentphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterpercentphi',strjoin(string(allchannelnames))) ;
                    writetable(clusterpercentphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterpercentphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterpercenttoallpixelsposphitable = array2table(clusterpercenttoallpixelsposphi3');
                    
                    clusterpercenttoallpixelsposphitable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterpercenttoallpixelsposphi',strjoin(string(allchannelnames))) ;
                    writetable(clusterpercenttoallpixelsposphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterpercenttoallpixelsposphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    variablemaxs = zeros(1,length(findcolumns));
                    zaehler = 1;
                    %variablemax = 0;
                    
                    for j = findcolumns
                        variablemax = 0;
                        
                        for i = 1:numberofimages - sum(nottotake)
                            
                            
                            
                            
                            variablea = size(arrayofclustersphi{j,i},1);
                            
                            if variablea > variablemax
                                variablemax = variablea;
                            end
                            
                            
                            
                        end
                        
                        variablemaxs(zaehler) = variablemax;
                        zaehler = zaehler + 1;
                        
                        
                        
                    end
                    zaehler = [];
                    
                    variablemaxsuseful = zeros(1, length(findcolumns)-1);
                    
                    for i = 1:size(variablemaxsuseful,2)
                        % if i == 1
                        variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                        %else
                        
                        %   variablemaxsuseful(i) = variablemaxs(i).*3
                        
                        
                    end
                    
                    
                    
                    
                    
                    
                    
                    arrayofclustersphi_table = zeros( numberofimages - sum(nottotake), sum(variablemaxs)*3);
                    
                    arrayofclustersphi_finished3 = arrayofclustersphi';
                    
                    
                    onearray = [];
                    allinarray = [];
                    for i = 1:numberofimages - sum(nottotake)
                        zaehler = 1;
                        for j = findcolumns
                            
                            for z = 1:size(arrayofclustersphi_finished3{i,j},1)
                                
                                onearray = arrayofclustersphi_finished3{i,j}(z,:);
                                
                                allinarray = [allinarray, onearray];
                                
                                
                            end
                            
                            
                            if zaehler == 1
                                arrayofclustersphi_table(i, 1:length(allinarray)) = allinarray;
                                
                            else
                                % variablemaxs(zaehler)+1
                                
                                arrayofclustersphi_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                                
                            end
                            
                            allinarray = [];
                            zaehler = zaehler + 1;
                        end
                        
                        
                        
                        
                        
                        
                    end
                    
                    naming_arrayofclustersphi = {};
                    
                    zaehler = 1;
                    for i = 1:size(arrayofclustersphi_table,2)
                        
                        if zaehler > length(variablemaxsuseful)
                            
                        else
                            if i > variablemaxsuseful(zaehler) - 1
                                zaehler = zaehler + 1;
                            end
                        end
                        naming_arrayofclustersphi{i} = [naming{zaehler}, num2str(i)];
                        
                    end
                    
                    arrayofclustersphitable = array2table(arrayofclustersphi_table);
                    
                    arrayofclustersphitable.Properties.VariableNames = {naming_arrayofclustersphi{1:length(naming_arrayofclustersphi) }};
                    thefilename = strcat(time,thefilename2,'arrayofclustersphi',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclustersphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclustersphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterlengththetatable = array2table(clusterlengththeta3');
                    
                    clusterlengththetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterlengththeta',strjoin(string(allchannelnames))) ;
                    writetable(clusterlengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterlengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    allclusterinputthetatable = array2table(allclusterinputtheta(findcolumns, :)');
                    
                    allclusterinputthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'allclusterinputtheta',strjoin(string(allchannelnames))) ;
                    writetable(allclusterinputthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(allclusterinputthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterpercentthetatable = array2table(clusterpercenttheta3');
                    
                    clusterpercentthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterpercenttheta',strjoin(string(allchannelnames))) ;
                    writetable(clusterpercentthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterpercentthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    clusterpercenttoallpixelsposthetatable = array2table(clusterpercenttoallpixelspostheta3');
                    
                    clusterpercenttoallpixelsposthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'clusterpercenttoallpixelspostheta',strjoin(string(allchannelnames))) ;
                    writetable(clusterpercenttoallpixelsposthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(clusterpercenttoallpixelsposthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    variablemaxs = zeros(1,length(findcolumns));
                    zaehler = 1;
                    %variablemax = 0;
                    
                    for j = findcolumns
                        
                        variablemax = 0;
                        for i = 1:numberofimages - sum(nottotake)
                            
                            
                            
                            
                            variablea = size(arrayofclusterstheta{j,i},1);
                            
                            if variablea > variablemax
                                variablemax = variablea;
                            end
                            
                            
                            
                        end
                        
                        variablemaxs(zaehler) = variablemax;
                        zaehler = zaehler + 1;
                        
                        
                        
                    end
                    zaehler = [];
                    
                    variablemaxsuseful = zeros(1, length(findcolumns)-1);
                    
                    for i = 1:size(variablemaxsuseful,2)
                        % if i == 1
                        variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                        %else
                        
                        %   variablemaxsuseful(i) = variablemaxs(i).*3
                        
                        
                    end
                    
                    
                    
                    
                    
                    
                    
                    arrayofclusterstheta_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                    
                    arrayofclusterstheta_finished3 = arrayofclusterstheta';
                    
                    
                    onearray = [];
                    allinarray = [];
                    for i = 1:numberofimages - sum(nottotake)
                        zaehler = 1;
                        for j = findcolumns
                            
                            for z = 1:size(arrayofclusterstheta_finished3{i,j},1)
                                
                                onearray = arrayofclusterstheta_finished3{i,j}(z,:);
                                
                                allinarray = [allinarray, onearray];
                                
                                
                            end
                            
                            
                            if zaehler == 1
                                arrayofclusterstheta_table(i, 1:length(allinarray)) = allinarray;
                                
                            else
                                % variablemaxs(zaehler)+1
                                
                                arrayofclusterstheta_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                                
                            end
                            
                            allinarray = [];
                            zaehler = zaehler + 1;
                        end
                        
                        
                        
                        
                        
                        
                    end
                    
                    
                    naming_arrayofclusterstheta = {};
                    
                    zaehler = 1;
                    for i = 1:size(arrayofclusterstheta_table,2)
                        
                        if zaehler > length(variablemaxsuseful)
                            
                        else
                            if i > variablemaxsuseful(zaehler) - 1
                                zaehler = zaehler + 1;
                            end
                        end
                        naming_arrayofclusterstheta{i} =  [naming{zaehler}, num2str(i)];
                        
                    end
                    
                    arrayofclustersthetatable = array2table(arrayofclusterstheta_table);
                    
                    arrayofclustersthetatable.Properties.VariableNames = {naming_arrayofclusterstheta{1:length(naming_arrayofclusterstheta) }};
                    thefilename = strcat(time,thefilename2,'arrayofclusterstheta',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclustersthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclustersthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    strength= {};
                    t = 1;
                    for i = 1:5:length(naming)*5
                        strength{i} = strcat([naming{t}, 'Rank 1']);
                        strength{i+1} = strcat([naming{t}, 'Rank 2']);
                        strength{i+2} = strcat([naming{t}, 'Rank 3']);
                        strength{i+3} = strcat([naming{t}, 'Rank 4']);
                        strength{i+4} = strcat([naming{t}, 'Rank 5']);
                        
                        t = t + 1;
                    end
                    
                    distancerank= {};
                    t = 1;
                    for i = 1:4:length(naming)*4
                        distancerank{i} = strcat([naming{t}, 'Rank 1']);
                        distancerank{i+1} = strcat([naming{t}, 'Rank 2']);
                        distancerank{i+2} = strcat([naming{t}, 'Rank 3']);
                        distancerank{i+3} = strcat([naming{t}, 'Rank 4']);
                        
                        
                        t = t + 1;
                    end
                    
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:5
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayofclusterstrengthphi(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayofclusterstrengthphi(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayofclusterstrengthphi(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayofclusterstrengthphi(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    
                    
                    
                    
                    arrayofclusterstrengthphitable = array2table(zahlenreihe_big);
                    
                    arrayofclusterstrengthphitable.Properties.VariableNames = {strength{1:length(strength) }};
                    thefilename = strcat(time,thefilename2,'arrayofclusterstrengthphi',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclusterstrengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclusterstrengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:5
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayofclusterstrengththeta(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayofclusterstrengththeta(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayofclusterstrengththeta(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayofclusterstrengththeta(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    arrayofclusterstrengththetatable = array2table(zahlenreihe_big);
                    
                    arrayofclusterstrengththetatable.Properties.VariableNames = {strength{1:length(strength) }};
                    thefilename = strcat(time,thefilename2,'arrayofclusterstrengththeta',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclusterstrengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclusterstrengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:5
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayofclustersdistancephi(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayofclustersdistancephi(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayofclustersdistancephi(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayofclustersdistancephi(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    arrayofclustersdistancephitable = array2table(zahlenreihe_big);
                    
                    arrayofclustersdistancephitable.Properties.VariableNames = {strength{1:length(strength) }};
                    thefilename = strcat(time,thefilename2,'arrayofclustersdistancephi',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclustersdistancephitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclustersdistancephitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:5
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayofclustersdistancetheta(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayofclustersdistancetheta(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayofclustersdistancetheta(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayofclustersdistancetheta(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    arrayofclustersdistancethetatable = array2table(zahlenreihe_big);
                    
                    arrayofclustersdistancethetatable.Properties.VariableNames = {strength{1:length(strength) }};
                    thefilename = strcat(time,thefilename2,'arrayofclustersdistancetheta',strjoin(string(allchannelnames))) ;
                    writetable(arrayofclustersdistancethetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayofclustersdistancethetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    
                    sorted_volumelist3table   = array2table(sorted_volumelist3);
                    
                    sorted_volumelist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_volumelist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_volumelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_volumelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    variablemaxs = zeros(1,length(findcolumns));
                    zaehler = 1;
                    
                    
                    for j = findcolumns
                        variablemax = 0;
                        
                        for i = 1:numberofimages - sum(nottotake)
                            
                            
                            
                            
                            variablea = size(sorted_centroidlist{i,j},1);
                            
                            if variablea > variablemax
                                variablemax = variablea;
                            end
                            
                            
                            
                        end
                        
                        variablemaxs(zaehler) = variablemax;
                        zaehler = zaehler + 1;
                        
                        
                        
                    end
                    zaehler = [];
                    
                    variablemaxsuseful = zeros(1, length(findcolumns)-1);
                    
                    for i = 1:size(variablemaxsuseful,2)
                        
                        variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                        
                    end
                    
                    
                    sortedcentroid_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                    
                    onearray = [];
                    allinarray = [];
                    for i = 1:numberofimages - sum(nottotake)
                        zaehler = 1;
                        for j = findcolumns
                            
                            for z = 1:size(sorted_centroidlist{i,j},1)
                                
                                onearray = sorted_centroidlist{i,j}(z,:);
                                
                                allinarray = [allinarray, onearray];
                                
                                
                            end
                            
                            
                            if zaehler == 1
                                sortedcentroid_table(i, 1:length(allinarray)) = allinarray;
                                
                            else
                                % variablemaxs(zaehler)+1
                                
                                sortedcentroid_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                                
                            end
                            
                            allinarray = [];
                            zaehler = zaehler + 1;
                        end
                        
                        
                        
                        
                        
                        
                    end
                    
                    
                    
                    naming_sortedcentroid = {};
                    
                    zaehler = 1;
                    for i = 1:size(sortedcentroid_table,2)
                        
                        if zaehler > length(variablemaxsuseful)
                            
                        else
                            if i > variablemaxsuseful(zaehler) - 1
                                zaehler = zaehler + 1;
                            end
                        end
                        naming_sortedcentroid{i} = [naming{zaehler}, num2str(i)];
                        
                    end
                    
                    
                    
                    
                    
                    sorted_centroidlist3table   = array2table(sortedcentroid_table);
                    
                    sorted_centroidlist3table.Properties.VariableNames = {naming_sortedcentroid{1:length(naming_sortedcentroid) }};
                    thefilename = strcat(time,thefilename2,'sorted_centroidlist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_centroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_centroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    sorted_equivdiameterlist3table   = array2table(sorted_equivdiameterlist3);
                    
                    sorted_equivdiameterlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_equivdiameterlist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_equivdiameterlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_equivdiameterlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    %     sorted_voxellistlist3table   = array2table(sorted_voxellistlist3);
                    
                    %    sorted_voxellistlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    %   thefilename = strcat(time,thefilename2,'sorted_voxellistlist',strjoin(string(allchannelnames))) ;
                    %  writetable(sorted_voxellistlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    % writetable(sorted_voxellistlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    sorted_surfacearealist3table   = array2table(sorted_surfacearealist3);
                    
                    sorted_surfacearealist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_surfacearealist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_surfacearealist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_surfacearealist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    %       sorted_voxelvalueslist3table   = array2table(sorted_voxelvalueslist3);
                    
                    %      sorted_voxelvalueslist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    %     thefilename = strcat(time,thefilename2,'sorted_voxelvalueslist',strjoin(string(allchannelnames))) ;
                    %    writetable(sorted_voxelvalueslist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    %   writetable(sorted_voxelvalueslist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    variablemaxs = zeros(1,length(findcolumns));
                    zaehler = 1;
                    
                    
                    for j = findcolumns
                        variablemax = 0;
                        
                        for i = 1:numberofimages - sum(nottotake)
                            
                            
                            
                            
                            variablea = size(sorted_weightedcentroidlist{i,j},1);
                            
                            if variablea > variablemax
                                variablemax = variablea;
                            end
                            
                            
                            
                        end
                        
                        variablemaxs(zaehler) = variablemax;
                        zaehler = zaehler + 1;
                        
                        
                        
                    end
                    zaehler = [];
                    
                    variablemaxsuseful = zeros(1, length(findcolumns)-1);
                    
                    for i = 1:size(variablemaxsuseful,2)
                        
                        variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                        
                    end
                    
                    
                    
                    
                    
                    
                    
                    sortedweightedcentroid_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                    
                    
                    
                    onearray = [];
                    allinarray = [];
                    for i = 1:numberofimages - sum(nottotake)
                        zaehler = 1;
                        for j = findcolumns
                            
                            for z = 1:size(sorted_weightedcentroidlist{i,j},1)
                                
                                onearray = sorted_weightedcentroidlist{i,j}(z,:);
                                
                                allinarray = [allinarray, onearray];
                                
                                
                            end
                            
                            
                            if zaehler == 1
                                sortedweightedcentroid_table(i, 1:length(allinarray)) = allinarray;
                                
                            else
                                % variablemaxs(zaehler)+1
                                
                                sortedweightedcentroid_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                                
                            end
                            
                            allinarray = [];
                            zaehler = zaehler + 1;
                        end
                        
                        
                        
                        
                        
                        
                    end
                    
                    
                    
                    
                    naming_sortedweightedcentroid = {};
                    
                    zaehler = 1;
                    for i = 1:size(sortedweightedcentroid_table,2)
                        
                        if zaehler > length(variablemaxsuseful)
                            
                        else
                            if i > variablemaxsuseful(zaehler) - 1
                                zaehler = zaehler + 1;
                            end
                        end
                        naming_sortedweightedcentroid{i} = [naming{zaehler}, num2str(i)];
                        
                    end
                    
                    
                    
                    sorted_weightedcentroidlist3table   = array2table(sortedweightedcentroid_table);
                    
                    sorted_weightedcentroidlist3table.Properties.VariableNames = {naming_sortedweightedcentroid{1:length(naming_sortedweightedcentroid) }};
                    thefilename = strcat(time,thefilename2,'sorted_weightedcentroidlist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_weightedcentroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_weightedcentroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    
                    sorted_meanintensitylist3table   = array2table(sorted_meanintensitylist3);
                    
                    sorted_meanintensitylist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_meanintensitylist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_meanintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_meanintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    sorted_maxintensitylist3table   = array2table(sorted_maxintensitylist3);
                    
                    sorted_maxintensitylist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_maxintensitylist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_maxintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_maxintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    sorted_array_tofilldistancelist3table   = array2table(sorted_array_tofilldistancelist3);
                    
                    sorted_array_tofilldistancelist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_array_tofilldistancelist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_array_tofilldistancelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_array_tofilldistancelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    sorted_array_tofillstrengthlist3table   = array2table(sorted_array_tofillstrengthlist3);
                    
                    sorted_array_tofillstrengthlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                    thefilename = strcat(time,thefilename2,'sorted_array_tofillstrengthlist',strjoin(string(allchannelnames))) ;
                    writetable(sorted_array_tofillstrengthlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(sorted_array_tofillstrengthlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:4
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayfixed4distancelist(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayfixed4distancelist(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayfixed4distancelist(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayfixed4distancelist(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    
                    arrayfixed4distancelisttable = array2table(zahlenreihe_big);
                    
                    arrayfixed4distancelisttable.Properties.VariableNames = {distancerank{1:length(distancerank) }};
                    thefilename = strcat(time,thefilename2,'arrayfixed4distance',strjoin(string(allchannelnames))) ;
                    writetable(arrayfixed4distancelisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayfixed4distancelisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    zahlenreihe = [];
                    zahlenreihe_klein = [];
                    zahlenreihe_big = [];
                    
                    for i = 1:numberofimages - sum(nottotake)
                        for j = findcolumns
                            
                            for t = 1:5
                                if isempty(zahlenreihe)
                                    zahlenreihe = arrayfixed5strengthlist(i,j,t);
                                else
                                    
                                    zahlenreihe = [zahlenreihe, arrayfixed5strengthlist(i,j,t)];
                                end
                                
                                if isempty(zahlenreihe_klein)
                                    zahlenreihe_klein = arrayfixed5strengthlist(i,j,t);
                                else
                                    
                                    zahlenreihe_klein = [zahlenreihe_klein, arrayfixed5strengthlist(i,j,t)];
                                    
                                end
                                
                            end
                            
                            
                            
                        end
                        
                        if isempty(zahlenreihe_big)
                            zahlenreihe_big = zahlenreihe_klein;
                        else
                            zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                            
                        end
                        zahlenreihe_klein = [];
                        
                        
                        
                    end
                    
                    arrayfixed5strengthlisttable = array2table(zahlenreihe_big);
                    
                    arrayfixed5strengthlisttable .Properties.VariableNames = {strength{1:length(strength) }};
                    thefilename = strcat(time,thefilename2,'arrayfixed5strengthlist',strjoin(string(allchannelnames))) ;
                    writetable(arrayfixed5strengthlisttable , char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                    writetable(arrayfixed5strengthlisttable , char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                    
                    
                    
                    
                    
                end
                
                
                %%%%%%%%%%%%%%%%%%%
                
                %                   displacementRposRnegMRposMRneg
                %                   displacementDipoleMomentfromMiddle
                %                   sumofdistancesqRpos
                %                   percoverphi
                %                   countessphi
                %                   distancetoavvalphi
                %                   zaehlerhowlonghowoftenphi
                %                   endpointsphi
                %                   percovertheta
                %                   countesstheta
                %                   distancetoavvaltheta
                %                   zaehlerhowlonghowoftentheta
                %                   endpointstheta
                %                   howmuchoveritatallphi
                %                   howmuchoveritatalltheta
                %                   startpointsphi
                %                   meanpointsphi
                %                   lengthpointsphi
                %                   histogramvaluesphi
                %                   distancetonextphi
                %                   distancetomeanphi
                %                   clusterall
                %                   clusterlengthphi
                %                   allclusterinputphi
                %                   clusterpercentphi
                %                   clusterpercenttoallpixelsposphi
                %                   arrayofclusterstrengthphi
                %                   arrayofclustersdistancephi
                %                   arrayofclustersphi
                %                   startpointstheta
                %                   meanpointstheta
                %                   lengthpointstheta
                %                   histogramvaluestheta
                %                   distancetonexttheta
                %                   distancetomeantheta
                %                   clusteralltheta
                %                   clusterlengththeta
                %                   allclusterinputtheta
                %                   clusterpercenttheta
                %                   clusterpercenttoallpixelspostheta
                %                   arrayofclusterstrengththeta
                %                   arrayofclustersdistancetheta
                %                   arrayofclusterstheta
                
                if checkifmatexport.Value == 1
                    
                    cd(pathwayexportdata)
                    if buttonallnormalizations == 0
                        save([thefilename2, char( '_dipolmomentnormalized.mat')], 'dipolmomentnormalized', '-v7.3');
                        save([thefilename2, char('_Rnormalized_finished.mat')], 'Rnormalized', '-v7.3');
                        save([thefilename2, char('_qnormalized.mat')], 'qnormalized', '-v7.3');
                    end
                    
                    if buttonallnormalizations == 1
                        save([thefilename2, char( '_dipolmomentnormalized11.mat')], 'dipolmomentnormalized11', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized21.mat')], 'dipolmomentnormalized21', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized12.mat')], 'dipolmomentnormalized12', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized22.mat')], 'dipolmomentnormalized22', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized13.mat')], 'dipolmomentnormalized13', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized23.mat')], 'dipolmomentnormalized23', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized14.mat')], 'dipolmomentnormalized14', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized24.mat')], 'dipolmomentnormalized24', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized15.mat')], 'dipolmomentnormalized15', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized25.mat')], 'dipolmomentnormalized25', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized16.mat')], 'dipolmomentnormalized16', '-v7.3');
                        save([thefilename2, char( '_dipolmomentnormalized26.mat')], 'dipolmomentnormalized26', '-v7.3');
                        
                        save([thefilename2, char('_Rnormalized_finished1.mat')], 'Rnormalized1', '-v7.3');
                        save([thefilename2, char('_Rnormalized_finished2.mat')], 'Rnormalized2', '-v7.3');
                        
                        save([thefilename2, char('_qnormalized1.mat')], 'qnormalized1', '-v7.3');
                        save([thefilename2, char('_qnormalized2.mat')], 'qnormalized2', '-v7.3');
                        save([thefilename2, char('_qnormalized3.mat')], 'qnormalized3', '-v7.3');
                        save([thefilename2, char('_qnormalized4.mat')], 'qnormalized4', '-v7.3');
                        save([thefilename2, char('_qnormalized5.mat')], 'qnormalized5', '-v7.3');
                        save([thefilename2, char('_qnormalized6.mat')], 'qnormalized6', '-v7.3');
                    end
                    
                    
                    
                    save([thefilename2, char('_dipolmoment.mat')], 'dipolmoment', '-v7.3');
                    
                    save([thefilename2, char('_diametermaxvecfinished.mat')], 'diameter_maxvec', '-v7.3');
                    save([thefilename2, char('_diameteravvecfinished.mat')], 'diameter_avvec', '-v7.3');
                    
                    save([thefilename2, char('_qposvec.mat')], 'qposvec', '-v7.3');
                    save([thefilename2, char('_numberofpixels.mat')], 'numberofpixels', '-v7.3');
                    save([thefilename2, char('_numberofpixelspos.mat')], 'numberofpixelspos', '-v7.3');
                    save([thefilename2, char('_avintensity.mat')], 'avintensity', '-v7.3');
                    save([thefilename2, char('_RposRmean.mat')], 'RposRmean', '-v7.3');
                    save([thefilename2, char('_RnegRmean.mat')], 'RnegRmean', '-v7.3');
                    save([thefilename2, char('_RposRneg.mat')], 'RposRneg', '-v7.3');
                    save([thefilename2, char('_PixelIntensitytotal.mat')], 'intensityvaluetotal', '-v7.3');
                    save([thefilename2, char('_Names.mat')], 'names', '-v7.3');
                    
                    if buttonforallparameters ==1
                        
                        save([thefilename2,char('displacementRposRnegtoMorthogonal.mat')], 'displacementRposRnegMRposMRneg', '-v7.3');
                        save([thefilename2,char('displacementdipolfromM.mat')], 'displacementDipoleMomentfromMiddle', '-v7.3');
                        save([thefilename2,char('distanceplusqstoRpos.mat')], 'sumofdistancesqRpos', '-v7.3');
                        save([thefilename2,char('percoverphi.mat')], 'percoverphi', '-v7.3');
                        save([thefilename2,char('countessphi.mat')], 'countessphi', '-v7.3');
                        save([thefilename2,char('distancetoavvalphi.mat')], 'distancetoavvalphi', '-v7.3');
                        % save([thefilename2,char('zaehlerhowlonghowoftenphi.mat')], 'zaehlerhowlonghowoftenphi', '-v7.3');
                        save([thefilename2,char('endpointsphi.mat')], 'endpointsphi', '-v7.3');
                        save([thefilename2,char('percovertheta.mat')], 'percovertheta', '-v7.3');
                        save([thefilename2,char('countesstheta.mat')], 'countesstheta', '-v7.3');
                        save([thefilename2,char('distancetoavvaltheta.mat')], 'distancetoavvaltheta', '-v7.3');
                        % save([thefilename2,char('zaehlerhowlonghowoftentheta.mat')], 'zaehlerhowlonghowoftentheta', '-v7.3');
                        save([thefilename2,char('endpointstheta.mat')], 'endpointstheta', '-v7.3');
                        save([thefilename2,char('howmuchoveritatallphi.mat')], 'howmuchoveritatallphi', '-v7.3');
                        save([thefilename2,char('howmuchoveritatalltheta.mat')], 'howmuchoveritatalltheta', '-v7.3');
                        
                        save([thefilename2,char('startpointsphi.mat')], 'startpointsphi', '-v7.3');
                        save([thefilename2,char('meanpointsphi.mat')], 'meanpointsphi', '-v7.3');
                        save([thefilename2,char('lengthpointsphi.mat')], 'lengthpointsphi', '-v7.3');
                        save([thefilename2,char('histogramvaluesphi.mat')], 'histogramvaluesphi', '-v7.3');
                        save([thefilename2,char('distancetonextphi.mat')], 'distancetonextphi', '-v7.3');
                        save([thefilename2,char('distancetomeanphi.mat')], 'distancetomeanphi', '-v7.3');
                        save([thefilename2,char('clusterallphi.mat')], 'clusterallphi', '-v7.3');
                        save([thefilename2,char('clusterlengthphi.mat')], 'clusterlengthphi', '-v7.3');
                        save([thefilename2,char('allclusterinputphi.mat')], 'allclusterinputphi', '-v7.3');
                        save([thefilename2,char('clusterpercentphi.mat')], 'clusterpercentphi', '-v7.3');
                        save([thefilename2,char('clusterpercenttoallpixelsposphi.mat')], 'clusterpercenttoallpixelsposphi', '-v7.3');
                        save([thefilename2,char('arrayofclusterstrengthphi.mat')], 'arrayofclusterstrengthphi', '-v7.3');
                        save([thefilename2,char('arrayofclustersdistancephi.mat')], 'arrayofclustersdistancephi', '-v7.3');
                        save([thefilename2,char('arrayofclustersphi.mat')], 'arrayofclustersphi', '-v7.3');
                        save([thefilename2,char('startpointstheta.mat')], 'startpointstheta', '-v7.3');
                        save([thefilename2,char('meanpointstheta.mat')], 'meanpointstheta', '-v7.3');
                        save([thefilename2,char('lengthpointstheta.mat')], 'lengthpointstheta', '-v7.3');
                        save([thefilename2,char('histogramvaluestheta.mat')], 'histogramvaluestheta', '-v7.3');
                        save([thefilename2,char('distancetonexttheta.mat')], 'distancetonexttheta', '-v7.3');
                        save([thefilename2,char('distancetomeantheta.mat')], 'distancetomeantheta', '-v7.3');
                        save([thefilename2,char('clusteralltheta.mat')], 'clusteralltheta', '-v7.3');
                        save([thefilename2,char('clusterlengththeta.mat')], 'clusterlengththeta', '-v7.3');
                        save([thefilename2,char('allclusterinputtheta.mat')], 'allclusterinputtheta', '-v7.3');
                        save([thefilename2,char('clusterpercenttheta.mat')], 'clusterpercenttheta', '-v7.3');
                        save([thefilename2,char('clusterpercenttoallpixelspostheta.mat')], 'clusterpercenttoallpixelspostheta', '-v7.3');
                        save([thefilename2,char('arrayofclusterstrengththeta.mat')], 'arrayofclusterstrengththeta', '-v7.3');
                        save([thefilename2,char('arrayofclustersdistancetheta.mat')], 'arrayofclustersdistancetheta', '-v7.3');
                        save([thefilename2,char('arrayofclusterstheta.mat')], 'arrayofclusterstheta', '-v7.3');
                        
                        save([thefilename2,char('final_distancestrengthlist.mat')], 'final_distancestrengthlist', '-v7.3');
                        save([thefilename2,char('sorted_volumelist.mat')], 'sorted_volumelist', '-v7.3');
                        save([thefilename2,char('sorted_centroidlist.mat')], 'sorted_centroidlist', '-v7.3');
                        save([thefilename2,char('sorted_equivdiameterlist.mat')], 'sorted_equivdiameterlist', '-v7.3');
                        save([thefilename2,char('sorted_meanintensitylist.mat')], 'sorted_meanintensitylist', '-v7.3');
                        save([thefilename2,char('sorted_maxintensitylist.mat')], 'sorted_maxintensitylist', '-v7.3');
                        save([thefilename2,char('sorted_voxellistlist.mat')], 'sorted_voxellistlist', '-v7.3');
                        save([thefilename2,char('sorted_voxelvalueslist.mat')], 'sorted_voxelvalueslist', '-v7.3');
                        save([thefilename2,char('sorted_weightedcentroidlist.mat')], 'sorted_weightedcentroidlist', '-v7.3');
                        save([thefilename2,char('sorted_surfacearealist.mat')], 'sorted_surfacearealist', '-v7.3');
                        
                        save([thefilename2,char('arrayfixed4distancelist.mat')], 'arrayfixed4distancelist', '-v7.3');
                        save([thefilename2,char('arrayfixed5strengthlist.mat')], 'arrayfixed5strengthlist', '-v7.3');
                        save([thefilename2,char('sorted_array_tofilldistancelist.mat')], 'sorted_array_tofilldistancelist', '-v7.3');
                        save([thefilename2,char('sorted_array_tofillstrengthlist.mat')], 'sorted_array_tofillstrengthlist', '-v7.3');
                        
                    end
                    if ~isempty(index)
                        save([thefilename2,char('indexofcellsnottaken.mat')], 'index', '-v7.3');
                    end
                    save([thefilename2,char('allchannelnames.mat')], 'allchannelnames', '-v7.3');
                    save([thefilename2,char('toignore.mat')], 'toignore', '-v7.3');
                    global savingofsettingsofcertaincells
                    save([thefilename2,char('savingofsettingsofcertaincells.mat')], 'savingofsettingsofcertaincells', '-v7.3');
                    
                    if buttonPearson ==1
                        save([thefilename2, char('Pearsoncorrelationcoefficient')], 'Pearson_finished2', '-v7.3');
                    end
                    
                    
                    %                       dipolmomentnormalized
                    %                             dipolmoment
                    %                             Rnormalized
                    %                             diameter_maxvec
                    %                             diameter_avvec
                    %                             qnormalized
                    %                             qposvec
                    %                             intensityvaluetotal
                    %                             numberofpixels
                    %                             numberofpixelspos
                    %                             avintensity
                    %                             RposRmean
                    
                    %                             RnegRmean
                    %                             RposRneg
                    %                             displacementRposRnegMRposMRneg
                    %                             displacementDipoleMomentfromMiddle
                    %                             sumofdistancesqRpos
                    %                             percoverphi
                    %                             countessphi
                    %                             distancetoavvalphi
                    %                             zaehlerhowlonghowoftenphi
                    %                             endpointsphi
                    %                             percovertheta
                    %                             countesstheta
                    %                             distancetoavvaltheta
                    %                             zaehlerhowlonghowoftentheta
                    %                             endpointstheta
                    %                             howmuchoveritatallphi
                    %                             howmuchoveritatalltheta
                    %                             startpointsphi
                    %                             meanpointsphi
                    %                             lengthpointsphi
                    %                             histogramvaluesphi
                    %                             distancetonextphi
                    %                             distancetomeanphi
                    %                             clusterall
                    %                             clusterlengthphi
                    %                             allclusterinputphi
                    %                             clusterpercentphi
                    %                             clusterpercenttoallpixelsposphi
                    %                             arrayofclusterstrengthphi
                    %                             arrayofclustersdistancephi
                    %                             arrayofclustersphi
                    %                             startpointstheta
                    %                             meanpointstheta
                    %                             lengthpointstheta
                    %                             histogramvaluestheta
                    %                             distancetonexttheta
                    %                             distancetomeantheta
                    %                             clusteralltheta
                    %                             clusterlengththeta
                    %                             allclusterinputtheta
                    %                             clusterpercenttheta
                    %                             clusterpercenttoallpixelspostheta
                    %                             arrayofclusterstrengththeta
                    %                             arrayofclustersdistancetheta
                    %                             arrayofclusterstheta
                    
                end
                
                
            else
                
                % naming does not exist;
                p3_feedbackfield.Value = 'Naming of channels does not exist';
                
                
            end
            
        end
        
        
        
        
        time = toc;
        
        
        p3_feedbackfield.Value = strcat(['Done, elapsed seconds:', num2str(time)]);
        
        % if buttonforcellviewbeforerun == 1 && buttonimportmasksofcells == 0
    else %buttonforcellviewbeforerun: not pressed; and masks; so: already calculated when pressed runthrough button
        
        % else condition: (buttonforcellviewbeforerun == 0 ||
        % buttonimportmasksofcells == 1) ||  (buttonforcellviewbeforerun == 0
        % &&
        % buttonimportmasksofcells == 1)
        if buttonallnormalizations == 0
            global dipolmomentnormalized_finished Rnormalized_finished  qnormalized_finished
            
        end
        
        
        
        if buttonallnormalizations == 1
            global dipolmomentnormalized11_finished dipolmomentnormalized21_finished ...
                dipolmomentnormalized12_finished dipolmomentnormalized22_finished ...
                dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
                dipolmomentnormalized14_finished dipolmomentnormalized24_finished ...
                dipolmomentnormalized15_finished dipolmomentnormalized25_finished ...
                dipolmomentnormalized16_finished dipolmomentnormalized26_finished ...
                Rnormalized1_finished Rnormalized2_finished ...
                qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
                qnormalized4_finished qnormalized5_finished qnormalized6_finished
        end
        
        
        
        if buttonPearson ==1
            global Pearson_finished
            
        end
        
        
        global dipolmoment_finished ...
            diameter_maxvecfinished diameter_avvecfinished ...
            qposvec_finished avintensity_finished  numberofpixels_finished ...
            numberofpixelspos_finished RposRmean_finished RnegRmean_finished RposRneg_finished ...
            displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
            intensityvaluetotal_finished sumofdistancesqRpos_finished percoverphi_finished ...
            countessphi_finished distancetoavvalphi_finished zaehlerhowlonghowoftenphi_finished ...
            endpointsphi_finished percovertheta_finished countesstheta_finished distancetoavvaltheta_finished ...
            zaehlerhowlonghowoftentheta_finished endpointstheta_finished howmuchoveritatallphi_finished ...
            howmuchoveritatalltheta_finished startpointsphi_finished meanpointsphi_finished ...
            lengthpointsphi_finished histogramvaluesphi_finished distancetonextphi_finished ...
            distancetomeanphi_finished clusterallphi_finished clusterlengthphi_finished ...
            allclusterinputphi_finished  clusterpercentphi_finished clusterpercenttoallpixelsposphi_finished ...
            arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished arrayofclustersphi_finished ...
            startpointstheta_finished meanpointstheta_finished lengthpointstheta_finished ...
            histogramvaluestheta_finished distancetonexttheta_finished distancetomeantheta_finished ...
            clusteralltheta_finished clusterlengththeta_finished allclusterinputtheta_finished ...
            clusterpercenttheta_finished clusterpercenttoallpixelspostheta_finished arrayofclusterstrengththeta_finished ...
            arrayofclustersdistancetheta_finished arrayofclusterstheta_finished ...
            final_distancestrengthlist_finished    sorted_volumelist_finished sorted_centroidlist_finished ...
            sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
            sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
            sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
            sorted_maxintensitylist_finished ...
            arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished
        
        global numberofchannels nottotake buttonforallparameters
        
        
        
        %if buttonimportmasksofcells == 0 && buttonimportmasksofcells == 1
        
        index = find(nottotake==1);
        
        if buttonPearson == 1
            Pearson_finished2 = Pearson_finished;
            Pearson_finished2(index,:) = [];
        end
        
        
        if buttonallnormalizations == 0
            dipolmomentnormalized_finished2 = dipolmomentnormalized_finished;
            dipolmomentnormalized_finished2(index,:) = [];
            
            Rnormalized_finished2 = Rnormalized_finished;
            Rnormalized_finished2(index,:) = [];
            
            qnormalized_finished2 = qnormalized_finished;
            qnormalized_finished2(index,:) = [];
        end
        
        if buttonallnormalizations == 1
            dipolmomentnormalized11_finished2 = dipolmomentnormalized11_finished;
            dipolmomentnormalized11_finished2(index,:) = [];
            dipolmomentnormalized21_finished2 = dipolmomentnormalized21_finished;
            dipolmomentnormalized21_finished2(index,:) = [];
            
            dipolmomentnormalized12_finished2 = dipolmomentnormalized12_finished;
            dipolmomentnormalized12_finished2(index,:) = [];
            dipolmomentnormalized22_finished2 = dipolmomentnormalized22_finished;
            dipolmomentnormalized22_finished2(index,:) = [];
            
            dipolmomentnormalized13_finished2 = dipolmomentnormalized13_finished;
            dipolmomentnormalized13_finished2(index,:) = [];
            dipolmomentnormalized23_finished2 = dipolmomentnormalized23_finished;
            dipolmomentnormalized23_finished2(index,:) = [];
            
            
            dipolmomentnormalized14_finished2 = dipolmomentnormalized14_finished;
            dipolmomentnormalized14_finished2(index,:) = [];
            dipolmomentnormalized24_finished2 = dipolmomentnormalized24_finished;
            dipolmomentnormalized24_finished2(index,:) = [];
            
            dipolmomentnormalized15_finished2 = dipolmomentnormalized15_finished;
            dipolmomentnormalized15_finished2(index,:) = [];
            dipolmomentnormalized25_finished2 = dipolmomentnormalized25_finished;
            dipolmomentnormalized25_finished2(index,:) = [];
            
            dipolmomentnormalized16_finished2 = dipolmomentnormalized16_finished;
            dipolmomentnormalized16_finished2(index,:) = [];
            dipolmomentnormalized26_finished2 = dipolmomentnormalized26_finished;
            dipolmomentnormalized26_finished2(index,:) = [];
            
            
            Rnormalized1_finished2 = Rnormalized1_finished;
            Rnormalized1_finished2(index,:) = [];
            
            Rnormalized2_finished2 = Rnormalized2_finished;
            Rnormalized2_finished2(index,:) = [];
            
            qnormalized1_finished2 = qnormalized1_finished;
            qnormalized1_finished2(index,:) = [];
            qnormalized2_finished2 = qnormalized2_finished;
            qnormalized2_finished2(index,:) = [];
            qnormalized3_finished2 = qnormalized3_finished;
            qnormalized3_finished2(index,:) = [];
            qnormalized4_finished2 = qnormalized4_finished;
            qnormalized4_finished2(index,:) = [];
            qnormalized5_finished2 = qnormalized5_finished;
            qnormalized5_finished2(index,:) = [];
            qnormalized6_finished2 = qnormalized6_finished;
            qnormalized6_finished2(index,:) = [];
            
            
        end
        
        
        
        
        
        
        
        dipolmoment_finished2 = dipolmoment_finished;
        dipolmoment_finished2(index,:, :) = [];
        
        
        diameter_maxvecfinished2 = diameter_maxvecfinished;
        diameter_maxvecfinished2(index) = [];
        
        diameter_avvecfinished2 = diameter_avvecfinished;
        diameter_avvecfinished2(index) = [];
        
        
        
        qposvec_finished2 = qposvec_finished;
        qposvec_finished2(index,:) = [];
        
        numberofpixels_finished2 = numberofpixels_finished;
        numberofpixels_finished2(index) = [];
        
        numberofpixelspos_finished2 = numberofpixelspos_finished;
        numberofpixelspos_finished2(index,:) = [];
        
        avintensity_finished2 = avintensity_finished;
        avintensity_finished2(index, :) = [];
        
        RposRmean_finished2 = RposRmean_finished;
        RposRmean_finished2(index,:, :) = [];
        
        RnegRmean_finished2 = RnegRmean_finished;
        RnegRmean_finished2(index,:,:) = [];
        
        RposRneg_finished2 = RposRneg_finished;
        RposRneg_finished2(index,:,:) = [];
        
        intensityvaluetotal_finished2 = intensityvaluetotal_finished;
        intensityvaluetotal_finished2(index,:) = [];
        
        if buttonforallparameters == 1
            
            displacementRposRnegMRposMRneg_finished2 = displacementRposRnegMRposMRneg_finished;
            displacementRposRnegMRposMRneg_finished2(index,:) = [];
            
            displacementDipoleMomentfromMiddle_finished2 = displacementDipoleMomentfromMiddle_finished;
            displacementDipoleMomentfromMiddle_finished2(index,:) = [];
            
            sumofdistancesqRpos_finished2 = sumofdistancesqRpos_finished;
            sumofdistancesqRpos_finished2(:, index) = [];
            
            percoverphi_finished2 = percoverphi_finished;
            percoverphi_finished2(:,index) = [];
            
            countessphi_finished2 = countessphi_finished;
            countessphi_finished2(:,index) = [];
            
            distancetoavvalphi_finished2 = distancetoavvalphi_finished;
            distancetoavvalphi_finished2(:,index) = [];
            
            final_distancestrengthlist_finished2 =final_distancestrengthlist_finished;
            final_distancestrengthlist_finished2(index,:) = [];
            
            zaehlerhowlonghowoftenphi_finished2 = zaehlerhowlonghowoftenphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    
                    for zaehler_index = 1:length(index)
                        zaehlerhowlonghowoftenphi_finished2{index(length(index) - zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            zaehlerhowlonghowoftenphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            endpointsphi_finished2 = endpointsphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        endpointsphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            endpointsphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            startpointsphi_finished2 = startpointsphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        startpointsphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            startpointsphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            meanpointsphi_finished2 = meanpointsphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        meanpointsphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            meanpointsphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            lengthpointsphi_finished2 = lengthpointsphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        lengthpointsphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            lengthpointsphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            distancetonextphi_finished2 = distancetonextphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:distancetonext(index)
                        distancetonextphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            distancetonextphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            distancetomeanphi_finished2 = distancetomeanphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        distancetomeanphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            distancetomeanphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            histogramvaluesphi_finished2 = histogramvaluesphi_finished;
            histogramvaluesphi_finished2(index, :,:) = [];
            
            clusterallphi_finished2 = clusterallphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterallphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterallphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            clusterlengthphi_finished2 = clusterlengthphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterlengthphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterlengthphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            allclusterinputphi_finished2 = allclusterinputphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        allclusterinputphi_finished2(:,index(length(index)-zaehler_index + 1)) = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        
                        allclusterinputphi_finished2(:,index(length(index)-zaehler_index+1)) = [];
                        
                    end
                end
            end
            
            clusterpercentphi_finished2 = clusterpercentphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterpercentphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterpercentphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            
            clusterpercenttoallpixelsposphi_finished2 = clusterpercenttoallpixelsposphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterpercenttoallpixelsposphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterpercenttoallpixelsposphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            arrayofclusterstrengthphi_finished2 = arrayofclusterstrengthphi_finished;
            arrayofclusterstrengthphi_finished2(index,:,:) = [];
            
            arrayofclustersdistancephi_finished2 = arrayofclustersdistancephi_finished;
            arrayofclustersdistancephi_finished2(index,:,:) = [];
            
            arrayofclustersphi_finished2 = arrayofclustersphi_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        arrayofclustersphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            arrayofclustersphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            startpointstheta_finished2 = startpointstheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        startpointstheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            startpointstheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            meanpointstheta_finished2 = meanpointstheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        meanpointstheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            meanpointstheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            lengthpointstheta_finished2 = lengthpointstheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        lengthpointstheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            lengthpointstheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            distancetonexttheta_finished2 = distancetonexttheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:distancetonext(index)
                        distancetonexttheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            distancetonexttheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            distancetomeantheta_finished2 = distancetomeantheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        distancetomeantheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            distancetomeantheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            histogramvaluestheta_finished2 = histogramvaluestheta_finished;
            histogramvaluestheta_finished2(index, :,:) = [];
            
            clusteralltheta_finished2 = clusteralltheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusteralltheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusteralltheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            clusterlengththeta_finished2 = clusterlengththeta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterlengththeta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterlengththeta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            allclusterinputtheta_finished2 = allclusterinputtheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        allclusterinputtheta_finished2(:,index(length(index)-zaehler_index + 1)) = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        
                        allclusterinputtheta_finished2(:,index(length(index)-zaehler_index+1)) = [];
                        
                    end
                end
            end
            
            clusterpercenttheta_finished2 = clusterpercenttheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterpercenttheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterpercenttheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            clusterpercenttoallpixelspostheta_finished2 = clusterpercenttoallpixelspostheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        clusterpercenttoallpixelspostheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            clusterpercenttoallpixelspostheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            arrayofclusterstrengththeta_finished2 = arrayofclusterstrengththeta_finished;
            arrayofclusterstrengththeta_finished2(index,:,:) = [];
            
            arrayofclustersdistancetheta_finished2 = arrayofclustersdistancetheta_finished;
            arrayofclustersdistancetheta_finished2(index,:,:) = [];
            
            arrayofclusterstheta_finished2 = arrayofclusterstheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        arrayofclusterstheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            arrayofclusterstheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index+1)} = [];
                        end
                    end
                end
            end
            
            percovertheta_finished2 = percovertheta_finished;
            percovertheta_finished2(:,index) = [];
            
            countesstheta_finished2 = countesstheta_finished;
            countesstheta_finished2(:,index) = [];
            
            distancetoavvaltheta_finished2 = distancetoavvaltheta_finished;
            distancetoavvaltheta_finished2(:,index) = [];
            
            zaehlerhowlonghowoftentheta_finished2 = zaehlerhowlonghowoftentheta_finished;
            if ~isempty(index)
                if numberofchannels ==1
                    for zaehler_index = 1:length(index)
                        zaehlerhowlonghowoftentheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            zaehlerhowlonghowoftentheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index + 1)} =[];
                        end
                    end
                end
            end
            
            endpointstheta_finished2 = endpointstheta_finished;
            if ~isempty(index)
                if numberofchannels == 1
                    for zaehler_index = 1:length(index)
                        endpointstheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            endpointstheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index + 1)} = [];
                        end
                    end
                    
                end
            end
            
            howmuchoveritatallphi_finished2 = howmuchoveritatallphi_finished;
            if ~isempty(index)
                if numberofchannels == 1
                    for zaehler_index = 1:length(index)
                        howmuchoveritatallphi_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            howmuchoveritatallphi_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index + 1)} = [];
                        end
                        
                    end
                end
            end
            
            howmuchoveritatalltheta_finished2 = howmuchoveritatalltheta_finished;
            if ~isempty(index)
                if numberofchannels == 1
                    for zaehler_index = 1:length(index)
                        howmuchoveritatalltheta_finished2{index(length(index)-zaehler_index + 1)} = [];
                    end
                else
                    for zaehler_index = 1:length(index)
                        for zaehler_numberofchannels = 1:numberofchannels
                            howmuchoveritatalltheta_finished2{zaehler_numberofchannels,index(length(index)-zaehler_index + 1)} = [];
                        end
                    end
                    
                end
            end
            
        end
        
        
        
        sorted_volumelist_finished2 = sorted_volumelist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_volumelist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_volumelist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        sorted_centroidlist_finished2 = sorted_centroidlist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_centroidlist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_centroidlist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        sorted_equivdiameterlist_finished2 = sorted_equivdiameterlist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_equivdiameterlist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_equivdiameterlist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        
        
        
        sorted_voxellistlist_finished2 = sorted_voxellistlist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_voxellistlist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_voxellistlist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        
        sorted_surfacearealist_finished2 = sorted_surfacearealist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_surfacearealist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_surfacearealist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        
        
        sorted_voxelvalueslist_finished2 = sorted_voxelvalueslist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_voxelvalueslist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_voxelvalueslist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        sorted_weightedcentroidlist_finished2 = sorted_weightedcentroidlist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_weightedcentroidlist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_weightedcentroidlist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        
        
        sorted_meanintensitylist_finished2 = sorted_meanintensitylist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_meanintensitylist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_meanintensitylist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        sorted_maxintensitylist_finished2 = sorted_maxintensitylist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_maxintensitylist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_maxintensitylist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        
        
        sorted_array_tofilldistancelist_finished2 = sorted_array_tofilldistancelist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_array_tofilldistancelist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_array_tofilldistancelist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        sorted_array_tofillstrengthlist_finished2 = sorted_array_tofillstrengthlist_finished;
        if ~isempty(index)
            if numberofchannels ==1
                
                for zaehler_index = 1:length(index)
                    sorted_array_tofillstrengthlist_finished2{index(length(index) - zaehler_index + 1)} = [];
                end
            else
                for zaehler_index = 1:length(index)
                    for zaehler_numberofchannels = 1:numberofchannels
                        sorted_array_tofillstrengthlist_finished2{index(length(index)-zaehler_index+1), zaehler_numberofchannels} = [];
                    end
                end
            end
        end
        
        
        try
            arrayfixed4distancelist_finished2 =  arrayfixed4distancelist_finished;
            arrayfixed4distancelist_finished2(index,:,:) = [];
            arrayfixed5strengthlist_finished2 = arrayfixed5strengthlist_finished;
            arrayfixed5strengthlist_finished2(index,:,:) = [];
        catch
        end
        
        global allchannelnames toignore buttongeneralqnormalization buttondiameter ...
            pathwayexportdata numberofimages
        
        namesofchannel = allchannelnames;
        
        findcolumns = 1:length(allchannelnames);
        
        for i = toignore
            
            namesofchannel{i} = [];
            findcolumns(i) = 0;
            
        end
        
        findcolumns(findcolumns==0) = [];
        
        naming = {};
        count = 1;
        
        for i = 1:length(allchannelnames)
            
            try if ~isempty(namesofchannel{i})
                    
                    naming{count} = char(namesofchannel{i});
                    count = count + 1;
                end
            catch
            end
        end
        
        
        namingPearson = {};
        count = 1;
        namesofchannel2 = rmmissing(namesofchannel);
        for i = 1:length(namesofchannel2)-1
            for j =i+1:length(namesofchannel2)
                namingPearson{count} = [namesofchannel2{i}, '-', namesofchannel2{j}];
                count = count + 1;
            end
        end
        
        
        if exist('naming')
            
            [thefilename, path, indx] = uiputfile(("*.txt"), 'Choose a Filename', string(pathwayexportdata));
            
            time = string(yyyymmdd(datetime('now')));
            thefilename2 = thefilename(1:end-4);
            
            
            if buttonPearson == 1
                Pearsontable = array2table(Pearson_finished2);
                Pearsontable.Properties.VariableNames = {namingPearson{1:length(namingPearson)}};
                thefilename = strcat(time, thefilename2, strjoin(['Pearsoncorrelationcoefficient', string(allchannelnames)]));
                writetable(Pearsontable, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(Pearsontable, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
            end
            
            if buttonallnormalizations == 0
                dipoltable = array2table(dipolmomentnormalized_finished2(:,findcolumns));
                dipoltable.Properties.VariableNames = {naming{1:length(naming)}};
                
                
                if buttondiameter ==1
                    
                    thefilename = strcat(time,thefilename2, strjoin(['NormalizedDipoleMomentMaxDiameterChargeOption', num2str(buttongeneralqnormalization),  string(allchannelnames)]));
                    
                else
                    
                    thefilename = strcat(time,thefilename2, strjoin(['NormalizedDipoleMomentAvDiameterChargeOption', num2str(buttongeneralqnormalization), string(allchannelnames)]));
                    
                end
                
                writetable(dipoltable, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                Rnormalizedtable = array2table(Rnormalized_finished2(:,findcolumns));
                Rnormalizedtable.Properties.VariableNames = {naming{1:length(naming)}};
                if buttondiameter ==1
                    Rnormalizedtable.Properties.DimensionNames = {'Distance normalized by max. diameter', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,'NormalizedDistanceMaxDiameter',strjoin(string(allchannelnames)) ));
                else
                    Rnormalizedtable.Properties.DimensionNames = {'Distance normalized by av. diameter', 'Analyzed Channels'};
                    thefilename = char(strcat(time, thefilename2,'NormalizedDistanceAvDiameter',strjoin(string(allchannelnames)) ));
                end
                
                writetable(Rnormalizedtable, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(Rnormalizedtable, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                qnormalizedtable = array2table(qnormalized_finished2(:,findcolumns));
                qnormalizedtable.Properties.VariableNames = {naming{1:length(naming)}};
                
                qnormalizedtable.Properties.DimensionNames = {['ChosenChargeOption', num2str(buttongeneralqnormalization)], 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption', num2str(buttongeneralqnormalization), string(allchannelnames)])));
                
                writetable(qnormalizedtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
            end
            
            
            
            if buttonallnormalizations == 1
                
                dipoltable11 = array2table(dipolmomentnormalized11_finished2(:,findcolumns));
                dipoltable11.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment11Option', string(allchannelnames)]));
                writetable(dipoltable11, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable11, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable12 = array2table(dipolmomentnormalized12_finished2(:,findcolumns));
                dipoltable12.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment12Option', string(allchannelnames)]));
                writetable(dipoltable12, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable12, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable21 = array2table(dipolmomentnormalized21_finished2(:,findcolumns));
                dipoltable21.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment21Option', string(allchannelnames)]));
                writetable(dipoltable21, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable21, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable22 = array2table(dipolmomentnormalized22_finished2(:,findcolumns));
                dipoltable22.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment22Option', string(allchannelnames)]));
                writetable(dipoltable22, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable22, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable13 = array2table(dipolmomentnormalized13_finished2(:,findcolumns));
                dipoltable13.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment13Option', string(allchannelnames)]));
                writetable(dipoltable13, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable13, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable23 = array2table(dipolmomentnormalized23_finished2(:,findcolumns));
                dipoltable23.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment23Option', string(allchannelnames)]));
                writetable(dipoltable23, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable23, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable14 = array2table(dipolmomentnormalized14_finished2(:,findcolumns));
                dipoltable14.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment14Option', string(allchannelnames)]));
                writetable(dipoltable14, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable14, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable24 = array2table(dipolmomentnormalized24_finished2(:,findcolumns));
                dipoltable24.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment24Option', string(allchannelnames)]));
                writetable(dipoltable24, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable24, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable15 = array2table(dipolmomentnormalized15_finished2(:,findcolumns));
                dipoltable15.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment15Option', string(allchannelnames)]));
                writetable(dipoltable15, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable15, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                
                dipoltable25 = array2table(dipolmomentnormalized25_finished2(:,findcolumns));
                dipoltable25.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment25Option', string(allchannelnames)]));
                writetable(dipoltable25, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable25, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                dipoltable16 = array2table(dipolmomentnormalized16_finished2(:,findcolumns));
                dipoltable16.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment16Option', string(allchannelnames)]));
                writetable(dipoltable16, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable16, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                
                dipoltable26 = array2table(dipolmomentnormalized26_finished2(:,findcolumns));
                dipoltable26.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time, thefilename2, strjoin(['NormalizedDipoleMoment26Option', string(allchannelnames)]));
                writetable(dipoltable26, char(strcat(string(pathwayexportdata), '\', thefilename, '.txt')), 'Delimiter', '\t', 'FileType', 'text')
                writetable(dipoltable26, char(strcat(string(pathwayexportdata), '\', thefilename, '.xls')), 'Delimiter', '\t', 'FileType', 'text')
                
                
                
                Rnormalizedtable1 = array2table(Rnormalized1_finished2(:,findcolumns));
                Rnormalizedtable1.Properties.VariableNames = {naming{1:length(naming)}};
                Rnormalizedtable1.Properties.DimensionNames = {'Distance normalized by max. diameter', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,'NormalizedDistanceMaxDiameter',strjoin(string(allchannelnames)) ));
                writetable(Rnormalizedtable1, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(Rnormalizedtable1, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                Rnormalizedtable2 = array2table(Rnormalized2_finished2(:,findcolumns));
                Rnormalizedtable2.Properties.VariableNames = {naming{1:length(naming)}};
                Rnormalizedtable2.Properties.DimensionNames = {'Distance normalized by av. diameter', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,'NormalizedDistanceAvDiameter',strjoin(string(allchannelnames)) ));
                writetable(Rnormalizedtable2, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(Rnormalizedtable2, char(strcat(string(pathwayexportdata), '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                qnormalizedtable1 = array2table(qnormalized1_finished2(:,findcolumns));
                qnormalizedtable1.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable1.Properties.DimensionNames = {'ChosenChargeOption1', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption1', string(allchannelnames)])));
                writetable(qnormalizedtable1, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable1, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                qnormalizedtable2 = array2table(qnormalized2_finished2(:,findcolumns));
                qnormalizedtable2.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable2.Properties.DimensionNames = {'ChosenChargeOption2', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption2', string(allchannelnames)])));
                writetable(qnormalizedtable2, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable2, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                qnormalizedtable3 = array2table(qnormalized3_finished2(:,findcolumns));
                qnormalizedtable3.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable3.Properties.DimensionNames = {'ChosenChargeOption3', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption3', string(allchannelnames)])));
                writetable(qnormalizedtable3, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable3, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                qnormalizedtable4 = array2table(qnormalized4_finished2(:,findcolumns));
                qnormalizedtable4.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable4.Properties.DimensionNames = {'ChosenChargeOption4', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption4', string(allchannelnames)])));
                writetable(qnormalizedtable4, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable4, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                qnormalizedtable5 = array2table(qnormalized5_finished2(:,findcolumns));
                qnormalizedtable5.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable5.Properties.DimensionNames = {'ChosenChargeOption5', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption5', string(allchannelnames)])));
                writetable(qnormalizedtable5, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable5, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                qnormalizedtable6 = array2table(qnormalized6_finished2(:,findcolumns));
                qnormalizedtable6.Properties.VariableNames = {naming{1:length(naming)}};
                qnormalizedtable6.Properties.DimensionNames = {'ChosenChargeOption6', 'Analyzed Channels'};
                thefilename = char(strcat(time, thefilename2,strjoin(['NormalizedChargeOption6', string(allchannelnames)])));
                writetable(qnormalizedtable6, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(qnormalizedtable6, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
            end
            
            diametertablemax = array2table(diameter_maxvecfinished2);
            diametertablemax.Properties.VariableNames = {'Max. diameter (nm)'};
            thefilename = char(strcat(time, thefilename2,'MaxDiameter',strjoin(string(allchannelnames)) ));
            writetable(diametertablemax, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(diametertablemax, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            diametertable = array2table(diameter_avvecfinished2);
            diametertable.Properties.VariableNames = {'Av. diameter (nm)'} ;
            thefilename = char(strcat(time, thefilename2,'AvDiameter',strjoin(string(allchannelnames)) ));
            
            writetable(diametertable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(diametertable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            
            qpostable = array2table(qposvec_finished2(:,findcolumns));
            qpostable.Properties.VariableNames = {naming{1:length(naming)}};
            qpostable.Properties.DimensionNames = {'Chargedensitypos', 'Analyzed Channels'};
            thefilename = char(strcat(time, thefilename2,'Chargedensitypos',strjoin(string(allchannelnames))));
            writetable(qpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(qpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            pixnumtable = array2table(numberofpixels_finished2);
            pixnumtable.Properties.VariableNames = {'Number of pixels per cell'};
            pixnumtable.Properties.DimensionNames = {'Number of pixels', 'cells'};
            thefilename = char(strcat(time,thefilename2,'NumberOfPixels',strjoin(string(allchannelnames))));
            writetable(pixnumtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(pixnumtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            numberofpixelspostable = array2table(numberofpixelspos_finished2(:,findcolumns));
            numberofpixelspostable.Properties.VariableNames = {naming{1:length(naming) }};
            thefilename = strcat(time,thefilename2,'PositivePixelNumber',strjoin(string(allchannelnames))) ;
            writetable(numberofpixelspostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(numberofpixelspostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            avintensitytable = array2table(avintensity_finished2(:,findcolumns));
            avintensitytable.Properties.VariableNames = {naming{1:length(naming) }};
            thefilename = strcat(time,thefilename2,'AveragedIntensityAUperPixel',strjoin(string(allchannelnames))) ;
            writetable(avintensitytable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(avintensitytable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            
            namingdipolmoment = {};
            t = 1;
            for i = 1:3:length(naming)*3
                namingdipolmoment{i} = strcat([naming{t}, 'x']);
                namingdipolmoment{i+1} = strcat([naming{t}, 'y']);
                namingdipolmoment{i+2} = strcat([naming{t}, 'z']);
                t = t + 1;
            end
            
            
            
            dipolmoment_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
            
            for i = 1:size(dipolmoment_table,1)
                zaehler = 1;
                for j = 1:length(findcolumns)
                    
                    z = findcolumns(j);
                    
                    dipolmoment_table(i,(j-1).*3+1:(j-1).*3+3) = dipolmoment_finished2(i,z,:);
                    
                    
                    zaehler = zaehler + 1;
                end
                
            end
            
            
            
            
            
            
            dipolmomenttable = array2table(dipolmoment_table);
            
            dipolmomenttable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
            thefilename = strcat(time,thefilename2,'DipolMoment',strjoin(string(allchannelnames))) ;
            writetable(dipolmomenttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(dipolmomenttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            
            RposRmean_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
            
            for i = 1:size(RposRmean_table,1)
                zaehler = 1;
                for j = 1:length(findcolumns)
                    
                    z = findcolumns(j);
                    
                    RposRmean_table(i,(j-1).*3+1:(j-1).*3+3) = RposRmean_finished2(i,z,:);
                    
                    
                    zaehler = zaehler + 1;
                end
                
            end
            
            
            RposRmeantable = array2table(RposRmean_table);
            RposRmeantable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
            thefilename = strcat(time,thefilename2,'RposRmean',strjoin(string(allchannelnames))) ;
            writetable(RposRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(RposRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            
            RnegRmean_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
            
            for i = 1:size(RnegRmean_table,1)
                zaehler = 1;
                for j = 1:length(findcolumns)
                    
                    z = findcolumns(j);
                    
                    RnegRmean_table(i,(j-1).*3+1:(j-1).*3+3) = RnegRmean_finished2(i,z,:);
                    
                    
                    zaehler = zaehler + 1;
                end
                
            end
            
            
            
            
            RnegRmeantable = array2table(RnegRmean_table);
            RnegRmeantable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
            thefilename = strcat(time,thefilename2,'RnegRmean',strjoin(string(allchannelnames))) ;
            writetable(RnegRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(RnegRmeantable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            RposRneg_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*3);
            
            for i = 1:size(RposRneg_table,1)
                zaehler = 1;
                for j = 1:length(findcolumns)
                    
                    z = findcolumns(j);
                    
                    RposRneg_table(i,(j-1).*3+1:(j-1).*3+3) = RposRneg_finished2(i,z,:);
                    
                    
                    zaehler = zaehler + 1;
                end
                
            end
            
            
            
            RposRnegtable = array2table(RposRneg_table);
            RposRnegtable.Properties.VariableNames = {namingdipolmoment{1:length(namingdipolmoment)}};
            thefilename = strcat(time,thefilename2,'RposRneg',strjoin(string(allchannelnames))) ;
            writetable(RposRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(RposRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            intensitytotaltable = array2table(intensityvaluetotal_finished2(:,findcolumns));
            intensitytotaltable.Properties.VariableNames = {naming{1:length(naming) }};
            thefilename = strcat(time,thefilename2,'TotalIntensity',strjoin(string(allchannelnames))) ;
            writetable(intensitytotaltable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
            writetable(intensitytotaltable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
            
            
            if ~isempty(index) && buttonimportmasksofcells == 0
                indextable = array2table(index);
                indextable.Properties.VariableNames = {'Cell index'};
                thefilename = strcat(time,thefilename2,'indexnottaken',strjoin(string(allchannelnames))) ;
                writetable(indextable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(indextable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
            end
            
            
            if buttonforallparameters == 1
                
                displacementRposRnegMRposMRnegtable = array2table(displacementRposRnegMRposMRneg_finished2(:,findcolumns));
                displacementRposRnegMRposMRnegtable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'displacementRposRnegMRposMRneg',strjoin(string(allchannelnames))) ;
                writetable(displacementRposRnegMRposMRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(displacementRposRnegMRposMRnegtable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                displacementDipoleMomentfromMiddletable = array2table(displacementDipoleMomentfromMiddle_finished2(:,findcolumns));
                displacementDipoleMomentfromMiddletable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'displacementDipoleMomentfromMiddle',strjoin(string(allchannelnames))) ;
                writetable(displacementDipoleMomentfromMiddletable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(displacementDipoleMomentfromMiddletable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                sumofdistancesqRpostable = array2table(sumofdistancesqRpos_finished2(findcolumns,:)');
                sumofdistancesqRpostable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sumofdistancesqRpos',strjoin(string(allchannelnames))) ;
                writetable(sumofdistancesqRpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sumofdistancesqRpostable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                percoverphitable = array2table(percoverphi_finished2(findcolumns,:)');
                percoverphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'percoverphi',strjoin(string(allchannelnames))) ;
                writetable(percoverphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(percoverphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                countessphitable = array2table(countessphi_finished2(findcolumns,:)');
                countessphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'countessphi',strjoin(string(allchannelnames))) ;
                writetable(countessphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(countessphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetoavvalphitable = array2table(distancetoavvalphi_finished2(findcolumns,:)');
                distancetoavvalphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetoavvalphi',strjoin(string(allchannelnames))) ;
                writetable(distancetoavvalphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetoavvalphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                percoverthetatable = array2table(percovertheta_finished2(findcolumns,:)');
                percoverthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'percovertheta',strjoin(string(allchannelnames))) ;
                writetable(percoverthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(percoverthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                countessthetatable = array2table(countesstheta_finished2(findcolumns,:)');
                countessthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'countesstheta',strjoin(string(allchannelnames))) ;
                writetable(countessthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(countessthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetoavvalthetatable = array2table(distancetoavvaltheta_finished2(findcolumns,:)');
                distancetoavvalthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetoavvaltheta',strjoin(string(allchannelnames))) ;
                writetable(distancetoavvalthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetoavvalthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                final_distancestrengthlisttable = array2table(final_distancestrengthlist_finished2(:,findcolumns));
                final_distancestrengthlisttable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'final_distancestrengthlist',strjoin(string(allchannelnames))) ;
                writetable(final_distancestrengthlisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(final_distancestrengthlisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                
                t = 1;
                zaehlerhowlonghowoftenphi_finished3 = {};
                zaehlerhowlonghowoftentheta_finished3 = {};
                endpointsphi_finished3 = {};
                endpointstheta_finished3 = {};
                howmuchoveritatallphi_finished3 = {};
                howmuchoveritatalltheta_finished3 = {};
                startpointsphi_finished3 = {};
                meanpointsphi_finished3 = {};
                lengthpointsphi_finished3 = {};
                distancetonextphi_finished3 = {};
                distancetomeanphi_finished3 = {};
                clusterallphi_finished3 = {};
                clusteralltheta_finished3 = {};
                startpointstheta_finished3 = {};
                meanpointstheta_finished3 = {};
                lengthpointstheta_finished3 = {};
                arrayofclusterstheta_finished3 = {};
                clusterpercenttoallpixelspostheta_finished3 = {};
                clusterpercenttheta_finished3 = {};
                
                clusterlengththeta_finished3 = {};
                arrayofclustersphi_finished3 = {};
                clusterpercenttoallpixelsposphi_finished3 = {};
                clusterpercentphi_finished3 = {};
                
                clusterlengthphi_finished3 = {};
                distancetomeantheta_finished3 = {};
                distancetonexttheta_finished3 = {};
                
                
                sorted_volumelist_finished3 = {};
                sorted_centroidlist_finished3 = {};
                sorted_equivdiameterlist_finished3  = {};
                sorted_voxellistlist_finished3 = {};
                sorted_surfacearealist_finished3   = {};
                sorted_voxelvalueslist_finished3 = {};
                sorted_weightedcentroidlist_finished3= {};
                sorted_meanintensitylist_finished3 = {};
                sorted_maxintensitylist_finished3 = {};
                sorted_array_tofillstrengthlist_finished3 = {};
                sorted_array_tofilldistancelist_finished3 = {};
                
                
                for i = findcolumns
                    for j = 1:size(zaehlerhowlonghowoftenphi_finished2,2)
                        zaehlerhowlonghowoftenphi_finished3{t,j} = zaehlerhowlonghowoftenphi_finished2{i,j};
                        zaehlerhowlonghowoftentheta_finished3{t,j} = zaehlerhowlonghowoftentheta_finished2{i,j};
                        endpointsphi_finished3{t,j} = endpointsphi_finished2{i,j};
                        endpointstheta_finished3{t,j} = endpointstheta_finished2{i,j};
                        howmuchoveritatallphi_finished3{t,j} = howmuchoveritatallphi_finished2{i,j};
                        howmuchoveritatalltheta_finished3{t,j} = howmuchoveritatalltheta_finished2{i,j};
                        startpointsphi_finished3{t,j} = startpointsphi_finished2{i,j};
                        meanpointsphi_finished3{t,j} = meanpointsphi_finished2{i,j};
                        lengthpointsphi_finished3{t,j} = lengthpointsphi_finished2{i,j};
                        distancetonextphi_finished3{t,j} = distancetonextphi_finished2{i,j};
                        distancetomeanphi_finished3{t,j} = distancetomeanphi_finished2{i,j};
                        clusterallphi_finished3{t,j} = clusterallphi_finished2{i,j};
                        clusteralltheta_finished3{t,j} = clusteralltheta_finished2{i,j};
                        startpointstheta_finished3{t,j} =  startpointstheta_finished2{i,j};
                        meanpointstheta_finished3{t,j} =  meanpointstheta_finished2{i,j};
                        lengthpointstheta_finished3{t,j} = lengthpointstheta_finished2{i,j};
                        arrayofclusterstheta_finished3{t,j} = arrayofclusterstheta_finished2{i,j};
                        clusterpercenttoallpixelspostheta_finished3{t,j} = clusterpercenttoallpixelspostheta_finished2{i,j};
                        clusterpercenttheta_finished3{t,j} = clusterpercenttheta_finished2{i,j};
                        
                        
                        clusterlengththeta_finished3{t,j} = clusterlengththeta_finished2{i,j};
                        arrayofclustersphi_finished3{t,j} = arrayofclustersphi_finished2{i,j};
                        clusterpercenttoallpixelsposphi_finished3{t,j} = clusterpercenttoallpixelsposphi_finished2{i,j};
                        clusterpercentphi_finished3{t,j} = clusterpercentphi_finished2{i,j};
                        
                        
                        clusterlengthphi_finished3{t,j} = clusterlengthphi_finished2{i,j};
                        distancetomeantheta_finished3{t,j} = distancetomeantheta_finished2{i,j};
                        distancetonexttheta_finished3{t,j} = distancetonexttheta_finished2{i,j};
                        
                        
                        
                        
                        sorted_volumelist_finished3{j,t} = sorted_volumelist_finished2{j,i} ;
                        sorted_centroidlist_finished3{j,t} = sorted_centroidlist_finished2{j,i};
                        sorted_equivdiameterlist_finished3{j,t}  = sorted_equivdiameterlist_finished2{j,i};
                        sorted_voxellistlist_finished3{j,t} = sorted_voxellistlist_finished2{j,i} ;
                        sorted_surfacearealist_finished3{j,t}   =  sorted_surfacearealist_finished2{j,i};
                        sorted_voxelvalueslist_finished3{j,t} = sorted_voxelvalueslist_finished2{j,i};
                        sorted_weightedcentroidlist_finished3{j,t}=sorted_weightedcentroidlist_finished2{j,i};
                        sorted_meanintensitylist_finished3{j,t} = sorted_meanintensitylist_finished2{j,i};
                        sorted_maxintensitylist_finished3{j,t} =sorted_maxintensitylist_finished2{j,i};
                        
                        sorted_array_tofillstrengthlist_finished3{j,t} = sorted_array_tofillstrengthlist_finished2{j,i};
                        sorted_array_tofilldistancelist_finished3{j,t} = sorted_array_tofilldistancelist_finished2{j,i};
                        
                    end
                    t = t + 1;
                end
                
                
                %    zaehlerhowlonghowoftenphitable = array2table(zaehlerhowlonghowoftenphi_finished3');
                %    zaehlerhowlonghowoftenphitable.Properties.VariableNames = {naming{1:length(naming) }};
                %    thefilename = strcat(time,thefilename2,'zaehlerhowlonghowoftenphi',strjoin(string(allchannelnames))) ;
                %    writetable(zaehlerhowlonghowoftenphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                %    writetable(zaehlerhowlonghowoftenphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                %    zaehlerhowlonghowoftenthetatable = array2table(zaehlerhowlonghowoftentheta_finished3');
                %    zaehlerhowlonghowoftenthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                %    thefilename = strcat(time,thefilename2,'zaehlerhowlonghowoftentheta',strjoin(string(allchannelnames))) ;
                %    writetable(zaehlerhowlonghowoftenthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                %    writetable(zaehlerhowlonghowoftenthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                endpointsphitable = array2table(endpointsphi_finished3');
                endpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'endpointsphi',strjoin(string(allchannelnames))) ;
                writetable(endpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(endpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                endpointsthetatable = array2table(endpointstheta_finished3');
                endpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'endpointstheta',strjoin(string(allchannelnames))) ;
                writetable(endpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(endpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                howmuchoveritatallphitable = array2table(howmuchoveritatallphi_finished3');
                howmuchoveritatallphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'howmuchoveritatallphi',strjoin(string(allchannelnames))) ;
                writetable(howmuchoveritatallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(howmuchoveritatallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                howmuchoveritatallthetatable = array2table(howmuchoveritatalltheta_finished3');
                howmuchoveritatallthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'howmuchoveritatalltheta',strjoin(string(allchannelnames))) ;
                writetable(howmuchoveritatallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(howmuchoveritatallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                startpointsphitable = array2table(startpointsphi_finished3');
                startpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'startpointsphi',strjoin(string(allchannelnames))) ;
                writetable(startpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(startpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                meanpointsphitable = array2table(meanpointsphi_finished3');
                meanpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'meanpointsphi',strjoin(string(allchannelnames))) ;
                writetable(meanpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(meanpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                lengthpointsphitable = array2table(lengthpointsphi_finished3');
                lengthpointsphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'lengthpointsphi',strjoin(string(allchannelnames))) ;
                writetable(lengthpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(lengthpointsphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                naminghistogram = {};
                t = 1;
                for i = 1:36:length(naming)*36
                    naminghistogram{i} = strcat([naming{t}, '[0-10°)']);
                    naminghistogram{i+1} = strcat([naming{t}, '[10-20°)']);
                    naminghistogram{i+2} = strcat([naming{t}, '[20-30°)']);
                    naminghistogram{i+3} = strcat([naming{t}, '[30-40°)']);
                    naminghistogram{i+4} = strcat([naming{t}, '[40-50°)']);
                    naminghistogram{i+5} = strcat([naming{t}, '[50-60°)']);
                    naminghistogram{i+6} = strcat([naming{t}, '[60-70°)']);
                    naminghistogram{i+7} = strcat([naming{t}, '[70-80°)']);
                    naminghistogram{i+8} = strcat([naming{t}, '[80-90°)']);
                    naminghistogram{i+9} = strcat([naming{t}, '[90-100°)']);
                    naminghistogram{i+10} = strcat([naming{t}, '[100-110°)']);
                    naminghistogram{i+11} = strcat([naming{t}, '[110-120°)']);
                    naminghistogram{i+12} = strcat([naming{t}, '[120-130°)']);
                    naminghistogram{i+13} = strcat([naming{t}, '[130-140°)']);
                    naminghistogram{i+14} = strcat([naming{t}, '[140-150°)']);
                    naminghistogram{i+15} = strcat([naming{t}, '[150-160°)']);
                    naminghistogram{i+16} = strcat([naming{t}, '[160-170°)']);
                    naminghistogram{i+17} = strcat([naming{t}, '[170-180°)']);
                    naminghistogram{i+18} = strcat([naming{t}, '[180-190°)']);
                    naminghistogram{i+19} = strcat([naming{t}, '[190-200°)']);
                    naminghistogram{i+20} = strcat([naming{t}, '[200-210°)']);
                    naminghistogram{i+21} = strcat([naming{t}, '[210-220°)']);
                    naminghistogram{i+22} = strcat([naming{t}, '[220-230°)']);
                    naminghistogram{i+23} = strcat([naming{t}, '[230-240°)']);
                    naminghistogram{i+24} = strcat([naming{t}, '[240-250°)']);
                    naminghistogram{i+25}  = strcat([naming{t}, '[250-260°)']);
                    naminghistogram{i+26}  = strcat([naming{t}, '[260-270°)']);
                    naminghistogram{i+27}  = strcat([naming{t}, '[270-280°)']);
                    naminghistogram{i+28}  = strcat([naming{t}, '[280-290°)']);
                    naminghistogram{i+29}  = strcat([naming{t}, '[290-300°)']);
                    naminghistogram{i+30}  = strcat([naming{t}, '[300-310°)']);
                    naminghistogram{i+31} = strcat([naming{t}, '[310-320°)']);
                    naminghistogram{i+32} = strcat([naming{t}, '[320-330°)']);
                    naminghistogram{i+33} = strcat([naming{t}, '[330-340°)']);
                    naminghistogram{i+34} = strcat([naming{t}, '[340-350°)']);
                    naminghistogram{i+35} = strcat([naming{t}, '[350-360°]']);
                    
                    t = t + 1;
                end
                
                global numberofimages allchannelnames pathwayexportdata numberofchannels
                
                
                
                histogramvaluesphi_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*36);
                
                for i = 1:size(histogramvaluesphi_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        histogramvaluesphi_table(i,(j-1).*36+1:(j-1).*36+36) = histogramvaluesphi_finished2(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                
                
                histogramvaluesphitable = array2table(histogramvaluesphi_table);
                histogramvaluesphitable.Properties.VariableNames = {naminghistogram{1:length(naminghistogram)}};
                thefilename = strcat(time,thefilename2,'histogramvaluesphi',strjoin(string(allchannelnames))) ;
                writetable(histogramvaluesphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(histogramvaluesphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetonextphitable = array2table(distancetonextphi_finished3');
                distancetonextphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetonextphi',strjoin(string(allchannelnames))) ;
                writetable(distancetonextphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetonextphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetomeanphitable = array2table(distancetomeanphi_finished3');
                distancetomeanphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetomeanphi',strjoin(string(allchannelnames))) ;
                writetable(distancetomeanphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetomeanphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                %      clusterallphitable = array2table(clusterallphi_finished3');
                %      clusterallphitable.Properties.VariableNames = {naming{1:length(naming) }};
                %      thefilename = strcat(time,thefilename2,'clusterallphi',strjoin(string(allchannelnames))) ;
                %      writetable(clusterallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                %      writetable(clusterallphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                %       clusterallthetatable = array2table(clusteralltheta_finished3');
                %       clusterallthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                %       thefilename = strcat(time,thefilename2,'clusteralltheta',strjoin(string(allchannelnames))) ;
                %       writetable(clusterallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                %       writetable(clusterallthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                startpointsthetatable = array2table(startpointstheta_finished3');
                startpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'startpointstheta',strjoin(string(allchannelnames))) ;
                writetable(startpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(startpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                meanpointsthetatable = array2table(meanpointstheta_finished3');
                meanpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'meanpointstheta',strjoin(string(allchannelnames))) ;
                writetable(meanpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(meanpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                lengthpointsthetatable = array2table(lengthpointstheta_finished3');
                lengthpointsthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'lengthpointstheta',strjoin(string(allchannelnames))) ;
                writetable(lengthpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(lengthpointsthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                naminghistogram2 = {};
                t = 1;
                for i = 1:18:length(naming)*18
                    naminghistogram2{i} = strcat([naming{t}, '[0-10°)']);
                    naminghistogram2{i+1} = strcat([naming{t}, '[10-20°)']);
                    naminghistogram2{i+2} = strcat([naming{t}, '[20-30°)']);
                    naminghistogram2{i+3} = strcat([naming{t}, '[30-40°)']);
                    naminghistogram2{i+4} = strcat([naming{t}, '[40-50°)']);
                    naminghistogram2{i+5} = strcat([naming{t}, '[50-60°)']);
                    naminghistogram2{i+6} = strcat([naming{t}, '[60-70°)']);
                    naminghistogram2{i+7} = strcat([naming{t}, '[70-80°)']);
                    naminghistogram2{i+8} = strcat([naming{t}, '[80-90°)']);
                    naminghistogram2{i+9} = strcat([naming{t}, '[90-100°)']);
                    naminghistogram2{i+10} = strcat([naming{t}, '[100-110°)']);
                    naminghistogram2{i+11} = strcat([naming{t}, '[110-120°)']);
                    naminghistogram2{i+12} = strcat([naming{t}, '[120-130°)']);
                    naminghistogram2{i+13} = strcat([naming{t}, '[130-140°)']);
                    naminghistogram2{i+14} = strcat([naming{t}, '[140-150°)']);
                    naminghistogram2{i+15} = strcat([naming{t}, '[150-160°)']);
                    naminghistogram2{i+16} = strcat([naming{t}, '[160-170°)']);
                    naminghistogram2{i+17} = strcat([naming{t}, '[170-180°]']);
                    
                    t = t + 1;
                end
                
                
                
                histogramvaluestheta_table = zeros(numberofimages - sum(nottotake), length(findcolumns)*18);
                
                for i = 1:size(histogramvaluestheta_table,1)
                    zaehler = 1;
                    for j = 1:length(findcolumns)
                        
                        z = findcolumns(j);
                        
                        histogramvaluestheta_table(i,(j-1).*18+1:(j-1).*18+18) = histogramvaluestheta_finished2(i,z,:);
                        
                        
                        zaehler = zaehler + 1;
                    end
                    
                end
                
                
                
                
                
                histogramvaluesthetatable = array2table(histogramvaluestheta_table);
                histogramvaluesthetatable.Properties.VariableNames = {naminghistogram2{1:length(naminghistogram2)}};
                thefilename = strcat(time,thefilename2,'histogramvaluestheta',strjoin(string(allchannelnames))) ;
                writetable(histogramvaluesthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(histogramvaluesthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetonextthetatable = array2table(distancetonexttheta_finished3');
                distancetonextthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetonexttheta',strjoin(string(allchannelnames))) ;
                writetable(distancetonextthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetonextthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                distancetomeanthetatable = array2table(distancetomeantheta_finished3');
                distancetomeanthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'distancetomeantheta',strjoin(string(allchannelnames))) ;
                writetable(distancetomeanthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(distancetomeanthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterlengthphitable = array2table(clusterlengthphi_finished3');
                clusterlengthphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterlengthphi',strjoin(string(allchannelnames))) ;
                writetable(clusterlengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterlengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                allclusterinputphitable = array2table(allclusterinputphi_finished2(findcolumns, :)');
                allclusterinputphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'allclusterinputphi',strjoin(string(allchannelnames))) ;
                writetable(allclusterinputphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(allclusterinputphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterpercentphitable = array2table(clusterpercentphi_finished3');
                clusterpercentphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterpercentphi',strjoin(string(allchannelnames))) ;
                writetable(clusterpercentphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterpercentphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterpercenttoallpixelsposphitable = array2table(clusterpercenttoallpixelsposphi_finished3');
                clusterpercenttoallpixelsposphitable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterpercenttoallpixelsposphi',strjoin(string(allchannelnames))) ;
                writetable(clusterpercenttoallpixelsposphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterpercenttoallpixelsposphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                variablemaxs = zeros(1,length(findcolumns));
                zaehler = 1;
                %variablemax = 0;
                
                for j = findcolumns
                    variablemax = 0;
                    
                    for i = 1:numberofimages - sum(nottotake)
                        
                        
                        
                        
                        variablea = size(arrayofclustersphi_finished2{j,i},1);
                        
                        if variablea > variablemax
                            variablemax = variablea;
                        end
                        
                        
                        
                    end
                    
                    variablemaxs(zaehler) = variablemax;
                    zaehler = zaehler + 1;
                    
                    
                    
                end
                zaehler = [];
                
                variablemaxsuseful = zeros(1, length(findcolumns)-1);
                
                for i = 1:size(variablemaxsuseful,2)
                    % if i == 1
                    variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                    %else
                    
                    %   variablemaxsuseful(i) = variablemaxs(i).*3
                    
                    
                end
                
                
                
                
                
                
                
                arrayofclustersphi_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                
                arrayofclustersphi_finished3 = arrayofclustersphi_finished2';
                
                
                onearray = [];
                allinarray = [];
                for i = 1:numberofimages - sum(nottotake)
                    zaehler = 1;
                    for j = findcolumns
                        
                        for z = 1:size(arrayofclustersphi_finished3{i,j},1)
                            
                            onearray = arrayofclustersphi_finished3{i,j}(z,:);
                            
                            allinarray = [allinarray, onearray];
                            
                            
                        end
                        
                        
                        if zaehler == 1
                            arrayofclustersphi_table(i, 1:length(allinarray)) = allinarray;
                            
                        else
                            % variablemaxs(zaehler)+1
                            
                            arrayofclustersphi_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                            
                        end
                        
                        allinarray = [];
                        zaehler = zaehler + 1;
                    end
                    
                    
                    
                    
                    
                    
                end
                
                naming_arrayofclustersphi = {};
                
                zaehler = 1;
                for i = 1:size(arrayofclustersphi_table,2)
                    
                    if zaehler > length(variablemaxsuseful)
                        
                    else
                        if i > variablemaxsuseful(zaehler) - 1
                            zaehler = zaehler + 1;
                        end
                    end
                    naming_arrayofclustersphi{i} = [naming{zaehler}, num2str(i)];
                    
                end
                
                
                arrayofclustersphitable = array2table(arrayofclustersphi_table);
                arrayofclustersphitable.Properties.VariableNames = {naming_arrayofclustersphi{1:length(naming_arrayofclustersphi)}};
                thefilename = strcat(time,thefilename2,'arrayofclustersphi',strjoin(string(allchannelnames))) ;
                writetable(arrayofclustersphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclustersphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterlengththetatable = array2table(clusterlengththeta_finished3');
                clusterlengththetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterlengththeta',strjoin(string(allchannelnames))) ;
                writetable(clusterlengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterlengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                allclusterinputthetatable = array2table(allclusterinputtheta_finished2(findcolumns, :)');
                allclusterinputthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'allclusterinputtheta',strjoin(string(allchannelnames))) ;
                writetable(allclusterinputthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(allclusterinputthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterpercentthetatable = array2table(clusterpercenttheta_finished3');
                clusterpercentthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterpercenttheta',strjoin(string(allchannelnames))) ;
                writetable(clusterpercentthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterpercentthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                clusterpercenttoallpixelsposthetatable = array2table(clusterpercenttoallpixelspostheta_finished3');
                clusterpercenttoallpixelsposthetatable.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'clusterpercenttoallpixelspostheta',strjoin(string(allchannelnames))) ;
                writetable(clusterpercenttoallpixelsposthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(clusterpercenttoallpixelsposthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                variablemaxs = zeros(1,length(findcolumns));
                zaehler = 1;
                %variablemax = 0;
                
                for j = findcolumns
                    variablemax = 0;
                    
                    for i = 1:numberofimages - sum(nottotake)
                        
                        
                        
                        
                        variablea = size(arrayofclusterstheta_finished2{j,i},1);
                        
                        if variablea > variablemax
                            variablemax = variablea;
                        end
                        
                        
                        
                    end
                    
                    variablemaxs(zaehler) = variablemax;
                    zaehler = zaehler + 1;
                    
                    
                    
                end
                zaehler = [];
                
                variablemaxsuseful = zeros(1, length(findcolumns)-1);
                
                for i = 1:size(variablemaxsuseful,2)
                    % if i == 1
                    variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                    %else
                    
                    %   variablemaxsuseful(i) = variablemaxs(i).*3
                    
                    
                end
                
                
                
                
                
                
                
                arrayofclusterstheta_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                
                arrayofclusterstheta_finished3 = arrayofclusterstheta_finished2';
                
                
                onearray = [];
                allinarray = [];
                for i = 1:numberofimages - sum(nottotake)
                    zaehler = 1;
                    for j = findcolumns
                        
                        for z = 1:size(arrayofclusterstheta_finished3{i,j},1)
                            
                            onearray = arrayofclusterstheta_finished3{i,j}(z,:);
                            
                            allinarray = [allinarray, onearray];
                            
                            
                        end
                        
                        
                        if zaehler == 1
                            arrayofclusterstheta_table(i, 1:length(allinarray)) = allinarray;
                            
                        else
                            % variablemaxs(zaehler)+1
                            
                            arrayofclusterstheta_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                            
                        end
                        
                        allinarray = [];
                        zaehler = zaehler + 1;
                    end
                    
                    
                    
                    
                    
                    
                end
                
                naming_arrayofclusterstheta = {};
                
                zaehler = 1;
                for i = 1:size(arrayofclusterstheta_table,2)
                    
                    if zaehler > length(variablemaxsuseful)
                        
                    else
                        if i > variablemaxsuseful(zaehler) - 1
                            zaehler = zaehler + 1;
                        end
                    end
                    naming_arrayofclusterstheta{i} =  [naming{zaehler}, num2str(i)];
                    
                end
                
                
                
                
                arrayofclustersthetatable = array2table(arrayofclusterstheta_table);
                arrayofclustersthetatable.Properties.VariableNames = {naming_arrayofclusterstheta{1:length(naming_arrayofclusterstheta) }};
                thefilename = strcat(time,thefilename2,'arrayofclusterstheta',strjoin(string(allchannelnames))) ;
                writetable(arrayofclustersthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclustersthetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                strength= {};
                t = 1;
                for i = 1:5:length(naming)*5
                    strength{i} = strcat([naming{t}, 'Rank 1']);
                    strength{i+1} = strcat([naming{t}, 'Rank 2']);
                    strength{i+2} = strcat([naming{t}, 'Rank 3']);
                    strength{i+3} = strcat([naming{t}, 'Rank 4']);
                    strength{i+4} = strcat([naming{t}, 'Rank 5']);
                    
                    t = t + 1;
                end
                
                distancerank= {};
                t = 1;
                for i = 1:4:length(naming)*4
                    distancerank{i} = strcat([naming{t}, 'Rank 1']);
                    distancerank{i+1} = strcat([naming{t}, 'Rank 2']);
                    distancerank{i+2} = strcat([naming{t}, 'Rank 3']);
                    distancerank{i+3} = strcat([naming{t}, 'Rank 4']);
                    
                    
                    t = t + 1;
                end
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:5
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayofclusterstrengthphi_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayofclusterstrengthphi_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayofclusterstrengthphi_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayofclusterstrengthphi_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                
                
                arrayofclusterstrengthphitable = array2table(zahlenreihe_big);
                arrayofclusterstrengthphitable.Properties.VariableNames = {strength{1:length(strength) }};
                thefilename = strcat(time,thefilename2,'arrayofclusterstrengthphi',strjoin(string(allchannelnames))) ;
                writetable(arrayofclusterstrengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclusterstrengthphitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:5
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayofclusterstrengththeta_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayofclusterstrengththeta_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayofclusterstrengththeta_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayofclusterstrengththeta_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                arrayofclusterstrengththetatable = array2table(zahlenreihe_big);
                arrayofclusterstrengththetatable.Properties.VariableNames = {strength{1:length(strength) }};
                thefilename = strcat(time,thefilename2,'arrayofclusterstrengththeta',strjoin(string(allchannelnames))) ;
                writetable(arrayofclusterstrengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclusterstrengththetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:5
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayofclustersdistancephi_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayofclustersdistancephi_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayofclustersdistancephi_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayofclustersdistancephi_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                
                arrayofclustersdistancephitable = array2table(zahlenreihe_big);
                
                
                
                
                
                arrayofclustersdistancephitable.Properties.VariableNames = {strength{1:length(strength) }};
                thefilename = strcat(time,thefilename2,'arrayofclustersdistancephi',strjoin(string(allchannelnames))) ;
                writetable(arrayofclustersdistancephitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclustersdistancephitable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:5
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayofclustersdistancetheta_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayofclustersdistancetheta_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayofclustersdistancetheta_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayofclustersdistancetheta_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                
                arrayofclustersdistancethetatable = array2table(zahlenreihe_big);
                arrayofclustersdistancethetatable.Properties.VariableNames = {strength{1:length(strength) }};
                thefilename = strcat(time,thefilename2,'arrayofclustersdistancetheta',strjoin(string(allchannelnames))) ;
                writetable(arrayofclustersdistancethetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayofclustersdistancethetatable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                
                sorted_volumelist3table   = array2table(sorted_volumelist_finished3);
                
                sorted_volumelist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_volumelist',strjoin(string(allchannelnames))) ;
                writetable(sorted_volumelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_volumelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                variablemaxs = zeros(1,length(findcolumns));
                zaehler = 1;
                
                
                for j = findcolumns
                    variablemax = 0;
                    
                    for i = 1:numberofimages - sum(nottotake)
                        
                        
                        
                        
                        variablea = size(sorted_centroidlist_finished2{i,j},1);
                        
                        if variablea > variablemax
                            variablemax = variablea;
                        end
                        
                        
                        
                    end
                    
                    variablemaxs(zaehler) = variablemax;
                    zaehler = zaehler + 1;
                    
                    
                    
                end
                zaehler = [];
                
                variablemaxsuseful = zeros(1, length(findcolumns)-1);
                
                for i = 1:size(variablemaxsuseful,2)
                    
                    variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                    
                end
                
                
                
                
                
                
                
                sortedcentroid_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                
                
                
                onearray = [];
                allinarray = [];
                for i = 1:numberofimages - sum(nottotake)
                    zaehler = 1;
                    for j = findcolumns
                        
                        for z = 1:size(sorted_centroidlist_finished2{i,j},1)
                            
                            onearray = sorted_centroidlist_finished2{i,j}(z,:);
                            
                            allinarray = [allinarray, onearray];
                            
                            
                        end
                        
                        
                        if zaehler == 1
                            sortedcentroid_table(i, 1:length(allinarray)) = allinarray;
                            
                        else
                            % variablemaxs(zaehler)+1
                            
                            sortedcentroid_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                            
                        end
                        
                        allinarray = [];
                        zaehler = zaehler + 1;
                    end
                    
                    
                    
                    
                    
                    
                end
                
                
                
                
                naming_sortedcentroid = {};
                
                zaehler = 1;
                for i = 1:size(sortedcentroid_table,2)
                    
                    if zaehler > length(variablemaxsuseful)
                        
                    else
                        if i > variablemaxsuseful(zaehler) - 1
                            zaehler = zaehler + 1;
                        end
                    end
                    naming_sortedcentroid{i} = [naming{zaehler}, num2str(i)];
                    
                end
                
                
                
                sorted_centroidlist3table   = array2table(sortedcentroid_table);
                
                sorted_centroidlist3table.Properties.VariableNames = {naming_sortedcentroid{1:length(naming_sortedcentroid) }};
                thefilename = strcat(time,thefilename2,'sorted_centroidlist',strjoin(string(allchannelnames))) ;
                writetable(sorted_centroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_centroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                sorted_equivdiameterlist3table   = array2table(sorted_equivdiameterlist_finished3);
                
                sorted_equivdiameterlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_equivdiameterlist',strjoin(string(allchannelnames))) ;
                writetable(sorted_equivdiameterlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_equivdiameterlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                %    sorted_voxellistlist3table   = array2table(sorted_voxellistlist_finished3);
                
                %   sorted_voxellistlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                %  thefilename = strcat(time,thefilename2,'sorted_voxellistlist',strjoin(string(allchannelnames))) ;
                % writetable(sorted_voxellistlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                % writetable(sorted_voxellistlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                sorted_surfacearealist3table   = array2table(sorted_surfacearealist_finished3);
                
                sorted_surfacearealist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_surfacearealist',strjoin(string(allchannelnames))) ;
                writetable(sorted_surfacearealist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_surfacearealist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                %        sorted_voxelvalueslist3table   = array2table(sorted_voxelvalueslist_finished3);
                
                %       sorted_voxelvalueslist3table.Properties.VariableNames = {naming{1:length(naming) }};
                %      thefilename = strcat(time,thefilename2,'sorted_voxelvalueslist',strjoin(string(allchannelnames))) ;
                %     writetable(sorted_voxelvalueslist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                %    writetable(sorted_voxelvalueslist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                variablemaxs = zeros(1,length(findcolumns));
                zaehler = 1;
                
                
                for j = findcolumns
                    variablemax = 0;
                    
                    for i = 1:numberofimages - sum(nottotake)
                        
                        
                        
                        
                        variablea = size(sorted_weightedcentroidlist_finished2{i,j},1);
                        
                        if variablea > variablemax
                            variablemax = variablea;
                        end
                        
                        
                        
                    end
                    
                    variablemaxs(zaehler) = variablemax;
                    zaehler = zaehler + 1;
                    
                    
                    
                end
                zaehler = [];
                
                variablemaxsuseful = zeros(1, length(findcolumns)-1);
                
                for i = 1:size(variablemaxsuseful,2)
                    
                    variablemaxsuseful(i) = sum(variablemaxs(1:i)).*3 + 1;
                    
                end
                
                
                
                
                
                
                
                sortedweightedcentroid_table = zeros(numberofimages - sum(nottotake), sum(variablemaxs)*3);
                
                
                
                onearray = [];
                allinarray = [];
                for i = 1:numberofimages - sum(nottotake)
                    zaehler = 1;
                    for j = findcolumns
                        
                        for z = 1:size(sorted_weightedcentroidlist_finished2{i,j},1)
                            
                            onearray = sorted_weightedcentroidlist_finished2{i,j}(z,:);
                            
                            allinarray = [allinarray, onearray];
                            
                            
                        end
                        
                        
                        if zaehler == 1
                            sortedweightedcentroid_table(i, 1:length(allinarray)) = allinarray;
                            
                        else
                            % variablemaxs(zaehler)+1
                            
                            sortedweightedcentroid_table(i, variablemaxsuseful(zaehler-1):variablemaxsuseful(zaehler-1)+length(allinarray)-1) = allinarray;
                            
                        end
                        
                        allinarray = [];
                        zaehler = zaehler + 1;
                    end
                    
                    
                    
                    
                    
                    
                end
                
                
                
                
                naming_sortedweightedcentroid = {};
                
                zaehler = 1;
                for i = 1:size(sortedweightedcentroid_table,2)
                    
                    if zaehler > length(variablemaxsuseful)
                        
                    else
                        if i > variablemaxsuseful(zaehler) - 1
                            zaehler = zaehler + 1;
                        end
                    end
                    naming_sortedweightedcentroid{i} = [naming{zaehler}, num2str(i)];
                    
                end
                
                
                
                sorted_weightedcentroidlist3table   = array2table(sortedweightedcentroid_table);
                
                sorted_weightedcentroidlist3table.Properties.VariableNames = {naming_sortedweightedcentroid{1:length(naming_sortedweightedcentroid) }};
                thefilename = strcat(time,thefilename2,'sorted_weightedcentroidlist',strjoin(string(allchannelnames))) ;
                writetable(sorted_weightedcentroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_weightedcentroidlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                sorted_meanintensitylist3table   = array2table(sorted_meanintensitylist_finished3);
                
                sorted_meanintensitylist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_meanintensitylist',strjoin(string(allchannelnames))) ;
                writetable(sorted_meanintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_meanintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                sorted_maxintensitylist3table   = array2table(sorted_maxintensitylist_finished3);
                
                sorted_maxintensitylist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_maxintensitylist',strjoin(string(allchannelnames))) ;
                writetable(sorted_maxintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_maxintensitylist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:4
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayfixed4distancelist_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayfixed4distancelist_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayfixed4distancelist_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayfixed4distancelist_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                
                
                
                % distancerank
                % size(zahlenreihe_big)
                % size(zahlenreihe_big)
                
                arrayfixed4distancelisttable = array2table(zahlenreihe_big);
                arrayfixed4distancelisttable.Properties.VariableNames = {distancerank{1:length(distancerank)}};
                thefilename = strcat(time,thefilename2,'arrayfixed4distance',strjoin(string(allchannelnames))) ;
                writetable(arrayfixed4distancelisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayfixed4distancelisttable, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                zahlenreihe = [];
                zahlenreihe_klein = [];
                zahlenreihe_big = [];
                
                for i = 1:numberofimages - sum(nottotake)
                    for j = findcolumns
                        
                        for t = 1:5
                            if isempty(zahlenreihe)
                                zahlenreihe = arrayfixed5strengthlist_finished2(i,j,t);
                            else
                                
                                zahlenreihe = [zahlenreihe, arrayfixed5strengthlist_finished2(i,j,t)];
                            end
                            
                            if isempty(zahlenreihe_klein)
                                zahlenreihe_klein = arrayfixed5strengthlist_finished2(i,j,t);
                            else
                                
                                zahlenreihe_klein = [zahlenreihe_klein, arrayfixed5strengthlist_finished2(i,j,t)];
                                
                            end
                            
                        end
                        
                        
                        
                    end
                    
                    if isempty(zahlenreihe_big)
                        zahlenreihe_big = zahlenreihe_klein;
                    else
                        zahlenreihe_big = [zahlenreihe_big; zahlenreihe_klein];
                        
                    end
                    zahlenreihe_klein = [];
                    
                    
                    
                end
                
                
                arrayfixed5strengthlisttable = array2table(zahlenreihe_big);
                
                arrayfixed5strengthlisttable .Properties.VariableNames = {strength{1:length(strength) }};
                thefilename = strcat(time,thefilename2,'arrayfixed5strengthlist',strjoin(string(allchannelnames))) ;
                writetable(arrayfixed5strengthlisttable , char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(arrayfixed5strengthlisttable , char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
                
                
                sorted_array_tofilldistancelist3table   = array2table(sorted_array_tofilldistancelist_finished3);
                
                sorted_array_tofilldistancelist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_array_tofilldistancelist',strjoin(string(allchannelnames))) ;
                writetable(sorted_array_tofilldistancelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_array_tofilldistancelist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                sorted_array_tofillstrengthlist3table   = array2table(sorted_array_tofillstrengthlist_finished3);
                
                sorted_array_tofillstrengthlist3table.Properties.VariableNames = {naming{1:length(naming) }};
                thefilename = strcat(time,thefilename2,'sorted_array_tofillstrengthlist',strjoin(string(allchannelnames))) ;
                writetable(sorted_array_tofillstrengthlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.txt')), 'Delimiter', '\t', 'FileType', 'text');
                writetable(sorted_array_tofillstrengthlist3table, char(strcat(pathwayexportdata, '\', string(thefilename), '.xls')), 'Delimiter', '\t', 'FileType', 'text');
                
                
            end
            
            if checkifmatexport.Value ==1
                
                cd(pathwayexportdata)
                if buttonimportmasksofcells == 0
                    
                    save([thefilename2,char('savingofsettingsofcertaincells.mat')], 'savingofsettingsofcertaincells', '-v7.3');
                    
                    if ~isempty(index)
                        save([thefilename2,char('indexofcellsnottaken.mat')], 'index', '-v7.3');
                    end
                end
                save([thefilename2,char('allchannelnames.mat')], 'allchannelnames', '-v7.3');
                save([thefilename2,char('toignore.mat')], 'toignore', '-v7.3');
                if buttonallnormalizations == 0
                    save([thefilename2, char( 'dipolmomentnormalized.mat')], 'dipolmomentnormalized_finished2', '-v7.3');
                    save([thefilename2,char('Rnormalized_finished.mat')], 'Rnormalized_finished2', '-v7.3')
                    save([thefilename2,char('qnormalized.mat')], 'qnormalized_finished2', '-v7.3');
                end
                
                
                if buttonallnormalizations == 1
                    save([thefilename2, char( '_dipolmomentnormalized11.mat')], 'dipolmomentnormalized11_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized21.mat')], 'dipolmomentnormalized21_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized12.mat')], 'dipolmomentnormalized12_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized22.mat')], 'dipolmomentnormalized22_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized13.mat')], 'dipolmomentnormalized13_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized23.mat')], 'dipolmomentnormalized23_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized14.mat')], 'dipolmomentnormalized14_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized24.mat')], 'dipolmomentnormalized24_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized15.mat')], 'dipolmomentnormalized15_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized25.mat')], 'dipolmomentnormalized25_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized16.mat')], 'dipolmomentnormalized16_finished2', '-v7.3');
                    save([thefilename2, char( '_dipolmomentnormalized26.mat')], 'dipolmomentnormalized26_finished2', '-v7.3');
                    
                    save([thefilename2, char('_Rnormalized_finished1.mat')], 'Rnormalized1_finished2', '-v7.3');
                    save([thefilename2, char('_Rnormalized_finished2.mat')], 'Rnormalized2_finished2', '-v7.3');
                    
                    save([thefilename2, char('_qnormalized1.mat')], 'qnormalized1_finished2', '-v7.3');
                    save([thefilename2, char('_qnormalized2.mat')], 'qnormalized2_finished2', '-v7.3');
                    save([thefilename2, char('_qnormalized3.mat')], 'qnormalized3_finished2', '-v7.3');
                    save([thefilename2, char('_qnormalized4.mat')], 'qnormalized4_finished2', '-v7.3');
                    save([thefilename2, char('_qnormalized5.mat')], 'qnormalized5_finished2', '-v7.3');
                    save([thefilename2, char('_qnormalized6.mat')], 'qnormalized6_finished2', '-v7.3');
                end
                
                
                
                
                
                save([thefilename2, char('dipolmoment.mat')], 'dipolmoment_finished2', '-v7.3');
                
                save([thefilename2,char('diametermaxvecfinished.mat')], 'diameter_maxvecfinished2', '-v7.3');
                save([thefilename2,char('diameteravvecfinished.mat')], 'diameter_avvecfinished2', '-v7.3');
                
                save([thefilename2,char('qposvec.mat')], 'qposvec_finished2', '-v7.3');
                save([thefilename2,char('numberofpixels.mat')], 'numberofpixels_finished2', '-v7.3');
                save([thefilename2,char('numberofpixelspos.mat')], 'numberofpixelspos_finished2', '-v7.3');
                save([thefilename2,char('avintensity.mat')], 'avintensity_finished2', '-v7.3');
                save([thefilename2,char('RposRmean.mat')], 'RposRmean_finished2', '-v7.3');
                save([thefilename2,char('RnegRmean.mat')], 'RnegRmean_finished2', '-v7.3');
                save([thefilename2,char('RposRneg.mat')], 'RposRneg_finished2', '-v7.3');
                save([thefilename2,char('PixelIntensitytotal.mat')], 'intensityvaluetotal_finished2', '-v7.3');
                save([thefilename2, char('_Names.mat')], 'names', '-v7.3');
                if buttonforallparameters == 1
                    
                    
                    save([thefilename2,char('displacementRposRnegtoMorthogonal.mat')], 'displacementRposRnegMRposMRneg_finished2', '-v7.3');
                    save([thefilename2,char('displacementdipolfromM.mat')], 'displacementDipoleMomentfromMiddle_finished2', '-v7.3');
                    save([thefilename2,char('distanceplusqstoRpos.mat')], 'sumofdistancesqRpos_finished2', '-v7.3');
                    save([thefilename2,char('percoverphi.mat')], 'percoverphi_finished2', '-v7.3');
                    save([thefilename2,char('countessphi.mat')], 'countessphi_finished2', '-v7.3');
                    save([thefilename2,char('distancetoavvalphi.mat')], 'distancetoavvalphi_finished2', '-v7.3');
                    %  save([thefilename2,char('zaehlerhowlonghowoftenphi.mat')], 'zaehlerhowlonghowoftenphi_finished2', '-v7.3');
                    save([thefilename2,char('endpointsphi.mat')], 'endpointsphi_finished2', '-v7.3');
                    save([thefilename2,char('percovertheta.mat')], 'percovertheta_finished2', '-v7.3');
                    save([thefilename2,char('countesstheta.mat')], 'countesstheta_finished2', '-v7.3');
                    save([thefilename2,char('distancetoavvaltheta.mat')], 'distancetoavvaltheta_finished2', '-v7.3');
                    %  save([thefilename2,char('zaehlerhowlonghowoftentheta.mat')], 'zaehlerhowlonghowoftentheta_finished2', '-v7.3');
                    save([thefilename2,char('endpointstheta.mat')], 'endpointstheta_finished2', '-v7.3');
                    save([thefilename2,char('howmuchoveritatallphi.mat')], 'howmuchoveritatallphi_finished2', '-v7.3');
                    save([thefilename2,char('howmuchoveritatalltheta.mat')], 'howmuchoveritatalltheta_finished2', '-v7.3');
                    save([thefilename2,char('startpointsphi.mat')], 'startpointsphi_finished2', '-v7.3');
                    save([thefilename2,char('meanpointsphi.mat')], 'meanpointsphi_finished2', '-v7.3');
                    save([thefilename2,char('lengthpointsphi.mat')], 'lengthpointsphi_finished2', '-v7.3');
                    save([thefilename2,char('histogramvaluesphi.mat')], 'histogramvaluesphi_finished2', '-v7.3');
                    save([thefilename2,char('distancetonextphi.mat')], 'distancetonextphi_finished2', '-v7.3');
                    save([thefilename2,char('distancetomeanphi.mat')], 'distancetomeanphi_finished2', '-v7.3');
                    save([thefilename2,char('clusterallphi.mat')], 'clusterallphi_finished2', '-v7.3');
                    save([thefilename2,char('clusterlengthphi.mat')], 'clusterlengthphi_finished2', '-v7.3');
                    save([thefilename2,char('allclusterinputphi.mat')], 'allclusterinputphi_finished2', '-v7.3');
                    save([thefilename2,char('clusterpercentphi.mat')], 'clusterpercentphi_finished2', '-v7.3');
                    save([thefilename2,char('clusterpercenttoallpixelsposphi.mat')], 'clusterpercenttoallpixelsposphi_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclusterstrengthphi.mat')], 'arrayofclusterstrengthphi_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclustersdistancephi.mat')], 'arrayofclustersdistancephi_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclustersphi.mat')], 'arrayofclustersphi_finished2', '-v7.3');
                    save([thefilename2,char('startpointstheta.mat')], 'startpointstheta_finished2', '-v7.3');
                    save([thefilename2,char('meanpointstheta.mat')], 'meanpointstheta_finished2', '-v7.3');
                    save([thefilename2,char('lengthpointstheta.mat')], 'lengthpointstheta_finished2', '-v7.3');
                    save([thefilename2,char('histogramvaluestheta.mat')], 'histogramvaluestheta_finished2', '-v7.3');
                    save([thefilename2,char('distancetonexttheta.mat')], 'distancetonexttheta_finished2', '-v7.3');
                    save([thefilename2,char('distancetomeantheta.mat')], 'distancetomeantheta_finished2', '-v7.3');
                    save([thefilename2,char('clusteralltheta.mat')], 'clusteralltheta_finished2', '-v7.3');
                    save([thefilename2,char('clusterlengththeta.mat')], 'clusterlengththeta_finished2', '-v7.3');
                    save([thefilename2,char('allclusterinputtheta.mat')], 'allclusterinputtheta_finished2', '-v7.3');
                    save([thefilename2,char('clusterpercenttheta.mat')], 'clusterpercenttheta_finished2', '-v7.3');
                    save([thefilename2,char('clusterpercenttoallpixelspostheta.mat')], 'clusterpercenttoallpixelspostheta_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclusterstrengththeta.mat')], 'arrayofclusterstrengththeta_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclustersdistancetheta.mat')], 'arrayofclustersdistancetheta_finished2', '-v7.3');
                    save([thefilename2,char('arrayofclusterstheta.mat')], 'arrayofclusterstheta_finished2', '-v7.3');
                    save([thefilename2,char('final_distancestrengthlist.mat')], 'final_distancestrengthlist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_volumelist.mat')], 'sorted_volumelist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_centroidlist.mat')], 'sorted_centroidlist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_equivdiameterlist.mat')], 'sorted_equivdiameterlist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_voxellistlist.mat')], 'sorted_voxellistlist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_meanintensitylist.mat')], 'sorted_meanintensitylist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_maxintensitylist.mat')], 'sorted_maxintensitylist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_voxelvalueslist.mat')], 'sorted_voxelvalueslist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_weightedcentroidlist.mat')], 'sorted_weightedcentroidlist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_surfacearealist.mat')], 'sorted_surfacearealist_finished2', '-v7.3');
                    save([thefilename2,char('arrayfixed5strengthlist_finished2.mat')], 'arrayfixed5strengthlist_finished2', '-v7.3');
                    save([thefilename2,char('arrayfixed4distancelist_finished2.mat')], 'arrayfixed4distancelist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_array_tofilldistancelist_finished2.mat')], 'sorted_array_tofilldistancelist_finished2', '-v7.3');
                    save([thefilename2,char('sorted_array_tofillstrengthlist_finished2.mat')], 'sorted_array_tofillstrengthlist_finished2', '-v7.3');
                    
                end
                
                if buttonPearson ==1
                    save([thefilename2, char('Pearsoncorrelationcoefficient')], 'Pearson_finished2', '-v7.3');
                end
                
                
            end
            
            
            
        else
            p3_feedbackfield.Value = 'Check channel names';
            
            
        end
        
    end
    
else
    
    p3_feedbackfield.Value = 'No runthrough done yet.';
    
end


end


% fct for updating results table
function updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
global allchannelnames toignore pathwayimport buttonforcellsviewbeforerunbyexport ...
    dipolmomentnormalized_finished Rnormalized_finished diameter_maxvecfinished ...
    diameter_avvecfinished qnormalized_finished numberofpixels_finished ...
    buttonallnormalizations

naming = [];
namesofchannel = allchannelnames;
indices_all = 1:length(allchannelnames);

try indices_all(toignore) = [];
catch
end

naming = allchannelnames(indices_all);

if isempty(naming) || isempty(pathwayimport)
    p3_feedbackfield.Value = 'Ground settings are missing (naming of channels, channel names, Pathway to import... )';
else
    if size(tableresults,2)==1 && buttonforcellsviewbeforerunbyexport == 1
        global mask_all
        bigtable = array2table(mask_all);
        bigtable.Properties.VariableNames = {'Cell found (1) or not (0)'};
        tableresults.Data = bigtable;
        
        removeStyle(tableresults);
        
        s = uistyle('BackgroundColor', 'yellow');
        addStyle(tableresults, s, 'row', slidervalue2);
        
    else
        
        if isempty(diameter_maxvecfinished)
            
            p3_feedbackfield.Value = 'No Results Data yet';
            
            bigtable = array2table(zeros(3,3));
            tableresults.Data = bigtable;
            
        else
            if buttonallnormalizations == 0
                
                vars = naming;
                dipolemomentvars = strcat('Normalized Dipole Moment ', {''}, naming);
                rvars = strcat('Normalized Distance ',  {''},naming);
                diametervars = 'Diameter';
                qvars = strcat('Normalized Charge ', {''},naming);
                numofpixvars = 'Number of pixels';
                
                varstotal = [dipolemomentvars, rvars, diametervars, qvars, numofpixvars];
                
                global buttondiameter
                if buttondiameter == 1
                    diameter_finished = diameter_maxvecfinished;
                else
                    diameter_finished = diameter_avvecfinished;
                end
                
                indices_all
                bigtable = array2table([dipolmomentnormalized_finished(:,indices_all),...
                    Rnormalized_finished(:,indices_all), diameter_finished, ...
                    qnormalized_finished(:,indices_all), numberofpixels_finished ]);
                bigtable.Properties.VariableNames = varstotal;
                tableresults.Data = bigtable;
                
                removeStyle(tableresults);
                
                s = uistyle('BackgroundColor', 'yellow');
                addStyle(tableresults, s, 'row', slidervalue2);
            end
            
            if buttonallnormalizations == 1
                
                global dipolmomentnormalized11_finished Rnormalized1_finished qnormalized1_finished
                vars = naming;
                dipolemomentvars = strcat('Normalized Dipole Moment11 ', {''}, naming);
                rvars = strcat('Normalized Distance1 ',  {''},naming);
                diametervars = 'Diameter';
                qvars = strcat('Normalized Charge1 ',  {''},naming);
                numofpixvars = 'Number of pixels';
                
                varstotal = [dipolemomentvars, rvars, diametervars, qvars, numofpixvars];
                
                
                diameter_finished = diameter_maxvecfinished;
                
                bigtable = array2table([dipolmomentnormalized11_finished(:,indices_all),...
                    Rnormalized1_finished(:,indices_all), diameter_finished, ...
                    qnormalized1_finished(:,indices_all), numberofpixels_finished ]);
                bigtable.Properties.VariableNames = varstotal;
                tableresults.Data = bigtable;
                
                removeStyle(tableresults);
                
                s = uistyle('BackgroundColor', 'yellow');
                addStyle(tableresults, s, 'row', slidervalue2);
                
            end
            
        end
        
    end
    
end


end



% fct if cell shall not be included in results
function checkifnottakeresult_fcn(checkifnottotakeresult)
global slidervalue2 slidervalue_before nottotake numberofimages names ...
    savingofsettingsofcertaincells

if isempty(slidervalue2)
    slidervalue2 = 1;
end
if isempty(slidervalue_before)
    slidervalue_before = 1;
end


if ~isempty(names) && ~isempty(savingofsettingsofcertaincells)
    
    
    try
        if length(nottotake) ~= numberofimages
            nottotake = zeros(numberofimages,1);
            
        else
        end
    catch
    end
    
    if isempty(nottotake) || isempty(numberofimages)
        nottotake = zeros(numberofimages,1);
        
    end
    
    
    if slidervalue_before ~= slidervalue2
        
        checkifnottotakeresult.Value = nottotake(slidervalue2);
        slidervalue_before = slidervalue2;
        
    else
        
        if checkifnottotakeresult.Value ==1
            nottotake(slidervalue2) = 1;
            
        else
            nottotake(slidervalue2) = 0;
            
        end
        
    end
else
    checkifnottotakeresult.Value = 0;
    
end

end


% fct that opens a new window for choosing among settings (that had been
% given before for general run, now adjustable for single cell)
function checkifrerun_fcn(checkifrerun, event, tableresults, p3_feedbackfield)

% condition: if checkbox checked, rerun for cell detection parameters is
% aimed at. Thus, opening of new figure with parameters for cell detection,
% that can be modified, the result can be pre-viewed and rerun for saving
% the modification
global savingofsettingsofcertaincells
if checkifrerun.Value == 1
    if ~isempty(savingofsettingsofcertaincells)
        
        % decision on scrollability or not, dependent on screensize and
        % GUI design Screensize
        screensize = get(groot, 'Screensize');
        
        if screensize(4) >= 980 && screensize(3) >=1700
            f2 = uifigure( ...
                'Visible', 'on', ...
                'Position', [300, 100, 1600, 880], ...
                'NextPlot', 'add');
            f2.Resize = 'off';
            
        else
            f2 = uifigure( ...
                'Visible', 'on', ...
                'Position', [300, 100, 1600, 880], ...
                'NextPlot', 'add');
            f2.Scrollable = 'on';
            
        end
        
        
        % name of figure
        f2.Name = 'Rerun settings';
        % global values
        global slidervalue2 buttonifconfocal buttonifconfocal2 notoallatonce_parameters
        
        % value of Rerun figure: slidervalue3 == index of cell analyzed is
        % identical to slider2 value in Tab 3 slidervalue2
        slidervalue3 = slidervalue2;
        % the initialization whether confocal is used or not is dependent on this
        % setting of previous run-through (buttonifconfocal)
        buttonifconfocal2 = buttonifconfocal;
        
        % decision on color
        R = 0;
        G = 158 / 255;
        B = 224 / 255;
        geigerlabblue = [R G B];
        
        geigerlabwhite = [1 1 1];
        
        R = 187 / 255;
        G = 51 / 255;
        B = 108 / 255;
        geigerlabpink = [R G B];
        
        R = 77 / 255;
        G = 77 / 255;
        B = 77 / 255;
        geigerlabdarkgrey = [R G B];
        
        R = 123 / 255;
        G = 137 / 255;
        B = 159 / 255;
        bluishgreymid = [R G B];
        
        R = 44 / 255;
        G = 112 / 255;
        B = 141 / 255;
        darkbluishgrey = [R G B];
        
        R = 173 / 255;
        G = 187 / 255;
        B = 209 / 255;
        bluishgrey = [R G B];
        
        
        % panel
        f2p2 = uipanel(f2, 'Position', [880 0 1700 880], 'BackgroundColor', bluishgrey);
        % panel
        p3_rerun = uipanel(f2, 'Position', [0 0 880 880], 'BackgroundColor',bluishgrey);
        % tab group for left-sided panel
        tabgp3 = uitabgroup(p3_rerun, 'Position', [0 0 880 880]);
        % size for later reconstructions of positioning elements
        a = [800, 100, 880, 880];
        
        % tab definitions
        tabparametersrerun1 = uitab(tabgp3, 'Title', 'Basic Parameters', 'BackgroundColor',bluishgrey);
        tabparametersrerun2 = uitab(tabgp3, 'Title', 'Additional Parameters');
        % panel of tab definitions
        pparametersrerun1 = uipanel(tabparametersrerun1, 'Position', [0 0 880 960], 'BackgroundColor',bluishgrey);
        pparametersrerun2 = uipanel(tabparametersrerun2, 'Position', [0 0 880 960], 'BackgroundColor',bluishgrey);
        
        
        describp2_1 = uitextarea(p3_rerun, 'Position', [10 a(4)-140 300 25], 'Value', ...
            'Layer thresholding');
        describp2_1.Enable = 'on';
        describp2_1.Editable = 'off';
        describp2_1.FontSize = 16;
        describp2_1.BackgroundColor = [0.7 0.7 0.7];
        describp2_1.FontColor = geigerlabblue;
        describp2_1.FontWeight = 'bold';
        describp2_1.HorizontalAlignment = 'center';
        
        
        describp2_1t = uitextarea(p3_rerun, 'Position', [400 a(4)-140 300 25], 'Value', ...
            'Cell pixel thresholding'); % by Otsu`s method and user-defined improvements');
        describp2_1t.Enable = 'on';
        describp2_1t.Editable = 'off';
        describp2_1t.FontSize = 16;
        describp2_1t.BackgroundColor = [0.7 0.7 0.7];
        describp2_1t.FontColor = geigerlabpink;
        describp2_1t.FontWeight = 'bold';
        describp2_1t.HorizontalAlignment = 'center';
        
        % shift for optimal location
        versatz_x = 1/80;
        versatz_y = 1/80;
        versatz_y2 = 10/80;
        versatz_y3 = 8.3/80;
        versatz_y4 = 5.2/80;
        versatz_y5 = 3.4/80;
        
        % annotation for layer thresholding parameters
        dim_structurebasic = [1/18-versatz_x 1-3.75/20*1.34-versatz_y-versatz_y2 4.1/18+2*versatz_x 1.05/20*2+2*versatz_y];
        dim_structureadditional = [1/18-versatz_x 1-14.43/20*1.09-versatz_y-versatz_y3 4.1/18+2*versatz_x 11.3/20*1.1+2*versatz_y];
        annotation(pparametersrerun1, 'rectangle', dim_structurebasic, 'Color',geigerlabblue); % just visible for basic parameters
        annotation(pparametersrerun2, 'rectangle', dim_structureadditional, 'Color',geigerlabblue); % just visible for additional parameters
        
        % annotation for intensity thresholding parameters
        dim_intensitybasic = [11.65/18-versatz_x 1-3.75/20-versatz_y-versatz_y2-8/5000 4.1/18+2*versatz_x 1.05/20+2*versatz_y];
        dim_intensityadditional = [350/880-versatz_x (a(4)-360+15)/a(4)-versatz_y-versatz_y4 (770-350)/880+2*versatz_x 188/960+2*versatz_y];
        annotation(pparametersrerun1, 'rectangle', dim_intensitybasic, 'Color',geigerlabpink); % just visible for basic parameters
        annotation(pparametersrerun2, 'rectangle', dim_intensityadditional, 'Color',geigerlabpink); % just visible for additional parameters
        
        % annotation for general thresholding parameters
        dim_generalbasic = [350/880-versatz_x (a(4)-640+15)/a(4)-versatz_y-versatz_y5 (770-350)/880+2*versatz_x 186/960+2*versatz_y];
        dim_generaladditional = [350/880-versatz_x (a(4)-640+15)/a(4)-versatz_y-versatz_y5 (770-350)/880+2*versatz_x 186/960+2*versatz_y];
        annotation(pparametersrerun1, 'rectangle', dim_generalbasic, 'Color',darkbluishgrey); % just visible for basic parameters
        annotation(pparametersrerun2, 'rectangle', dim_generaladditional, 'Color',darkbluishgrey); % just visible for additional parameters
        
        
        
        % Description
        describp2general_1t = uitextarea(p3_rerun, 'Position', [400 a(4)-430 300 25], 'Value', 'General Parameters');
        describp2general_1t.Enable = 'on';
        describp2general_1t.Editable = 'off';
        describp2general_1t.FontSize = 16;
        describp2general_1t.BackgroundColor = [0.7 0.7 0.7];
        describp2general_1t.FontColor = darkbluishgrey;
        describp2general_1t.FontWeight = 'bold';
        
        % axis for showing pre-view of cell
        ax3 = uiaxes('Parent', f2p2 , 'Position', [5 a(4)-750 700 700 ], 'BackgroundColor', bluishgrey);
        ax3.Toolbar.Visible = 'off';
        ax3.Interactions = [panInteraction zoomInteraction];
        ax3.XTick = [];
        ax3.YTick = [];
        ax3.Box = 'on';
        % Description and first input values for conditions
        threshfrontier1_valuesrerun = [0.1, 0.1];
        threshfrontier2_valuesrerun = [0.4, 50000];
        anpassungotsuthreshK1_valuesrerun = [0.06, 0];
        anpassungotsuthreshK2_valuesrerun = [0.03, 0];
        anpassungotsuthreshK3_valuesrerun = [0.15, 0];
        thresholdnumpixelsforrangefilt_valuesrerun = [1500, 250];
        thresholdnumpixelsforrangefilt_valuesrerunmaximum = [2500, 350];
        text_anpassungintensotsuthresh2rerun = {'Threshold addition 1: If layer threshold > Threshold frontier I1', 'Threshold addition: If program internally mean value used for determining layers'};
        anpassungotsuthresh2_valuesrerun = [0, 0.01];
        outoffocusoption_valuesrerun = [1, 0];
        maxpixnumlayer_textrerun = {'Maximum number of pixels in layer', 'Imbinarize Threshold for Confocal'};
        maxpixnumlayer_valuesrerun = [6000 0.1];
        texts_threshfront2pixlayerrerun = {'Threshold frontier 2', ...
            'Select layers differently if mean of pixel number is bigger than this value: depending on being bigger than mean value rather than on minimum value and Minimum number of pixels per layer for Range filter '};
        
        % Heading
        p4_feedback = uitextarea(f2, 'Position',  [350 a(4)-800 500 30], 'Value', 'Feedback to user');
        p4_feedback.Enable = 'on';
        p4_feedback.Editable = 'off';
        p4_feedback.FontSize = 16;
        p4_feedback.BackgroundColor = [0.5 0.5 0.5];
        
        % Output field
        p4_feedbackfield = uitextarea(f2, 'Position', [350 10 500 a(4)-800-10], 'Value',...
            'Here Text should appear');
        p4_feedbackfield.Enable = 'on';
        p4_feedbackfield.Editable = 'off';
        p4_feedbackfield.FontSize = 12;
        p4_feedbackfield.BackgroundColor = [0.5 0.5 0.5];
        
        
        %%%% structure thresholding
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Description
        describstructurethreshrerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-360 150 50], 'Value', ...
            'Threshold frontier 1');
        describstructurethreshrerun.Enable = 'off';
        describstructurethreshrerun.Editable = 'off';
        describstructurethreshrerun.FontSize = 14;
        describstructurethreshrerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global frontierthrshK1
        efstructthreshfrontier1rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-360 50 50], 'Value', ...
            frontierthrshK1, 'Enable', 'off');
        
        % Description
        describstructurethresh2rerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-430 150 50], 'Value', ...
            texts_threshfront2pixlayerrerun{buttonifconfocal + 1});
        describstructurethresh2rerun.Enable = 'off';
        describstructurethresh2rerun.Editable = 'off';
        describstructurethresh2rerun.FontSize = 14;
        describstructurethresh2rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global frontierthrshK2
        efstructthreshfrontier2rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-430 50 50], 'Value',...
            frontierthrshK2, 'Enable', 'off');
        
        % Description
        describstructurethresh3rerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-500 150 50], 'Value', ...
            'Threshold addition 1: If global threshold > Threshold frontier 1');
        describstructurethresh3rerun.Enable = 'on';
        describstructurethresh3rerun.Editable = 'off';
        describstructurethresh3rerun.FontSize = 12;
        describstructurethresh3rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthreshK1
        efstructurethresh3rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-500 50 50], 'Value', ...
            anpassungotsuthreshK1) ;
        
        % Description
        describstructurethresh4rerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-570 150 50], 'Value',...
            'Threshold addition 2: If global threshold < Threshold frontier 1');
        describstructurethresh4rerun.Enable = 'on';
        describstructurethresh4rerun.Editable = 'off';
        describstructurethresh4rerun.FontSize = 12;
        describstructurethresh4rerun.BackgroundColor =[0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthreshK2
        efstructurethresh4rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-570 50 50], 'Value', ...
            anpassungotsuthreshK2);
        
        % Description
        describstructurethresh5rerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-640 150 50], 'Value', ...
            'Threshold 3: If global threshold > Threshold frontier 2');
        describstructurethresh5rerun.Enable = 'on';
        describstructurethresh5rerun.Editable = 'off';
        describstructurethresh5rerun.FontSize = 12;
        describstructurethresh5rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthreshK3
        efstructurethresh5rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-640 50 50], 'Value', ...
            anpassungotsuthreshK3);
        
        % Description
        describstructurethresh6arerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-710 150 50], 'Value', ...
            'Threshold frontier after no cell detection');
        describstructurethresh6arerun.Enable = 'off';
        describstructurethresh6arerun.Editable = 'off';
        describstructurethresh6arerun.FontSize = 12;
        describstructurethresh6arerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global frontier3
        efstructthreshfrontierafternocellrerun = uieditfield(pparametersrerun2, 'numeric', 'Position', ...
            [200 a(4)-710 50 50], 'Value', frontier3, 'Enable', 'off');
        
        % Description
        describstructurethresh6rerun = uitextarea(pparametersrerun2, 'Position', [50 a(4)-780 150 50], 'Value', ...
            'Threshold subtraction from global threshold after no cell detection');
        describstructurethresh6rerun.Enable = 'off';
        describstructurethresh6rerun.Editable = 'off';
        describstructurethresh6rerun.FontSize = 12;
        describstructurethresh6rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthreshKsubtr
        efstructurethresh6rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [200 a(4)-780 50 50], 'Value',...
            anpassungotsuthreshKsubtr, 'Enable', 'off');
        
        % Description
        describstructurethresh7rerun = uitextarea(f2, 'Position', [50 a(4)-220 150 50], 'Value', ...
            'Minimum number of pixels per layer for Range filter ');
        describstructurethresh7rerun.Enable = 'off';
        describstructurethresh7rerun.Editable = 'off';
        describstructurethresh7rerun.FontSize = 12;
        describstructurethresh7rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global thresholdnumpixelsforrangefilt
        efstructurethresh7rerun = uieditfield(f2, 'numeric', 'Position', [200 a(4)-220 50 50], 'Value',...
            thresholdnumpixelsforrangefilt, 'Enable', 'off');
        
        
        
        describstructurethresh7brerun = uitextarea(f2, 'Position', [50 a(4)-290 150 50], 'Value', ...
            'Maximum number of pixels per layer for Range filter ');
        describstructurethresh7brerun.Enable = 'off';
        describstructurethresh7brerun.Editable = 'off';
        describstructurethresh7brerun.FontSize = 12;
        describstructurethresh7brerun.BackgroundColor = [0.7 0.7 0.7];
        
        global thresholdnumpixelsforrangefiltmaximum
        efstructurethresh7brerun = uieditfield(f2, 'numeric', 'Position', [200 a(4)-290 50 50], 'Value',...
            thresholdnumpixelsforrangefiltmaximum, 'Enable', 'off');
        
        
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % Checkbox to see an overview over all channels
        checkoverviewchannels3 =  uicheckbox(f2p2, 'Position', [50 a(4)-880 300 50], 'Text', ...
            'Overview over channels with mask', 'Value', 0);
        
        
        %%%% intensity thresholding
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        
        % Description
        describintensthreshoofrerun = uitextarea(pparametersrerun2, 'Position', [570 a(4)-290 150 50], 'Value', ...
            'Threshold addition for out of focus light first 2 layers');
        describintensthreshoofrerun.Enable = 'off';
        describintensthreshoofrerun.Editable = 'off';
        describintensthreshoofrerun.FontSize = 12;
        describintensthreshoofrerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthresh1
        efintensthreshoofrerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [720 a(4)-290 50 50], 'Value',...
            anpassungotsuthresh1, 'Enable' , 'off');
        
        % Description
        describfrontieradditionalrerun = uitextarea(pparametersrerun2, 'Position', [570 a(4)-360 150 50], 'Value',...
            'Threshold addition to global threshold for out of focus light');
        describfrontieradditionalrerun.Enable = 'off';
        describfrontieradditionalrerun.Editable = 'off';
        describfrontieradditionalrerun.FontSize = 12;
        describfrontieradditionalrerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global frontieraddition1
        effrontieradditionalrerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [720 a(4)-360 50 50], 'Value',...
            frontieraddition1, 'Enable', 'off'); %, ...
        
        % Description
        describintensthreshold1rerun = uitextarea(pparametersrerun2, 'Position', [350 a(4)-220 150 50], 'Value',...
            'Threshold frontier I1');
        describintensthreshold1rerun.Enable = 'on';
        describintensthreshold1rerun.Editable = 'off';
        describintensthreshold1rerun.FontSize = 14;
        describintensthreshold1rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungintensotsufrontier1
        efintensthreshold1rerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [500 a(4)-220 50 50], 'Value',...
            anpassungintensotsufrontier1);
        
        % Description
        describintensthreshold1rerun = uitextarea(pparametersrerun2, 'Position', [350 a(4)-290 150 50], 'Value', ...
            text_anpassungintensotsuthresh2rerun{buttonifconfocal + 1});
        describintensthreshold1rerun.Enable = 'on';
        describintensthreshold1rerun.Editable = 'off';
        describintensthreshold1rerun.FontSize = 12;
        describintensthreshold1rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global anpassungotsuthresh2
        efintensthresholdadditionstructrerun = uieditfield(pparametersrerun2, 'numeric', 'Position', ...
            [500 a(4)-290 50 50], 'Value', anpassungotsuthresh2);
        
        % Checkbox for using out of focus option parameters
        outoffocusoptionrerun = uicheckbox(f2, 'Position', [570 a(4)-190 200 80], 'Text', ...
            'Take in account: out of focus', 'Value', ...
            outoffocusoption_valuesrerun(buttonifconfocal + 1), 'Enable', 'off',  ...
            'ValueChangedFcn', @(outoffocusoptionrerun, event) ...
            checkifoutoffocusrerun(outoffocusoptionrerun, event)) ;
        
        % Description
        describintensthresh2rerun = uitextarea(pparametersrerun2, 'Position', [350 a(4)-360 150 50], 'Value', ...
            'Threshold addition to layer after absolutely no cell detection');
        describintensthresh2rerun.Enable = 'on';
        describintensthresh2rerun.Editable = 'off';
        describintensthresh2rerun.FontSize = 12;
        describintensthresh2rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global threshforveryfaint
        efintensthresh2faintrerun = uieditfield(pparametersrerun2, 'numeric', 'Position', [500 a(4)-360 50 50], ...
            'Value', threshforveryfaint);
        
        % Description
        describp2_1t3rerun = uitextarea(f2, 'Position', [570 a(4)-220 150 50], 'Value', ...
            'Reposition of layers along depth: Move found layers by value');
        describp2_1t3rerun.Enable = 'off';
        describp2_1t3rerun.Editable = 'off';
        describp2_1t3rerun.FontSize = 12;
        describp2_1t3rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global tomodulate
        efintenstomodulateoofrerun = uieditfield(f2, 'numeric', 'Position', [720 a(4)-220 50 50], ...
            'Value', tomodulate, 'Enable', 'off');
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        % general parameters
        
        vary_var = 60;
        
        % Description
        describp2_1t4rerun = uitextarea(f2, 'Position', [570 a(4)-440-vary_var 150 40], 'Value',...
            'Minimum number of images per cell (+/-1)');
        describp2_1t4rerun.Enable = 'on';
        describp2_1t4rerun.Editable = 'off';
        describp2_1t4rerun.FontSize = 12;
        describp2_1t4rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global minnumofimagescell
        efintensminnumimcellrerun = uieditfield(f2, 'numeric', 'Position', [720 a(4)-440-vary_var 50 40],...
            'Value', minnumofimagescell);
        
        % Description
        describp2_1t4rerun = uitextarea(f2, 'Position', [570 a(4)-480-vary_var 150 40], 'Value',...
            'Maximum number of images per cell (+/-1)');
        describp2_1t4rerun.Enable = 'on';
        describp2_1t4rerun.Editable = 'off';
        describp2_1t4rerun.FontSize = 12;
        describp2_1t4rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global maxnumofimagescell
        efintensmaxnumimcellrerun = uieditfield(f2, 'numeric', 'Position', [720 a(4)-480-vary_var 50 40],...
            'Value', maxnumofimagescell);
        
        % Description
        describp2_1t5rerun = uitextarea(f2, 'Position', [350 a(4)-580-vary_var 150 40], 'Value', ...
            maxpixnumlayer_textrerun{buttonifconfocal + 1});
        describp2_1t5rerun.Enable = 'on';
        describp2_1t5rerun.Editable = 'off';
        describp2_1t5rerun.FontSize = 12;
        describp2_1t5rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global maxpixnumlayer
        efmaxpixnumlayerrerun = uieditfield(f2, 'numeric', 'Position', [500 a(4)-580-vary_var 50 40], ...
            'Value', maxpixnumlayer);
        
        % Description
        describp2_1t6minrerun = uitextarea(f2, 'Position', [350 a(4)-540-vary_var 150 40], 'Value', ...
            'Minimum number of pixels for each layer');
        describp2_1t6minrerun.Enable = 'on';
        describp2_1t6minrerun.Editable = 'off';
        describp2_1t6minrerun.FontSize = 12;
        describp2_1t6minrerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global minpixnumlayer
        efminpixnumlayerrerun = uieditfield(f2, 'numeric', 'Position', [500 a(4)-540-vary_var 50 40],...
            'Value', minpixnumlayer);
        if buttonifconfocal == 1
            efminpixnumlayerrerun.Visible = 'off';
        else
            efminpixnumlayerrerun.Visible = 'on';
        end
        
        % Description
        describp2_1t6brerun = uitextarea(f2, 'Position', [350 a(4)-440-vary_var 150 40], 'Value', ...
            'Minimum number of pixels for each cell');
        describp2_1t6brerun.Enable = 'on';
        describp2_1t6brerun.Editable = 'off';
        describp2_1t6brerun.FontSize = 12;
        describp2_1t6brerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global minnumberpixelstodetectforcell
        efintensminnumpixcellrerun = uieditfield(f2, 'numeric', 'Position', [500 a(4)-440-vary_var 60 40],...
            'Value', minnumberpixelstodetectforcell);
        
        % Description
        describp2_1t6rerun = uitextarea(f2, 'Position', [350 a(4)-480-vary_var 150 40], 'Value', ...
            'Maximum number of pixels for each cell');
        describp2_1t6rerun.Enable = 'on';
        describp2_1t6rerun.Editable = 'off';
        describp2_1t6rerun.FontSize = 12;
        describp2_1t6rerun.BackgroundColor = [0.7 0.7 0.7];
        
        % Input field
        global maxnumpixelwholecell
        efintensmaxnumpixcellrerun= uieditfield(f2, 'numeric', 'Position', [500 a(4)-480-vary_var 60 40],...
            'Value', maxnumpixelwholecell);
        
        % Checkbox for confocal options
        global buttonifconfocal
        checkifconfocalrerun = uicheckbox(f2, 'Position', [110 a(4)-100 250 60], 'Text', 'Confocal',...
            'Value', buttonifconfocal, 'FontSize', 16, ...
            'ValueChangedFcn', @(checkifconfocalrerun, event) ...
            checkifconfocalfcnrerun(checkifconfocalrerun, event, efstructthreshfrontier1rerun, ...
            threshfrontier1_valuesrerun, efstructthreshfrontier2rerun,threshfrontier2_valuesrerun, ...
            efstructurethresh3rerun, anpassungotsuthreshK1_valuesrerun, efstructurethresh4rerun, ...
            anpassungotsuthreshK2_valuesrerun,efstructurethresh5rerun, anpassungotsuthreshK3_valuesrerun,...
            efstructurethresh7rerun, efstructurethresh7brerun, thresholdnumpixelsforrangefilt_valuesrerun,...
            thresholdnumpixelsforrangefilt_valuesrerunmaximum,...
            describintensthreshold1rerun, text_anpassungintensotsuthresh2rerun, ...
            efintensthresholdadditionstructrerun,anpassungotsuthresh2_valuesrerun , ...
            outoffocusoptionrerun, outoffocusoption_valuesrerun, describp2_1t5rerun, ...
            maxpixnumlayer_textrerun, efmaxpixnumlayerrerun, efminpixnumlayerrerun, ...
            describp2_1t6minrerun, maxpixnumlayer_valuesrerun,describstructurethresh2rerun,...
            texts_threshfront2pixlayerrerun));
        buttonifconfocal2 = checkifconfocalrerun.Value;
        
        % function run-through for confocal option as parameters and
        % descriptions are used differently dependent on checkbox of confocal
        % option being checked or not
        checkifconfocalfcnrerun(checkifconfocalrerun, event, efstructthreshfrontier1rerun, ...
            threshfrontier1_valuesrerun, efstructthreshfrontier2rerun,threshfrontier2_valuesrerun, ...
            efstructurethresh3rerun, anpassungotsuthreshK1_valuesrerun, efstructurethresh4rerun, ...
            anpassungotsuthreshK2_valuesrerun,efstructurethresh5rerun, anpassungotsuthreshK3_valuesrerun,...
            efstructurethresh7rerun, efstructurethresh7brerun, thresholdnumpixelsforrangefilt_valuesrerun, ...
            thresholdnumpixelsforrangefilt_valuesrerunmaximum, ...
            describintensthreshold1rerun, text_anpassungintensotsuthresh2rerun,...
            efintensthresholdadditionstructrerun,anpassungotsuthresh2_valuesrerun , ...
            outoffocusoptionrerun, outoffocusoption_valuesrerun, describp2_1t5rerun,...
            maxpixnumlayer_textrerun,efmaxpixnumlayerrerun, efminpixnumlayerrerun,describp2_1t6minrerun,...
            maxpixnumlayer_valuesrerun,describstructurethresh2rerun, texts_threshfront2pixlayerrerun  );
        
        % checkbox if advanced paramters need to be adjusted
        global buttonifadvanced2
        checkifadvancedrerun = uicheckbox(f2, 'Position', [400 a(4)-95 500 50], 'Value', 0,  'Text',...
            'Advanced', 'FontSize', 16,...
            'ValueChangedFcn', @(checkifadvancedrerun, event)...
            checkifadvancedfcnrerun(checkifadvancedrerun, efstructthreshfrontier1rerun, ...
            describstructurethreshrerun, efstructthreshfrontier2rerun, describstructurethresh2rerun,...
            efstructthreshfrontierafternocellrerun, describstructurethresh6arerun, outoffocusoptionrerun,...
            describintensthreshoofrerun, describfrontieradditionalrerun,efintensthreshoofrerun,...
            effrontieradditionalrerun, describp2_1t3rerun, efintensthreshoofrerun, ...
            describstructurethresh6rerun, efstructurethresh6rerun, describstructurethresh7rerun,describstructurethresh7brerun,...
            efstructurethresh7rerun, efstructurethresh7brerun, efintenstomodulateoofrerun));
        buttonifadvanced2 = checkifadvancedrerun.Value;
        
        % Channel to show for pre-view
        global channeltoshowval2
        
        if isempty(channeltoshowval2)
            channeltoshowval3 = 1
        else
            channeltoshowval3 = channeltoshowval2;
        end
        
        % Description
        p3channeltoshowrerun = uitextarea(f2p2, 'Position', [50 a(4)-810 150 40], 'Value', ...
            'Number of channel to show');
        p3channeltoshowrerun.Enable = 'on';
        p3channeltoshowrerun.Editable = 'off';
        p3channeltoshowrerun.FontSize = 13;
        p3channeltoshowrerun.BackgroundColor = [0.2 0.2 0.2];
        
        
        % Checkbox if just layer thresholding is shown
        checkifjuststructure3rerun = uicheckbox(f2p2, 'Position', [350 a(4)-850 300 50], 'Text',...
            'Show just layer thresholding', 'Value', 0);
        
        % Checkbox to show detection images during run-through
        global buttontoshowrerun
        checkifrunopenrerun = uicheckbox(f2p2, 'Position', [350 a(4)-820 300 50], 'Text', ...
            'Program Run: Visible cell pre-view making?', 'Value', 0, ...
            'ValueChangedFcn', @(checkifrunopenrerun, event) ...
            checkifvisiblererun(checkifrunopenrerun, event)) ;
        buttontoshowrerun = checkifrunopenrerun.Value;
        
        % Checkbox to compare resulting image to original image (image vs.
        % mask, all layers vs. selected layers)
        checkcomparisonimagesrerun = uicheckbox(f2p2, 'Position', [350 a(4)-790 300 50], 'Text', ...
            'Comparison to original image', 'Value', 0);
        
        % Input field
        efp3channeltoshowrerun = uieditfield(f2p2, 'numeric', 'Position', [200 a(4)-810 50 40], 'Value',...
            channeltoshowval3, 'ValueChangedFcn', ...
            @(efp3channeltoshowrerun, event) channeltoshowrerun(efp3channeltoshowrerun, ax3, p4_feedbackfield,...
            slidervalue3,efstructthreshfrontier1rerun, efstructthreshfrontier2rerun, efstructurethresh3rerun,...
            efstructurethresh4rerun, efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, ...
            efstructurethresh6rerun, efstructurethresh7rerun, efstructurethresh7brerun, efintensthreshoofrerun, ...
            efintensthresholdadditionstructrerun, effrontieradditionalrerun, efintensthresh2faintrerun,...
            efintensthreshold1rerun, outoffocusoptionrerun, efintenstomodulateoofrerun, ...
            efintensmaxnumimcellrerun, efintensminnumimcellrerun, efmaxpixnumlayerrerun,efminpixnumlayerrerun,...
            efintensminnumpixcellrerun, efintensmaxnumpixcellrerun, checkifjuststructure3rerun,...
            checkcomparisonimagesrerun, checkifconfocalrerun, checkoverviewchannels3));
        
        % Button to rerun through cell detection (and analysis, dependent on order of cell
        % detection and analysis and whether pre-information of masks/savesettingsofcertaincells.mat is used)
        btnrerun = uibutton(f2, 'Position', [570 a(4)-740 200 60], 'Text', 'Rerun (table values changed)', ...
            'FontWeight', 'bold', 'BackgroundColor', [0.7 0.7 0.7], ...
            'ButtonPushedFcn', @(btnrerun, event) RerunButtonPushed(btnrerun,ax3, p4_feedbackfield,...
            slidervalue3,efstructthreshfrontier1rerun, efstructthreshfrontier2rerun, ...
            efstructurethresh3rerun, efstructurethresh4rerun, efstructurethresh5rerun,...
            efstructthreshfrontierafternocellrerun, efstructurethresh6rerun, efstructurethresh7rerun,efstructurethresh7brerun,...
            efintensthreshoofrerun, efintensthresholdadditionstructrerun, effrontieradditionalrerun, ...
            efintensthresh2faintrerun, efintensthreshold1rerun, outoffocusoptionrerun, ...
            checkifrunopenrerun, efintenstomodulateoofrerun, efintensmaxnumimcellrerun, ...
            efintensminnumimcellrerun, efmaxpixnumlayerrerun, efminpixnumlayerrerun, efintensminnumpixcellrerun, ...
            efintensmaxnumpixcellrerun, checkifjuststructure3rerun, checkcomparisonimagesrerun,...
            checkifconfocalrerun,  efp3channeltoshowrerun, tableresults)  );
        
        % Button to show pre-view of cell with set cell detection parameters
        btnpreviewrerun = uibutton(f2, 'Position', [350 a(4)-740 150 60], 'Text', 'Preview of Rerun',...
            'FontWeight', 'bold', 'BackgroundColor', [0.7 0.7 0.7], ...
            'ButtonPushedFcn', @(btn, event) ...
            PreviewRerunButtonPushed(btn, ax3, p4_feedbackfield, slidervalue3, ...
            efstructthreshfrontier1rerun, efstructthreshfrontier2rerun, efstructurethresh3rerun,...
            efstructurethresh4rerun, efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, ...
            efstructurethresh6rerun, efstructurethresh7rerun, efstructurethresh7brerun,  efintensthreshoofrerun, ...
            efintensthresholdadditionstructrerun, effrontieradditionalrerun, efintensthresh2faintrerun,...
            efintensthreshold1rerun, outoffocusoptionrerun, checkifrunopenrerun, ...
            efintenstomodulateoofrerun, efintensmaxnumimcellrerun, efintensminnumimcellrerun, ...
            efmaxpixnumlayerrerun, efminpixnumlayerrerun, efintensminnumpixcellrerun, efintensmaxnumpixcellrerun, ...
            checkifjuststructure3rerun, checkcomparisonimagesrerun, checkifconfocalrerun, ...
            efp3channeltoshowrerun, checkoverviewchannels3));
        
        % Variables to decide on images made during run-through being saved or
        % not
        global saveimagesyes saveimagesyes2
        saveimagesyes2 = saveimagesyes;
        
        % Checkbox to save images made during run-through
        checkifsaveimagesrerun = uicheckbox(f2p2, 'Position', [350 a(4)-880 300 50], 'Value',...
            saveimagesyes2, 'Text', 'Save images inclusive mask (latter as tif-stack)');
        saveimagesyes2 = checkifsaveimagesrerun.Value;
        
        % fct to load pre-used parameter settings
        loadsettingsifsaved(slidervalue3, p4_feedbackfield, efstructthreshfrontier1rerun, ...
            efstructthreshfrontier2rerun, efstructurethresh3rerun, efstructurethresh4rerun, ...
            efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, efstructurethresh6rerun,...
            efstructurethresh7rerun, efstructurethresh7brerun, efintensthreshoofrerun, efintensthresholdadditionstructrerun,...
            effrontieradditionalrerun, efintensthresh2faintrerun, efintensthreshold1rerun, ...
            outoffocusoptionrerun, checkifrunopenrerun, efintenstomodulateoofrerun, ...
            efintensmaxnumimcellrerun, efintensminnumimcellrerun, efmaxpixnumlayerrerun, ...
            efminpixnumlayerrerun, efintensminnumpixcellrerun,  efintensmaxnumpixcellrerun, ...
            checkifjuststructure3rerun, checkcomparisonimagesrerun, checkifconfocalrerun,...
            efp3channeltoshowrerun)
        
    else
        p3_feedbackfield.Value = 'No runthrough with results.';
        checkifrerun.Value = 0;
    end
    
else
    
end

end


% fct to rerun cell detection settings and adapt table
function RerunButtonPushed(btn,ax3, p4_feedbackfield, slidervalue3, efstructthreshfrontier1rerun, ...
    efstructthreshfrontier2rerun, efstructurethresh3rerun, efstructurethresh4rerun, ...
    efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, efstructurethresh6rerun,...
    efstructurethresh7rerun, efstructurethresh7brerun, efintensthreshoofrerun, efintensthresholdadditionstructrerun,...
    effrontieradditionalrerun, efintensthresh2faintrerun, efintensthreshold1rerun, ...
    outoffocusoptionrerun, checkifrunopenrerun, efintenstomodulateoofrerun, ...
    efintensmaxnumimcellrerun, efintensminnumimcellrerun, efmaxpixnumlayerrerun, ...
    efminpixnumlayerrerun, efintensminnumpixcellrerun, ...
    efintensmaxnumpixcellrerun, checkifjuststructure3rerun, checkcomparisonimagesrerun, ...
    checkifconfocalrerun,  efp3channeltoshowrerun, tableresults)

global numberofimages allchannelnames whichchannelforcelldetect pathwayimport names toignore ...
    buttontoshowrerun buttonallnormalizations
% indices: channel numbers taken
indices = 1:length(allchannelnames);
indices(toignore) = [];

global slidervalue2 slidervaluetaken maskforchannelrerun stackstotakeforchannelrerun


z = slidervalue3;
path = strcat(pathwayimport,'\', names{z});
mask = 0;
stackstotake = 0;
if ~isempty(slidervaluetaken) % if preview has been done
    
    if slidervalue3 == slidervalue2 && slidervaluetaken == slidervalue2
        if  sum(sum(sum(maskforchannelrerun))) ~=0
            mask = maskforchannelrerun;
        end
        
        if  sum(stackstotakeforchannelrerun) ~=0
            stackstotake = stackstotakeforchannelrerun;
        end
        
    end
    
end

% import of detection settings for rerun
channeltoshowval3rerun = efp3channeltoshowrerun.Value;

buttonforcomparisonrerun = checkcomparisonimagesrerun.Value;

buttonforjuststructurererun = checkifjuststructure3rerun.Value;

frontierthrshK1rerun = efstructthreshfrontier1rerun.Value;

frontierthrshK2rerun = efstructthreshfrontier2rerun.Value;

anpassungotsuthreshK1rerun = efstructurethresh3rerun.Value;

anpassungotsuthreshK2rerun = efstructurethresh4rerun.Value;

anpassungotsuthreshK3rerun = efstructurethresh5rerun.Value;

frontier3rerun = efstructthreshfrontierafternocellrerun.Value;

anpassungotsuthreshKsubtrrerun = efstructurethresh6rerun.Value;

thresholdnumpixelsforrangefiltrerun = efstructurethresh7rerun.Value;
thresholdnumpixelsforrangefiltrerunmaximum = efstructurethresh7brerun.Value;

anpassungotsuthresh1rerun = efintensthreshoofrerun.Value;

anpassungotsuthresh2rerun = efintensthresholdadditionstructrerun.Value;

frontieraddition1rerun = effrontieradditionalrerun.Value;

threshforveryfaintrerun = efintensthresh2faintrerun.Value;

anpassungintensotsufrontier1rerun = efintensthreshold1rerun.Value;

buttonforoutoffocuslightrerun = outoffocusoptionrerun.Value;

buttontoshowrerun = checkifrunopenrerun.Value;

tomodulatererun = efintenstomodulateoofrerun.Value;

maxnumofimagescellrerun = efintensmaxnumimcellrerun.Value;

minnumofimagescellrerun = efintensminnumimcellrerun.Value;

maxpixnumlayerrerun = efmaxpixnumlayerrerun.Value;

minpixnumlayerrerun = efminpixnumlayerrerun.Value;

minnumberpixelstodetectforcellrerun = efintensminnumpixcellrerun.Value;

maxnumpixelwholecellrerun = efintensmaxnumpixcellrerun.Value;

buttonifconfocalrerun = checkifconfocalrerun.Value;


if sum(sum(sum(mask))) == 0 || sum(stackstotake) == 0 || max(max(max(mask)))> 1
    
    runyes = 1;
    
    buttonoverviewoverchannels = 0;
    global buttonifcellrecognitionseveralchannels  channelsforcelldetection
    
    [mask, ~, stackstotake] = previewcell(path, numberofimages, allchannelnames, ...
        whichchannelforcelldetect,   frontierthrshK1rerun,frontierthrshK2rerun, ...
        anpassungotsuthreshK1rerun, anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun,...
        frontier3rerun, anpassungotsuthreshKsubtrrerun, thresholdnumpixelsforrangefiltrerun, ...
        thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
        threshforveryfaintrerun,anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun,...
        buttontoshowrerun, tomodulatererun, maxnumofimagescellrerun, minnumofimagescellrerun, ...
        maxpixnumlayerrerun, minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, maxnumpixelwholecellrerun,...
        channeltoshowval3rerun, 0, p4_feedbackfield, ax3,...
        buttonforcomparisonrerun, buttonifconfocalrerun, runyes, buttonoverviewoverchannels, ...
        buttonifcellrecognitionseveralchannels, channelsforcelldetection) ;
    
end

if sum(sum(sum(mask))) == 0
    
    p4_feedbackfield.Value = 'Values not changed as no cell detected with these settings';
    
else
    % mask and stackstotake exist
    % now: load global variables for polarity calculations
    global buttonforallparameters buttonforcellsviewbeforerunbyexport ...
        pixel_x pixel_y voxel_z pathwayexportimages saveimagesyes2 ...
        buttongeneralqnormalization buttondiameter buttonPearson
    
    
    
    
    
    if buttonPearson == 1
        
        pearsonscorrelationcoefficient(mask, stackstotake, path, z)
        
    end
    
    % just calculations when calculations are done intermittent with cell
    % detections, thus just for condition with
    % buttonforcellsviewbeforerunbyexport == 0
    if buttonforcellsviewbeforerunbyexport == 0
        
        % as for all normalizations different global variables need to be
        % loaded: separated by if conditions
        if buttonallnormalizations == 0
            
            global dipolmomentnormalized_finished Rnormalized_finished ...
                qnormalized_finished
            
        end
        
        
        if buttonallnormalizations == 1
            global dipolmomentnormalized11_finished dipolmomentnormalized21_finished ...
                dipolmomentnormalized12_finished dipolmomentnormalized22_finished ...
                dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
                dipolmomentnormalized14_finished dipolmomentnormalized24_finished ...
                dipolmomentnormalized15_finished dipolmomentnormalized25_finished ...
                dipolmomentnormalized16_finished dipolmomentnormalized26_finished ...
                Rnormalized1_finished Rnormalized2_finished ...
                qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
                qnormalized4_finished qnormalized5_finished qnormalized6_finished
            
        end
        
        %general variables that are needed for calculation and saving of
        %results
        global dipolmoment_finished diameter_maxvecfinished diameter_avvecfinished ...
            qposvec_finished numberofpixels_finished numberofpixelspos_finished ...
            avintensity_finished RposRmean_finished RnegRmean_finished RposRneg_finished ...
            intensityvaluetotal_finished
        
        
        
    end
    
    
    if buttonforallparameters ==1 && buttonforcellsviewbeforerunbyexport == 0
        
        global displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
            sumofdistancesqRpos_finished ...
            percoverphi_finished countessphi_finished distancetoavvalphi_finished ...
            zaehlerhowlonghowoftenphi_finished endpointsphi_finished percovertheta_finished ...
            countesstheta_finished distancetoavvaltheta_finished zaehlerhowlonghowoftentheta_finished ...
            endpointstheta_finished howmuchoveritatallphi_finished howmuchoveritatalltheta_finished ...
            startpointsphi_finished meanpointsphi_finished lengthpointsphi_finished ...
            histogramvaluesphi_finished distancetonextphi_finished distancetomeanphi_finished ...
            clusterallphi_finished clusterlengthphi_finished allclusterinputphi_finished ...
            clusterpercentphi_finished clusterpercenttoallpixelsposphi_finished ...
            arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished ...
            arrayofclustersphi_finished startpointstheta_finished meanpointstheta_finished ...
            lengthpointstheta_finished histogramvaluestheta_finished distancetonexttheta_finished ...
            distancetomeantheta_finished clusteralltheta_finished clusterlengththeta_finished ...
            allclusterinputtheta_finished  clusterpercenttheta_finished ...
            clusterpercenttoallpixelspostheta_finished arrayofclusterstrengththeta_finished ...
            arrayofclustersdistancetheta_finished arrayofclusterstheta_finished ...
            final_distancestrengthlist_finished    sorted_volumelist_finished sorted_centroidlist_finished ...
            sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
            sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
            sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
            sorted_maxintensitylist_finished ...
            arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished
    end
    
    if buttonforcellsviewbeforerunbyexport == 0
        if buttonallnormalizations == 0
            dipolmomentnormalized = dipolmomentnormalized_finished;
            Rnormalized = Rnormalized_finished;
            qnormalized = qnormalized_finished;
            
        end
        
        if buttonallnormalizations == 1
            dipolmomentnormalized11 = dipolmomentnormalized11_finished;
            dipolmomentnormalized21 = dipolmomentnormalized21_finished;
            dipolmomentnormalized12 = dipolmomentnormalized12_finished;
            dipolmomentnormalized22 = dipolmomentnormalized22_finished;
            dipolmomentnormalized13 = dipolmomentnormalized13_finished;
            dipolmomentnormalized23 = dipolmomentnormalized23_finished;
            dipolmomentnormalized14 = dipolmomentnormalized14_finished;
            dipolmomentnormalized24 = dipolmomentnormalized24_finished;
            dipolmomentnormalized15 = dipolmomentnormalized15_finished;
            dipolmomentnormalized25 = dipolmomentnormalized25_finished;
            dipolmomentnormalized16 = dipolmomentnormalized16_finished;
            dipolmomentnormalized26 = dipolmomentnormalized26_finished;
            
            Rnormalized1 = Rnormalized1_finished;
            Rnormalized2 = Rnormalized2_finished;
            qnormalized1 = qnormalized1_finished;
            qnormalized2 = qnormalized2_finished;
            qnormalized3 = qnormalized3_finished;
            qnormalized4 = qnormalized4_finished;
            qnormalized5 = qnormalized5_finished;
            qnormalized6 = qnormalized6_finished;
            
        end
        
        dipolmoment = dipolmoment_finished;
        
        diameter_maxvec = diameter_maxvecfinished;
        diameter_avvec = diameter_avvecfinished;
        
        qposvec = qposvec_finished;
        numberofpixels = numberofpixels_finished;
        numberofpixelspos = numberofpixelspos_finished;
        avintensity = avintensity_finished;
        RposRmean = RposRmean_finished;
        RnegRmean = RnegRmean_finished;
        RposRneg = RposRneg_finished;
        intensityvaluetotal = intensityvaluetotal_finished;
        
        if buttonforallparameters ==1
            
            displacementRposRnegMRposMRneg = displacementRposRnegMRposMRneg_finished;
            displacementDipoleMomentfromMiddle = displacementDipoleMomentfromMiddle_finished;
            sumofdistancesqRpos = sumofdistancesqRpos_finished;
            percoverphi = percoverphi_finished;
            countessphi = countessphi_finished;
            distancetoavvalphi = distancetoavvalphi_finished;
            zaehlerhowlonghowoftenphi = zaehlerhowlonghowoftenphi_finished;
            endpointsphi = endpointsphi_finished;
            percovertheta = percovertheta_finished;
            countesstheta = countesstheta_finished;
            distancetoavvaltheta = distancetoavvaltheta_finished;
            zaehlerhowlonghowoftentheta = zaehlerhowlonghowoftentheta_finished;
            endpointstheta = endpointstheta_finished;
            howmuchoveritatallphi = howmuchoveritatallphi_finished;
            howmuchoveritatalltheta = howmuchoveritatalltheta_finished;
            startpointsphi=startpointsphi_finished;
            meanpointsphi=meanpointsphi_finished;
            lengthpointsphi=lengthpointsphi_finished ;
            histogramvaluesphi=histogramvaluesphi_finished ;
            distancetonextphi =distancetonextphi_finished;
            distancetomeanphi =distancetomeanphi_finished ;
            clusterallphi =clusterallphi_finished ;
            clusterlengthphi=clusterlengthphi_finished;
            allclusterinputphi =allclusterinputphi_finished ;
            clusterpercentphi =clusterpercentphi_finished;
            clusterpercenttoallpixelsposphi =clusterpercenttoallpixelsposphi_finished;
            arrayofclusterstrengthphi  =arrayofclusterstrengthphi_finished ;
            arrayofclustersdistancephi   =arrayofclustersdistancephi_finished ;
            arrayofclustersphi   =arrayofclustersphi_finished;
            startpointstheta=startpointstheta_finished;
            meanpointstheta=meanpointstheta_finished;
            lengthpointstheta=lengthpointstheta_finished ;
            histogramvaluestheta=histogramvaluestheta_finished ;
            distancetonexttheta =distancetonexttheta_finished;
            distancetomeantheta =distancetomeantheta_finished ;
            clusteralltheta =clusteralltheta_finished ;
            clusterlengththeta=clusterlengththeta_finished;
            allclusterinputtheta =allclusterinputtheta_finished ;
            clusterpercenttheta =clusterpercenttheta_finished;
            clusterpercenttoallpixelspostheta =clusterpercenttoallpixelspostheta_finished;
            arrayofclusterstrengththeta  =arrayofclusterstrengththeta_finished ;
            arrayofclustersdistancetheta   =arrayofclustersdistancetheta_finished ;
            arrayofclusterstheta   =arrayofclusterstheta_finished;
            
            final_distancestrengthlist = final_distancestrengthlist_finished ;
            sorted_volumelist = sorted_volumelist_finished;
            sorted_centroidlist = sorted_centroidlist_finished;
            sorted_equivdiameterlist  = sorted_equivdiameterlist_finished;
            sorted_voxellistlist= sorted_voxellistlist_finished ;
            sorted_surfacearealist   = sorted_surfacearealist_finished;
            sorted_voxelvalueslist = sorted_voxelvalueslist_finished;
            sorted_weightedcentroidlist= sorted_weightedcentroidlist_finished;
            sorted_meanintensitylist = sorted_meanintensitylist_finished;
            sorted_maxintensitylist = sorted_maxintensitylist_finished;
            arrayfixed4distancelist = arrayfixed4distancelist_finished;
            arrayfixed5strengthlist = arrayfixed5strengthlist_finished;
            sorted_array_tofilldistancelist = sorted_array_tofilldistancelist_finished;
            sorted_array_tofillstrengthlist = sorted_array_tofillstrengthlist_finished;
            
        end
    end
    
    if buttonforcellsviewbeforerunbyexport == 0
        
        if buttonforallparameters ==1 && buttonallnormalizations == 0
            
            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec,...
                qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean,...
                intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg,...
                displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, countessphi,...
                distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, ...
                countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta, endpointstheta,...
                howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                lengthpointsphi, histogramvaluesphi, distancetonextphi, distancetomeanphi, ...
                clusterallphi,clusterlengthphi,allclusterinputphi, clusterpercentphi, ...
                clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi, ...
                arrayofclustersdistancephi,arrayofclustersphi, startpointstheta, meanpointstheta,...
                lengthpointstheta, histogramvaluestheta, distancetonexttheta, distancetomeantheta, ...
                clusteralltheta, clusterlengththeta, allclusterinputtheta, clusterpercenttheta,...
                clusterpercenttoallpixelspostheta, arrayofclusterstrengththeta, ...
                arrayofclustersdistancetheta,arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]= ...
                polarityquantification(path, z, numberofimages,names, allchannelnames, toignore, mask, ...
                stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, saveimagesyes2, ...
                buttongeneralqnormalization, buttondiameter, dipolmomentnormalized, dipolmoment,...
                Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec,...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, ax3,...
                intensityvaluetotal, RnegRmean, RposRneg, displacementRposRnegMRposMRneg, ...
                displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi,...
                percovertheta, countesstheta, distancetoavvaltheta, zaehlerhowlonghowoftentheta,...
                endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, ...
                startpointsphi, meanpointsphi, lengthpointsphi, histogramvaluesphi, ...
                distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,...
                allclusterinputphi, clusterpercentphi, clusterpercenttoallpixelsposphi, ...
                arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta,...
                distancetonexttheta, distancetomeantheta, clusteralltheta, clusterlengththeta, ...
                allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta,...
                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, ...
                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
            
            
        end
        % polarity quantification without all parameters
        if buttonforallparameters == 0 && buttonallnormalizations == 0
            
            [dipolmomentnormalized, dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, ...
                qnormalized, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean,...
                intensityvaluetotal, RnegRmean, RposRneg] = ...
                polarityquantificationnotallparameters(path, z, numberofimages,names, allchannelnames, ...
                toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages, ...
                saveimagesyes2, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized,...
                dipolmoment, Rnormalized, diameter_maxvec, diameter_avvec, qnormalized, qposvec,...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, ax3, intensityvaluetotal,...
                RnegRmean, RposRneg);
            
        end
        
        
        if buttonforallparameters == 1 && buttonallnormalizations == 1
            
            [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
                dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
                dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
                dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
                qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
                qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
                RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
                percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
                countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
                howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
                distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
                arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
                lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
                allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
                arrayofclustersdistancetheta arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, ...
                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist]  ...
                = polarityquantificationallnormalizations(path, z, numberofimages, names, ...
                allchannelnames, toignore, mask, stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                saveimagesyes2, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
                dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
                dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
                dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
                diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax3, intensityvaluetotal, ...
                RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
                countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
                zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
                lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
                clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
                startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
                clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
                arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
                final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
                sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
                sorted_meanintensitylist, sorted_maxintensitylist, ...
                arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist);
            
        end
        
        if buttonforallparameters == 0 && buttonallnormalizations == 1
            
            [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] ...
                = polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
                toignore, mask,  stackstotake, pixel_x, pixel_y, voxel_z, pathwayexportimages,...
                saveimagesyes2, buttongeneralqnormalization, buttondiameter, ...
                dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
                dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
                dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
                dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
                qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
                numberofpixels, numberofpixelspos, avintensity, RposRmean, ax3, intensityvaluetotal, RnegRmean, RposRneg);
            
        end
        
    end
    
    close all
    
    if buttonforcellsviewbeforerunbyexport == 0
        if buttonallnormalizations == 0
            dipolmomentnormalized_finished(z,:) = dipolmomentnormalized(z,:);
            Rnormalized_finished(z,:) = Rnormalized(z,:);
            qnormalized_finished(z,:) = qnormalized(z,:);
        end
        
        if buttonallnormalizations == 1
            dipolmomentnormalized11_finished(z,:) = dipolmomentnormalized11(z,:);
            dipolmomentnormalized21_finished(z,:) = dipolmomentnormalized21(z,:);
            dipolmomentnormalized12_finished(z,:) = dipolmomentnormalized12(z,:);
            dipolmomentnormalized22_finished(z,:) = dipolmomentnormalized22(z,:);
            dipolmomentnormalized13_finished(z,:) = dipolmomentnormalized13(z,:);
            dipolmomentnormalized23_finished(z,:) = dipolmomentnormalized23(z,:);
            dipolmomentnormalized14_finished(z,:) = dipolmomentnormalized14(z,:);
            dipolmomentnormalized24_finished(z,:) = dipolmomentnormalized24(z,:);
            dipolmomentnormalized15_finished(z,:) = dipolmomentnormalized15(z,:);
            dipolmomentnormalized25_finished(z,:) = dipolmomentnormalized25(z,:);
            dipolmomentnormalized16_finished(z,:) = dipolmomentnormalized16(z,:);
            dipolmomentnormalized26_finished(z,:) = dipolmomentnormalized26(z,:);
            
            Rnormalized1_finished(z,:) = Rnormalized1(z,:);
            Rnormalized2_finished(z,:) = Rnormalized2(z,:);
            qnormalized1_finished(z,:) = qnormalized1(z,:);
            qnormalized2_finished(z,:) = qnormalized2(z,:);
            qnormalized3_finished(z,:) = qnormalized3(z,:);
            qnormalized4_finished(z,:) = qnormalized4(z,:);
            qnormalized5_finished(z,:) = qnormalized5(z,:);
            qnormalized6_finished(z,:) = qnormalized6(z,:);
            
        end
        
        
        dipolmoment_finished(z,:,:) = dipolmoment(z,:,:);
        
        diameter_maxvecfinished(z) = diameter_maxvec(z);
        diameter_avvecfinished(z) = diameter_avvec(z);
        
        qposvec_finished(z,:) = qposvec(z,:);
        numberofpixels_finished(z) = numberofpixels(z);
        numberofpixelspos_finished(z) = numberofpixelspos(z);
        avintensity_finished(z,:) = avintensity(z,:);
        RposRmean_finished(z, :,:)  = RposRmean(z,:,:);
        RnegRmean_finished(z,:,:) = RnegRmean(z,:,:);
        RposRneg_finished(z,:,:) = RposRneg(z,:,:);
        intensityvaluetotal_finished(z,:) = intensityvaluetotal(z,:);
        if buttonforallparameters ==1
            displacementRposRnegMRposMRneg_finished(z,:) = displacementRposRnegMRposMRneg(z,:);
            displacementDipoleMomentfromMiddle_finished(z,:) = displacementDipoleMomentfromMiddle(z,:);
            sumofdistancesqRpos_finished(:,z) = sumofdistancesqRpos(:,z);
            percoverphi_finished(:,z) = percoverphi(:,z);
            countessphi_finished(:,z) = countessphi(:,z);
            distancetoavvalphi_finished(:,z) = distancetoavvalphi(:,z);
            
            percovertheta_finished(:,z) = percovertheta(:,z);
            countesstheta_finished(:,z) = countesstheta(:,z);
            distancetoavvaltheta_finished(:,z) = distancetoavvaltheta(:,z);
            final_distancestrengthlist_finished(z,:) = final_distancestrengthlist(z,:) ;
            
            
            for uka = 1:length(indices)
                zaehlerhowlonghowoftenphi_finished{uka,z} = zaehlerhowlonghowoftenphi{uka,z};
                endpointsphi_finished{uka,z} = endpointsphi{uka,z};
                
                zaehlerhowlonghowoftentheta_finished{uka,z} = zaehlerhowlonghowoftentheta{uka,z};
                endpointstheta_finished{uka,z} = endpointstheta{uka,z};
                
                howmuchoveritatallphi_finished{uka,z} = howmuchoveritatallphi{uka,z};
                howmuchoveritatalltheta_finished{uka,z} = howmuchoveritatalltheta{uka,z};
                
                startpointsphi_finished{uka,z} =startpointsphi{uka,z};
                meanpointsphi_finished{uka,z} = meanpointsphi{uka,z} ;
                lengthpointsphi_finished{uka,z} = lengthpointsphi{uka,z};
                distancetonextphi_finished{uka,z} = distancetonextphi{uka,z};
                distancetomeanphi_finished{uka,z} =  distancetomeanphi{uka,z};
                clusterallphi_finished{uka,z} = clusterallphi{uka,z}; % arrayofclusters;
                clusterlengthphi_finished{uka,z} = clusterlengthphi{uka,z};
                clusterpercentphi_finished{uka,z} = clusterpercentphi{uka,z} ;
                arrayofclustersphi_finished{uka,z}= arrayofclustersphi{uka,z};
                
                startpointstheta_finished{uka,z} =startpointstheta{uka,z};
                meanpointstheta_finished{uka,z} = meanpointstheta{uka,z};
                lengthpointstheta_finished{uka,z} = lengthpointstheta{uka,z};
                distancetonexttheta_finished{uka,z} = distancetonexttheta{uka,z};
                distancetomeantheta_finished{uka,z} =  distancetomeantheta{uka,z};
                clusteralltheta_finished{uka,z} = clusteralltheta{uka,z}; % arrayofclusters;
                clusterlengththeta_finished{uka,z} = clusterlengththeta{uka,z};
                clusterpercenttheta_finished{uka,z} = clusterpercenttheta{uka,z} ;
                arrayofclusterstheta_finished{uka,z}= arrayofclusterstheta{uka,z};
                
                clusterpercenttoallpixelspostheta_finished{uka,z} =clusterpercenttoallpixelspostheta{uka,z};
                clusterpercenttoallpixelsposphi_finished{uka,z} =clusterpercenttoallpixelsposphi{uka,z};
                sorted_volumelist_finished{z,uka} = sorted_volumelist{z,uka};
                sorted_centroidlist_finished{z,uka} = sorted_centroidlist{z,uka};
                sorted_equivdiameterlist_finished{z,uka}  = sorted_equivdiameterlist{z,uka};
                sorted_voxellistlist_finished{z,uka} = sorted_voxellistlist{z,uka};
                sorted_surfacearealist_finished{z,uka}   = sorted_surfacearealist{z,uka};
                sorted_voxelvalueslist_finished{z,uka} = sorted_voxelvalueslist{z,uka};
                sorted_weightedcentroidlist_finished{z,uka}= sorted_weightedcentroidlist{z,uka};
                sorted_meanintensitylist_finished{z,uka} = sorted_meanintensitylist{z,uka};
                sorted_maxintensitylist_finished{z,uka} = sorted_maxintensitylist{z,uka};
                
                arrayfixed4distancelist_finished(z,uka,:) = arrayfixed4distancelist(z,uka,:);
                arrayfixed5strengthlist_finished(z,uka,:) = arrayfixed5strengthlist(z,uka,:);
                sorted_array_tofilldistancelist_finished{z,uka}    =   sorted_array_tofilldistancelist{z,uka};
                sorted_array_tofillstrengthlist_finished{z,uka} = sorted_array_tofillstrengthlist{z,uka};
                
            end
            
            histogramvaluesphi_finished(z,:,:) = histogramvaluesphi(z,:,:);
            allclusterinputphi_finished(:,z) = allclusterinputphi(:,z);
            arrayofclusterstrengthphi_finished(z,:,:) = arrayofclusterstrengthphi(z,:,:);
            arrayofclustersdistancephi_finished(z,:,:) = arrayofclustersdistancephi(z,:,:);
            histogramvaluestheta_finished(z,:,:) = histogramvaluestheta(z,:,:);
            allclusterinputtheta_finished(:,z) = allclusterinputtheta(:,z);
            arrayofclusterstrengththeta_finished(z,:,:) = arrayofclusterstrengththeta(z,:,:);
            arrayofclustersdistancetheta_finished(z,:,:) = arrayofclustersdistancetheta(z,:,:);
        end
    end
    
    global savingofsettingsofcertaincells
    
    if isempty(savingofsettingsofcertaincells)
        savingofsettingsofcertaincells = cell(numberofimages,1);
    end
    
    savingofsettingsofcertaincells{z} = {channeltoshowval3rerun,buttonforcomparisonrerun, ...
        buttonforjuststructurererun, frontierthrshK1rerun, frontierthrshK2rerun, ...
        anpassungotsuthreshK1rerun, anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun,...
        frontier3rerun, anpassungotsuthreshKsubtrrerun, thresholdnumpixelsforrangefiltrerun,...
        thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
        threshforveryfaintrerun, anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun,...
        0, tomodulatererun,  maxnumofimagescellrerun, minnumofimagescellrerun, ...
        maxpixnumlayerrerun, minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, ...
        maxnumpixelwholecellrerun,buttonifconfocalrerun};
    
    updateresultstable(tableresults, z, p4_feedbackfield)
    p4_feedbackfield.Value = 'Values changed';
    
end

end




% fct to switch viewed channel and refresh cell view in Rerun Tab
function channeltoshowrerun(efp3channeltoshowrerun, ax3, p4_feedbackfield, ...
    slidervalue3,efstructthreshfrontier1rerun, efstructthreshfrontier2rerun, ...
    efstructurethresh3rerun, efstructurethresh4rerun, efstructurethresh5rerun, ...
    efstructthreshfrontierafternocellrerun, efstructurethresh6rerun, efstructurethresh7rerun, ...
    efstructurethresh7brerun, efintensthreshoofrerun, efintensthresholdadditionstructrerun, effrontieradditionalrerun, ...
    efintensthresh2faintrerun, efintensthreshold1rerun, outoffocusoptionrerun, ...
    efintenstomodulateoofrerun, efintensmaxnumimcellrerun, efintensminnumimcellrerun,...
    efmaxpixnumlayerrerun, efminpixnumlayerrerun, efintensminnumpixcellrerun, efintensmaxnumpixcellrerun, ...
    checkifjuststructure3rerun, checkcomparisonimagesrerun, checkifconfocalrerun, checkoverviewchannels)

buttonoverviewoverchannels = checkoverviewchannels.Value;
global pathwayimport names numberofimages allchannelnames whichchannelforcelldetect
global slidervalue2 maskforchannelrerun stackstotakeforchannelrerun slidervaluetaken

value = slidervalue3;
path = strcat(pathwayimport,'\', names{value});

mask = 0;
stackstotake = 0;

if ~isempty(slidervaluetaken)
    if slidervalue3 == slidervalue2 && slidervaluetaken == slidervalue2
        if  sum(sum(sum(maskforchannelrerun))) ~=0
            mask = maskforchannelrerun;
        end
        
        if  sum(stackstotakeforchannelrerun) ~=0
            stackstotake = stackstotakeforchannelrerun;
        end
        
    end
end

channeltoshowval3rerun = efp3channeltoshowrerun.Value;
buttonforcomparisonrerun = checkcomparisonimagesrerun.Value;
buttonforjuststructurererun = checkifjuststructure3rerun.Value;

if sum(sum(sum(mask))) == 0 && sum(stackstotake) ~=0
    
    b = imfinfo(path);
    stacknum = numel(b);
    
    channeltoshowval = channeltoshowval3rerun;
    
    count = 1;
    M_original = zeros(b(1).Height, b(1).Width,length(stackstotake));
    for k = channeltoshowval+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):channeltoshowval+length(allchannelnames)*(stackstotake(end)-1)
        M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    
    if buttonforcomparisonrerun == 0
        montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax3);
        title(allchannelnames(channeltoshowval),  'FontWeight', 'bold', 'FontSize', 20)
    end
    
    
    if buttonforcomparisonrerun ==1
        
        count = 1;
        M_original_all = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
        for k = channeltoshowval:length(allchannelnames):stacknum
            M_original_all(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
            count = count + 1;
        end
        
        a= montage(double(M_original_all(:,:,:))./max(max(double(M_original_all(:,:,:)))));
        totake_a = a.CData;
        totake_a(:,size(totake_a,2)+1:size(totake_a,2)+10) = 1;
        b= montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))));
        totake_b = b.CData;
        title(allchannelnames(channeltoshowval),  'FontWeight', 'bold', 'FontSize', 20);
        imshowpair(totake_a, totake_b, 'montage', 'Parent', ax3);
        
    end
    
end

if sum(sum(sum(mask))) ~= 0 && sum(stackstotake) ~= 0
    
    b = imfinfo(path);
    stacknum = numel(b);
    
    channeltoshowval = channeltoshowval3rerun;
    count = 1;
    
    M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
    for k = channeltoshowval:length(allchannelnames):stacknum
        M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    
    if buttonforcomparisonrerun == 0
        
        
        a = montage(double(M_original(:,:,stackstotake)).*double(mask(:,:,stackstotake))./double(max(max(M_original(:,:,stackstotake)))), 'Parent', ax3);
        totake_a = a.CData;
        
        
        b = montage(double(M_original(:,:, stackstotake))./double(max(max(M_original(:,:,stackstotake)))), 'Parent', ax3);
        totake_b = b.CData;
        
        title([allchannelnames(channeltoshowval), ': Image information together with mask'], 'Parent', ax3);
        
        imshowpair(totake_b, totake_a, 'Parent', ax3);
    end
    
    
    if buttonforcomparisonrerun == 1
        
        mask_toshow = mask(:,:,stackstotake);
        
        a = montage(double(mask_toshow(:,:,:))./max(max(double(mask_toshow(:,:,:)))));
        totake_a = a.CData;
        totake_a(:,size(totake_a,2)+1:size(totake_a,2)+10) = 1;
        b = montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:)))));
        totake_b = b.CData;
        title(allchannelnames(channeltoshowval),  'FontWeight', 'bold', 'FontSize', 20);
        imshowpair(totake_a, totake_b, 'montage', 'Parent', ax3);
        
    end
    
end

if sum(sum(sum(mask))) == 0 && sum(stackstotake) == 0
    
    frontierthrshK1rerun = efstructthreshfrontier1rerun.Value;
    frontierthrshK2rerun = efstructthreshfrontier2rerun.Value;
    anpassungotsuthreshK1rerun = efstructurethresh3rerun.Value;
    anpassungotsuthreshK2rerun = efstructurethresh4rerun.Value;
    anpassungotsuthreshK3rerun = efstructurethresh5rerun.Value;
    frontier3rerun = efstructthreshfrontierafternocellrerun.Value;
    anpassungotsuthreshKsubtrrerun = efstructurethresh6rerun.Value;
    thresholdnumpixelsforrangefiltrerun = efstructurethresh7rerun.Value;
    thresholdnumpixelsforrangefiltrerunmaximum = efstructurethresh7brerun.Value;
    anpassungotsuthresh1rerun = efintensthreshoofrerun.Value;
    anpassungotsuthresh2rerun = efintensthresholdadditionstructrerun.Value;
    frontieraddition1rerun = effrontieradditionalrerun.Value;
    threshforveryfaintrerun = efintensthresh2faintrerun.Value;
    anpassungintensotsufrontier1rerun = efintensthreshold1rerun.Value;
    buttonforoutoffocuslightrerun = outoffocusoptionrerun.Value;
    tomodulatererun = efintenstomodulateoofrerun.Value;
    maxnumofimagescellrerun = efintensmaxnumimcellrerun.Value;
    minnumofimagescellrerun = efintensminnumimcellrerun.Value;
    maxpixnumlayerrerun = efmaxpixnumlayerrerun.Value;
    minpixnumlayerrerun = efminpixnumlayerrerun.Value;
    minnumberpixelstodetectforcellrerun = efintensminnumpixcellrerun.Value;
    maxnumpixelwholecellrerun = efintensmaxnumpixcellrerun.Value;
    buttonifconfocalrerun = checkifconfocalrerun.Value;
    runyes = 0;
    
    global buttonifcellrecognitionseveralchannels  channelsforcelldetection
    [mask, imagetoshow, stackstotake] = previewcell(path, numberofimages, allchannelnames,...
        whichchannelforcelldetect, frontierthrshK1rerun, frontierthrshK2rerun, ...
        anpassungotsuthreshK1rerun, anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun,...
        frontier3rerun, anpassungotsuthreshKsubtrrerun, thresholdnumpixelsforrangefiltrerun, ...
        thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
        threshforveryfaintrerun,anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun,...
        0, tomodulatererun, maxnumofimagescellrerun, minnumofimagescellrerun, maxpixnumlayerrerun, minpixnumlayerrerun,...
        minnumberpixelstodetectforcellrerun, maxnumpixelwholecellrerun, channeltoshowval3rerun,...
        buttonforjuststructurererun, p4_feedbackfield, ax3 , buttonforcomparisonrerun, ...
        buttonifconfocalrerun, runyes, buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels, ...
        channelsforcelldetection) ;
    
end

end


% fct using fct previewcell() with rerun parameters giving out mask as
% global parameter
function PreviewRerunButtonPushed(btn,ax3, p4_feedbackfield, slidervalue3, ...
    efstructthreshfrontier1rerun, efstructthreshfrontier2rerun, efstructurethresh3rerun, ...
    efstructurethresh4rerun, efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, ...
    efstructurethresh6rerun, efstructurethresh7rerun,efstructurethresh7brerun, efintensthreshoofrerun, ...
    efintensthresholdadditionstructrerun, effrontieradditionalrerun, efintensthresh2faintrerun, ...
    efintensthreshold1rerun, outoffocusoptionrerun, checkifrunopenrerun, efintenstomodulateoofrerun, ...
    efintensmaxnumimcellrerun,efintensminnumimcellrerun, efmaxpixnumlayerrerun, efminpixnumlayerrerun, efintensminnumpixcellrerun, ...
    efintensmaxnumpixcellrerun, checkifjuststructure3rerun, checkcomparisonimagesrerun, ...
    checkifconfocalrerun, efp3channeltoshowrerun, checkoverviewchannels2)

global pathwayimport names numberofimages allchannelnames whichchannelforcelldetect
buttonoverviewoverchannels2 = checkoverviewchannels2.Value;
runyes = 0;
value = slidervalue3;
path = strcat(pathwayimport,'\', names{value});

frontierthrshK1rerun = efstructthreshfrontier1rerun.Value;

frontierthrshK2rerun = efstructthreshfrontier2rerun.Value;

anpassungotsuthreshK1rerun = efstructurethresh3rerun.Value;

anpassungotsuthreshK2rerun = efstructurethresh4rerun.Value;

anpassungotsuthreshK3rerun = efstructurethresh5rerun.Value;

frontier3rerun = efstructthreshfrontierafternocellrerun.Value;

anpassungotsuthreshKsubtrrerun = efstructurethresh6rerun.Value;

thresholdnumpixelsforrangefiltrerun = efstructurethresh7rerun.Value;
thresholdnumpixelsforrangefiltrerunmaximum = efstructurethresh7brerun.Value;
anpassungotsuthresh1rerun = efintensthreshoofrerun.Value;

anpassungotsuthresh2rerun = efintensthresholdadditionstructrerun.Value;

frontieraddition1rerun = effrontieradditionalrerun.Value;

threshforveryfaintrerun = efintensthresh2faintrerun.Value;

anpassungintensotsufrontier1rerun = efintensthreshold1rerun.Value;

buttonforoutoffocuslightrerun = outoffocusoptionrerun.Value;

buttontoshowrerun = checkifrunopenrerun.Value;

tomodulatererun = efintenstomodulateoofrerun.Value;

maxnumofimagescellrerun = efintensmaxnumimcellrerun.Value;

minnumofimagescellrerun = efintensminnumimcellrerun.Value;

maxpixnumlayerrerun = efmaxpixnumlayerrerun.Value;

minpixnumlayerrerun = efminpixnumlayerrerun.Value;

minnumberpixelstodetectforcellrerun = efintensminnumpixcellrerun.Value;

maxnumpixelwholecellrerun = efintensmaxnumpixcellrerun.Value;

buttonforjuststructurererun = checkifjuststructure3rerun.Value;

buttonforcomparisonrerun = checkcomparisonimagesrerun.Value;

buttonifconfocalrerun = checkifconfocalrerun.Value;
runyes = 0;
channeltoshowval3rerun = efp3channeltoshowrerun.Value;

buttonoverviewoverchannels = 0;

global buttonifcellrecognitionseveralchannels channelsforcelldetection

if isempty(buttonifcellrecognitionseveralchannels)
    buttonifcellrecognitionseveralchannels = 0;
end

[mask, imagetoshow, stackstotake] = previewcell(path, numberofimages, allchannelnames,...
    whichchannelforcelldetect, frontierthrshK1rerun, frontierthrshK2rerun, anpassungotsuthreshK1rerun,...
    anpassungotsuthreshK2rerun, anpassungotsuthreshK3rerun, frontier3rerun, ...
    anpassungotsuthreshKsubtrrerun, thresholdnumpixelsforrangefiltrerun, ...
    thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun, ...
    threshforveryfaintrerun,anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun,...
    buttontoshowrerun, tomodulatererun, maxnumofimagescellrerun, minnumofimagescellrerun,...
    maxpixnumlayerrerun, minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, maxnumpixelwholecellrerun,...
    channeltoshowval3rerun, buttonforjuststructurererun, p4_feedbackfield, ax3 , ...
    buttonforcomparisonrerun, buttonifconfocalrerun, runyes, buttonoverviewoverchannels2,...
    buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
'sum of mask preview'
sum(sum(sum(mask)))
global maskforchannelrerun stackstotakeforchannelrerun slidervaluetaken

maskforchannelrerun = mask;
stackstotakeforchannelrerun = stackstotake;
slidervaluetaken = slidervalue3;

end


% fct for checking if already changed rerun parameters are saved for
% certain cell when rerunbutton pushed
function loadsettingsifsaved(slidervalue3, p4_feedbackfield, efstructthreshfrontier1rerun,...
    efstructthreshfrontier2rerun, efstructurethresh3rerun, efstructurethresh4rerun,...
    efstructurethresh5rerun, efstructthreshfrontierafternocellrerun, efstructurethresh6rerun,...
    efstructurethresh7rerun, efstructurethresh7brerun, efintensthreshoofrerun, efintensthresholdadditionstructrerun,...
    effrontieradditionalrerun, efintensthresh2faintrerun, efintensthreshold1rerun,...
    outoffocusoptionrerun, checkifrunopenrerun, efintenstomodulateoofrerun, ...
    efintensmaxnumimcellrerun, efintensminnumimcellrerun, efmaxpixnumlayerrerun,...
    efminpixnumlayerrerun, efintensminnumpixcellrerun, efintensmaxnumpixcellrerun,...
    checkifjuststructure3rerun, checkcomparisonimagesrerun, checkifconfocalrerun, ...
    efp3channeltoshowrerun)
global savingofsettingsofcertaincells numberofimages ...
    slidervalue2

if isempty(savingofsettingsofcertaincells)
    savingofsettingsofcertaincells = cell(numberofimages,1);
end

if slidervalue3 == 0
    slidervalue3 = 1;
    slidervalue2 = 1;
end

if ~isempty(savingofsettingsofcertaincells)
    if ~isempty(savingofsettingsofcertaincells{slidervalue3})
        
        [channeltoshowval3rerun,buttonforcomparisonrerun,  buttonforjuststructurererun, ...
            frontierthrshK1rerun, frontierthrshK2rerun, anpassungotsuthreshK1rerun, ...
            anpassungotsuthreshK2rerun , anpassungotsuthreshK3rerun, frontier3rerun,...
            anpassungotsuthreshKsubtrrerun,thresholdnumpixelsforrangefiltrerun, ...
            thresholdnumpixelsforrangefiltrerunmaximum, anpassungotsuthresh1rerun, anpassungotsuthresh2rerun, frontieraddition1rerun,...
            threshforveryfaintrerun, anpassungintensotsufrontier1rerun, buttonforoutoffocuslightrerun,...
            buttontoshowrerun, tomodulatererun, maxnumofimagescellrerun, minnumofimagescellrerun,...
            maxpixnumlayerrerun, minpixnumlayerrerun, minnumberpixelstodetectforcellrerun, ...
            maxnumpixelwholecellrerun,buttonifconfocalrerun ] =...
            savingofsettingsofcertaincells{slidervalue3}{1:27};
        
        efstructthreshfrontier1rerun.Value= frontierthrshK1rerun;
        
        efstructthreshfrontier2rerun.Value=frontierthrshK2rerun;
        
        efstructurethresh3rerun.Value =anpassungotsuthreshK1rerun;
        
        efstructurethresh4rerun.Value =anpassungotsuthreshK2rerun;
        
        efstructurethresh5rerun.Value =anpassungotsuthreshK3rerun;
        
        efstructthreshfrontierafternocellrerun.Value =frontier3rerun;
        
        efstructurethresh6rerun.Value =anpassungotsuthreshKsubtrrerun;
        
        efstructurethresh7rerun.Value =thresholdnumpixelsforrangefiltrerun;
        efstructurethresh7brerun.Value = thresholdnumpixelsforrangefiltrerunmaximum;
        efintensthreshoofrerun.Value =anpassungotsuthresh1rerun;
        
        efintensthresholdadditionstructrerun.Value =anpassungotsuthresh2rerun;
        
        effrontieradditionalrerun.Value =frontieraddition1rerun;
        
        efintensthresh2faintrerun.Value = threshforveryfaintrerun;
        
        efintensthreshold1rerun.Value =anpassungintensotsufrontier1rerun;
        
        outoffocusoptionrerun.Value =buttonforoutoffocuslightrerun;
        
        checkifrunopenrerun.Value =buttontoshowrerun;
        
        efintenstomodulateoofrerun.Value =tomodulatererun;
        
        efintensmaxnumimcellrerun.Value =maxnumofimagescellrerun;
        
        efintensminnumimcellrerun.Value = minnumofimagescellrerun;
        
        efmaxpixnumlayerrerun.Value = maxpixnumlayerrerun;
        
        efminpixnumlayerrerun.Value = minpixnumlayerrerun;
        
        efintensminnumpixcellrerun.Value =minnumberpixelstodetectforcellrerun;
        
        efintensmaxnumpixcellrerun.Value =maxnumpixelwholecellrerun;
        
        checkifjuststructure3rerun.Value =buttonforjuststructurererun;
        
        checkcomparisonimagesrerun.Value =buttonforcomparisonrerun;
        
        checkifconfocalrerun.Value =buttonifconfocalrerun;
        
        efp3channeltoshowrerun.Value =channeltoshowval3rerun;
        
    else
        
        p4_feedbackfield.Value = 'No differently saved values for this cell yet.';
        
    end
    
else
    p4_feedbackfield.Value = 'No runthrough with results.';
    
end

end


% fct to check for getting overview over channel images for certain slice value
function checkoverviewchannels_fcn(checkoverviewchannels ,~)
global buttonoverviewoverchannels
buttonoverviewoverchannels  = checkoverviewchannels.Value;
end


% slider fct for increasing index of image looked at by 1 / switching between
% single cells of Tab 2
function buttonsliderrightfcn(~, slider, ax, p2_feedbackfield, slidernumber)
global slidervalue

if slidervalue +1 > slider.Limits(2)
    
else
    slidervalue = slidervalue + 1;
    slider.Value = slider.Value + 1;
end

SliderValueChanged(slider,  ax, p2_feedbackfield)
slidernumber.Value = slidervalue;
end


% slider fct for decreasing index of image looked at by 1 / switching between
% single cells of Tab 2
function buttonsliderleftfcn(~, slider, ax, p2_feedbackfield, slidernumber)
global slidervalue

if slidervalue - 1 < slider.Limits(1)
    
else
    slidervalue = slidervalue - 1;
    slider.Value = slider.Value - 1;
end

SliderValueChanged(slider,  ax, p2_feedbackfield)
slidernumber.Value = slidervalue;
end


% slider fct for increasing index of image looked at by 1 / switching between
% single cells of Tab 3
function buttonsliderright2fcn(slider2, event, ax2, p3_feedbackfield, tableresults,...
    checkifnottotakeresult, checkifrerun, checkoverviewchannels2, efcellnumbershownandcanbeputin)
global slidervalue2  buttonforcellsviewbeforerunbyexport numberofpixels_finished

if slidervalue2 +1 > slider2.Limits(2)
    
else
    slidervalue2 = slidervalue2 + 1;
    slider2.Value = slider2.Value + 1;
end

if sum(numberofpixels_finished) == 0 && buttonforcellsviewbeforerunbyexport == 0
    p3_feedbackfield.Value = 'Not run through for results yet';
    
else
    
    global buttonifcellrecognitionseveralchannels channelsforcelldetection
    
    SliderValueChanged2(slider2,event,  ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin)
    
end
efcellnumbershownandcanbeputin.Value = slider2.Value;
end


% slider fct for decreasing index of image looked at by 1 / switching between
% single cells of Tab 3
function buttonsliderleft2fcn(slider2, event, ax2, p3_feedbackfield, tableresults,...
    checkifnottotakeresult, checkifrerun, checkoverviewchannels2, efcellnumbershownandcanbeputin)
global slidervalue2 numberofpixels_finished buttonforcellsviewbeforerunbyexport


if slidervalue2 - 1 < slider2.Limits(1)
    
else
    slidervalue2 = slidervalue2 - 1;
    slider2.Value = slider2.Value - 1;
end

if sum(numberofpixels_finished) == 0 && buttonforcellsviewbeforerunbyexport == 0
    p3_feedbackfield.Value = 'Not run through for results yet';
    
else
    
    global buttonifcellrecognitionseveralchannels  channelsforcelldetection
    
    SliderValueChanged2(slider2, event,  ax2, p3_feedbackfield, tableresults,...
        checkifnottotakeresult, checkifrerun, checkoverviewchannels2, ...
        buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin);
    
end
efcellnumbershownandcanbeputin.Value = slider2.Value;
end


% Delete global result variables and other folder specific parameters
% before evaluating next folder
%ResetSettingsButtonFcn(btn, event, tableresults, p3_feedbackfield, ef1, efmaskpathway, maskimport, tmask, tmaskphrase, efmaskphrase, checkboxpathwaytosaveimportmaskfolder, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder
function ResetSettingsButtonFcn(~, ~, ~, p3_feedbackfield, ef1, efmaskpathway, maskimport, tmask, tmaskphrase, efmaskphrase, checkboxpathwaytosaveimportmaskfolder, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, btnpreview, savingparametersofcellimport, nottotakeofcellimport)

global numberofimages dipolmomentnormalized_finished dipolmoment_finished Rnormalized_finished ...
    diameter_maxvecfinished diameter_avvecfinished qnormalized_finished qposvec_finished...
    numberofpixels_finished numberofpixelspos_finished avintensity_finished ...
    names pathwayimport rerunchecked nottotake savingofsettingsofcertaincells ...
    stackstotakeforcertainimagenumber2 stackstotakeforcertainimagenumber ...
    stackstotakeforchannelrerun maskforchannelrerun slidervaluetaken ...
    startpointsphi_finished meanpointsphi_finished lengthpointsphi_finished ...
    histogramvaluesphi_finished distancetonextphi_finished distancetomeanphi_finished ...
    clusterallphi_finished clusterlengthphi_finished allclusterinputphi_finished ...
    clusterpercentphi_finished clusterpercenttoallpixelsposphi_finished ...
    arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished ...
    arrayofclustersphi_finished startpointstheta_finished meanpointstheta_finished ...
    lengthpointstheta_finished histogramvaluestheta_finished distancetonexttheta_finished ...
    distancetomeantheta_finished clusteralltheta_finished clusterlengththeta_finished ...
    allclusterinputtheta_finished  clusterpercenttheta_finished clusterpercenttoallpixelspostheta_finished ...
    arrayofclusterstrengththeta_finished arrayofclustersdistancetheta_finished arrayofclusterstheta_finished ...
    mask_all RposRmean_finished RnegRmean_finished RposRneg_finished intensityvaluetotal_finished ...
    displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
    sumofdistancesqRpos_finished percoverphi_finished countessphi_finished distancetoavvalphi_finished ...
    zaehlerhowlonghowoftenphi_finished endpointsphi_finished percovertheta_finished ...
    countesstheta_finished distancetoavvaltheta_finished zaehlerhowlonghowoftentheta_finished...
    endpointstheta_finished howmuchoveritatallphi_finished howmuchoveritatalltheta_finished ...
    buttonimportsavingparametersofcells slidervalue_before checkifnottotakeresultyes ...
    buttonimportmasksofcells numberofimagesmask namesmask pathwaymaskimport ...
    final_distancestrengthlist_finished    sorted_volumelist_finished sorted_centroidlist_finished ...
    sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
    sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
    sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
    sorted_maxintensitylist_finished ...
    arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished ...
    Pearson_finished buttonimportsavingparametersofcells buttonimportcellnottotake

vars = {'numberofimages', 'dipolmomentnormalized_finished', 'dipolmoment_finished', 'Rnormalized_finished', 'diameter_maxvecfinished', ...
    'diameter_avvecfinished', 'qnormalized_finished', 'qposvec_finished', 'numberofpixels_finished', 'numberofpixelspos_finished', ...
    'avintensity_finished', 'names', 'pathwayimport', 'rerunchecked', 'nottotake', 'savingofsettingsofcertaincells', 'stackstotakeforcertainimagenumber',...
    'stackstotakeforcertainimagenumber2', 'stackstotakeforchannelrerun', 'maskforchannelrerun', 'slidervaluetaken', ...
    'startpointsphi_finished', 'meanpointsphi_finished', 'lengthpointsphi_finished', 'histogramvaluesphi_finished', ...
    'distancetonextphi_finished', 'distancetomeanphi_finished', 'clusterallphi_finished', 'clusterlengthphi_finished', ...
    'allclusterinputphi_finished',  'clusterpercentphi_finished', 'clusterpercenttoallpixelsposphi_finished', ...
    'arrayofclusterstrengthphi_finished', 'arrayofclustersdistancephi_finished', 'arrayofclustersphi_finished', ...
    'startpointstheta_finished', 'meanpointstheta_finished', 'lengthpointstheta_finished', 'histogramvaluestheta_finished', ...
    'distancetonexttheta_finished', 'distancetomeantheta_finished', 'clusteralltheta_finished', 'clusterlengththeta_finished', ...
    'allclusterinputtheta_finished',  'clusterpercenttheta_finished', 'clusterpercenttoallpixelspostheta_finished', ...
    'arrayofclusterstrengththeta_finished', 'arrayofclustersdistancetheta_finished', 'arrayofclusterstheta_finished', ...
    'mask_all', 'RposRmean_finished', 'RnegRmean_finished', 'RposRneg_finished', 'intensityvaluetotal_finished', ...
    'displacementRposRnegMRposMRneg_finished', 'displacementDipoleMomentfromMiddle_finished', 'sumofdistancesqRpos_finished', ...
    'percoverphi_finished', 'countessphi_finished', 'distancetoavvalphi_finished', 'zaehlerhowlonghowoftenphi_finished', ...
    'endpointsphi_finished', 'percovertheta_finished', 'countesstheta_finished', 'distancetoavvaltheta_finished', ...
    'zaehlerhowlonghowoftentheta_finished', 'endpointstheta_finished', 'howmuchoveritatallphi_finished', ...
    'howmuchoveritatalltheta_finished', 'buttonimportsavingparametersofcells', 'slidervalue_before',  ...
    'numberofimagesmask', 'namesmask', 'pathwaymaskimport' ...
    'final_distancestrengthlist_finished',    'sorted_volumelist_finished', 'sorted_centroidlist_finished', ...
    'sorted_equivdiameterlist_finished',  'sorted_voxellistlist_finished', ...
    'sorted_surfacearealist_finished',  'sorted_voxelvalueslist_finished', ...
    'sorted_weightedcentroidlist_finished',  'sorted_meanintensitylist_finished', ...
    'sorted_maxintensitylist_finished', 'arrayfixed4distancelist_finished', 'arrayfixed5strengthlist_finished', 'sorted_array_tofilldistancelist_finished', 'sorted_array_tofillstrengthlist_finished', ...
    'Pearson_finished'};


clear('global', vars{:});

global slidervalue slidervalue2

slidervalue = 1;
slidervalue2 = 1;
checkifnottotakeresultyes  = 0;
buttonimportsavingparametersofcells = 0;
tableresults = zeros(3,3);

updateresultstable(tableresults, slidervalue2, p3_feedbackfield)
ef1.Value = '';
efmaskpathway.Value = '';

maskimport.Value = 0;
buttonimportmasksofcells = 0;
tmask.Enable = 'off';
tmaskphrase.Enable = 'off';

efmaskpathway.Enable = 'off';
efmaskpathway.Editable = 'off';
efmaskphrase.Enable = 'off';
efmaskphrase.Editable = 'off';

checkboxpathwaytosaveimportmaskfolder.Value = 0;
checkboxpathwaytodatafolder.Value = 0;
checkboxpathwaytosaveimagesfolder.Value = 0;
checkboxpathwaytosavedatafolder.Value = 0;
savingparametersofcellimport.Value = 0;
nottotakeofcellimport.Value = 0;

buttonimportsavingparametersofcells = 0;
buttonimportcellnottotake =0;

btnpreview.Enable = 'on';

end


% exclusion of channel (just possible for option with run-through before
% checking cell detection)
function checkifnottakesinglechannel_fcn(checkifnottakesinglechannel, ~, tableresults, singlechannelnottotakeValue,  slider2Value, p3_feedbackfield )
global  buttonforcellsviewbeforerunbyexport buttonforallparameters dipolmoment_finished ...
    qposvec_finished numberofpixelspos_finished avintensity_finished RposRmean_finished ...
    RnegRmean_finished RposRneg_finished intensityvaluetotal_finished buttonallnormalizations

if buttonforcellsviewbeforerunbyexport == 0
    
    % dipolmomentnormalized11_finished
    %
    
    if buttonallnormalizations == 1
        global dipolmomentnormalized11_finished dipolmomentnormalized21_finished ...
            dipolmomentnormalized12_finished dipolmomentnormalized22_finished ...
            dipolmomentnormalized13_finished dipolmomentnormalized23_finished ...
            dipolmomentnormalized14_finished dipolmomentnormalized24_finished ...
            dipolmomentnormalized15_finished dipolmomentnormalized25_finished ...
            dipolmomentnormalized16_finished dipolmomentnormalized26_finished ...
            Rnormalized1_finished Rnormalized2_finished ...
            qnormalized1_finished qnormalized2_finished qnormalized3_finished ...
            qnormalized4_finished qnormalized5_finished qnormalized6_finished
        
        
        dipolmomentnormalized11_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized21_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized12_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized22_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized13_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized23_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized14_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized24_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized15_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized25_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized16_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        dipolmomentnormalized26_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        
        Rnormalized1_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        Rnormalized2_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized1_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized2_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized3_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized4_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized5_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized6_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        
    else
        
        global dipolmomentnormalized_finished Rnormalized_finished  qnormalized_finished
        
        
        dipolmomentnormalized_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        Rnormalized_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        qnormalized_finished(slider2Value, singlechannelnottotakeValue) = NaN;
    end
    
    dipolmoment_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
    
    qposvec_finished(slider2Value, singlechannelnottotakeValue) = NaN;
    numberofpixelspos_finished(slider2Value, singlechannelnottotakeValue) = NaN;
    avintensity_finished(slider2Value, singlechannelnottotakeValue) = NaN;
    RposRmean_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
    RnegRmean_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
    RposRneg_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
    intensityvaluetotal_finished(slider2Value, singlechannelnottotakeValue) = NaN;
    
    
    if buttonforallparameters == 1
        
        global displacementRposRnegMRposMRneg_finished displacementDipoleMomentfromMiddle_finished ...
            sumofdistancesqRpos_finished percoverphi_finished countessphi_finished ...
            distancetoavvalphi_finished percovertheta_finished countesstheta_finished ...
            distancetoavvaltheta_finished histogramvaluesphi_finished allclusterinputphi_finished ...
            arrayofclusterstrengthphi_finished arrayofclustersdistancephi_finished ...
            histogramvaluestheta_finished allclusterinputtheta_finished arrayofclusterstrengththeta_finished ...
            arrayofclustersdistancetheta_finished zaehlerhowlonghowoftenphi_finished ...
            endpointsphi_finished zaehlerhowlonghowoftentheta_finished endpointstheta_finished ...
            howmuchoveritatallphi_finished howmuchoveritatalltheta_finished startpointsphi_finished ...
            meanpointsphi_finished lengthpointsphi_finished distancetonextphi_finished ...
            distancetomeanphi_finished clusterallphi_finished clusterlengthphi_finished ...
            clusterpercentphi_finished arrayofclustersphi_finished startpointstheta_finished ...
            meanpointstheta_finished lengthpointstheta_finished distancetonexttheta_finished ...
            distancetomeantheta_finished clusteralltheta_finished clusterlengththeta_finished ...
            clusterpercenttheta_finished arrayofclusterstheta_finished ...
            clusterpercenttoallpixelspostheta_finished clusterpercenttoallpixelsposphi_finished ...
            final_distancestrengthlist_finished sorted_volumelist_finished sorted_centroidlist_finished ...
            sorted_equivdiameterlist_finished  sorted_voxellistlist_finished ...
            sorted_surfacearealist_finished  sorted_voxelvalueslist_finished ...
            sorted_weightedcentroidlist_finished  sorted_meanintensitylist_finished ...
            sorted_maxintensitylist_finished  ...
            arrayfixed4distancelist_finished arrayfixed5strengthlist_finished sorted_array_tofilldistancelist_finished sorted_array_tofillstrengthlist_finished
        
        displacementRposRnegMRposMRneg_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        displacementDipoleMomentfromMiddle_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        sumofdistancesqRpos_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        percoverphi_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        countessphi_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        distancetoavvalphi_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        
        percovertheta_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        countesstheta_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        distancetoavvaltheta_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        
        histogramvaluesphi_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        allclusterinputphi_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        
        arrayofclusterstrengthphi_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        arrayofclustersdistancephi_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        
        histogramvaluestheta_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        allclusterinputtheta_finished(singlechannelnottotakeValue, slider2Value) = NaN;
        
        arrayofclusterstrengththeta_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        arrayofclustersdistancetheta_finished(slider2Value, singlechannelnottotakeValue, :) = NaN;
        
        zaehlerhowlonghowoftenphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        endpointsphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        zaehlerhowlonghowoftentheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        endpointstheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        howmuchoveritatallphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        howmuchoveritatalltheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        startpointsphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        meanpointsphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        lengthpointsphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        distancetonextphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        distancetomeanphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterallphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterlengthphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterpercentphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        arrayofclustersphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        startpointstheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        meanpointstheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        lengthpointstheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        distancetonexttheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        distancetomeantheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusteralltheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterlengththeta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterpercenttheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        arrayofclusterstheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        clusterpercenttoallpixelspostheta_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        clusterpercenttoallpixelsposphi_finished{singlechannelnottotakeValue,slider2Value} = NaN;
        
        final_distancestrengthlist_finished(slider2Value, singlechannelnottotakeValue) = NaN;
        sorted_volumelist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_centroidlist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_equivdiameterlist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_voxellistlist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_surfacearealist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_voxelvalueslist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_weightedcentroidlist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_meanintensitylist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_maxintensitylist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        
        arrayfixed4distancelist_finished(slider2Value, singlechannelnottotakeValue,:) = NaN;
        arrayfixed5strengthlist_finished(slider2Value, singlechannelnottotakeValue,:) = NaN;
        sorted_array_tofilldistancelist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        sorted_array_tofillstrengthlist_finished{slider2Value, singlechannelnottotakeValue} = NaN;
        
    end
    
    updateresultstable(tableresults, slider2Value, p3_feedbackfield)
    checkifnottakesinglechannel.Value = 0;
    
else
    
    p3_feedbackfield.Value = 'Not possible for chosen option (checking cell detection before run-through)';
    
end

end





% fct for updating buttonpreview value
function checkifpearsonfcn(checkifpearson, event)
global buttonPearson
buttonPearson = checkifpearson.Value;
end


% function: layers normalization of intensity according to average value
function checkifownmaskfcn3(checkifownmask3, ~, checkifownmask4)
global buttoneachcellnormalizedtoaveragevalue1 buttoneachcellchargenormalizedcorrespondingtototalvalue1
buttoneachcellnormalizedtoaveragevalue1 = checkifownmask3.Value;

if buttoneachcellnormalizedtoaveragevalue1
    checkifownmask4.Value = 0;
    buttoneachcellchargenormalizedcorrespondingtototalvalue1 = 0;
else
end

end

% function: layers normalization of intensity according to total value
function checkifownmaskfcn4(checkifownmask4, ~, checkifownmask3)
global buttoneachcellchargenormalizedcorrespondingtototalvalue1 buttoneachcellnormalizedtoaveragevalue1
buttoneachcellchargenormalizedcorrespondingtototalvalue1  = checkifownmask4.Value;

if buttoneachcellchargenormalizedcorrespondingtototalvalue1
    checkifownmask3.Value = 0;
    buttoneachcellnormalizedtoaveragevalue1 = 0;
else
end

end



% export all parameters if checked, if not checked: essential paramters
% exported
function allparametersoption_fct(allparametersoption, ~)
global buttonforallparameters
buttonforallparameters = allparametersoption.Value;
end


% algorithm order change: check cell detection before run-through (then
% done by export button) to become time-friendly for user (no need to wait
% for recalculating values to update table).
function viewandexportoption_fct(viewandexportoption, ~)
global buttonforcellsviewbeforerunbyexport
buttonforcellsviewbeforerunbyexport = viewandexportoption.Value;
end


% import of parameters of cell detection from previous run
function savingparametersofcellimport_fct(savingparametersofcellimport, ~, p1_feedbackfield)
global savingofsettingsofcertaincells numberofimages buttonimportsavingparametersofcells thresholdnumpixelsforrangefiltmaximum


if savingparametersofcellimport.Value
    
    b = savingofsettingsofcertaincells;
    
    savingofsettingsofcertaincellstest = uiimport;
    
    savingofsettingsofcertaincells = savingofsettingsofcertaincellstest.savingofsettingsofcertaincells;
    
    
    
    if ~isempty(savingofsettingsofcertaincells)
        if length(savingofsettingsofcertaincells) == numberofimages && sum(cellfun(@length, savingofsettingsofcertaincells)  == ones(numberofimages, 1) *27) == numberofimages
            
            if isequal(b, savingofsettingsofcertaincells)
                p1_feedbackfield.Value = 'Accepted: Expected saved parameters size for number of images. Identical to previous parameters.';
            else
                p1_feedbackfield.Value = 'Accepted: Expected saved parameters size for number of images. Not identical to previous parameters.';
            end
            buttonimportsavingparametersofcells = 1;
            
        else
            
            
            if length(savingofsettingsofcertaincells) == numberofimages && sum(cellfun(@length, savingofsettingsofcertaincells)  == ones(numberofimages, 1) *26) == numberofimages
                
                buttonimportsavingparametersofcells = 1;
                
                
                savingofsettingsofcertaincells2 = cell(numberofimages,1);
                
                for i = 1:numberofimages
                    [channeltoshowval,buttonforcomparison,  buttonforjuststructure,  frontierthrshK1,frontierthrshK2 ,anpassungotsuthreshK1 , anpassungotsuthreshK2 , anpassungotsuthreshK3, frontier3,...
                        anpassungotsuthreshKsubtr,thresholdnumpixelsforrangefilt,  anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, ...
                        maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer , minnumberpixelstodetectforcell,maxnumpixelwholecell,buttonifconfocal] = savingofsettingsofcertaincells{i}{1:26};
                    savingofsettingsofcertaincells2{i} = {channeltoshowval,buttonforcomparison,  buttonforjuststructure,  frontierthrshK1,frontierthrshK2 ,anpassungotsuthreshK1 , anpassungotsuthreshK2 , anpassungotsuthreshK3, frontier3,...
                        anpassungotsuthreshKsubtr,thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint, anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, ...
                        maxnumofimagescell, minnumofimagescell, maxpixnumlayer, minpixnumlayer , minnumberpixelstodetectforcell,maxnumpixelwholecell,buttonifconfocal};
                end
                savingofsettingsofcertaincells = savingofsettingsofcertaincells2;
                
            else
                p1_feedbackfield.Value = 'Not accepted: Not expected saved parameters size for number of images. General hint: Please first put pathway to images before loading saved paramters.';
                savingofsettingsofcertaincells = [];
                buttonimportsavingparametersofcells = 0;
                savingparametersofcellimport.Value = 0;
                % savingofsettingsofcertaincells
            end
        end
    else
        savingparametersofcellimport.Value = 0;
    end
    
else
    
    savingofsettingsofcertaincells = [];
    
end

end




function nottotakeofcellimport_fct(nottotakeofcellimport, event, p1_feedbackfield)
global  numberofimages buttonimportcellnottotake nottotake


if nottotakeofcellimport.Value
    
    b = nottotake;
    
    nottotaketest = uiimport;
    cellindexnottotake = nottotaketest.index;
    
    nottotake = zeros(numberofimages,1);
    nottotake(cellindexnottotake) = 1;
    
    
    if ~isempty(nottotake)
        if sum(nottotake) ~= 0
            
            
            p1_feedbackfield.Value = 'Parameter defining cell numbers to be left out of analysis accepted.';
            buttonimportcellnottotake = 1;
            
        else
            
            p1_feedbackfield.Value = 'Not accepted: No cell index defining cells to be left out found. General hint: Please first put pathway to tif images before loading saved paramters.';
            nottotake = [];
            buttonimportcellnottotake = 0;
            nottotakeofcellimport.Value = 0;
            
        end
        
    else
        nottotakeofcellimport.Value = 0;
    end
    
else
    
    nottotake = [];
    
end

end



% fct to get pathway to tiff data folder
function checkboxpathwaytodatafolderfcn(checkboxpathwaytodatafolder, pathwaytodatafolder, slider, ax, p2_feedbackfield, tableresults, p3_feedbackfield, p1_feedbackfield)
global phrasetofind numberofimages names pathwayimport whichchannelforcelldetect channeltoshowval allchannelnames
if checkboxpathwaytodatafolder.Value
    
    pathwayimport = uigetdir;
    pathwaytodatafolder.Value = string(pathwayimport);
    % pathwayimport
    files = dir(string(pathwayimport));
    
    names = {files.name};
    
    count = 1;
    addit = zeros(1,1);
    numberofnames = size(names,2);
    
    for zaehler_names = 1:numberofnames
        
        % as for pathway . / .. / ..., ... are involved as well, these ones need to be deleted
        if strfind(names{zaehler_names}, phrasetofind)
            
        else
            addit(count) = zaehler_names;
            count = count + 1;
        end
    end
    
    try names(addit) = [];
        clear count
        
        numberofimages = size(names,2);
        slider.Limits = [1 numberofimages];
        
        if length(slider.Limits(1):1:slider.Limits(2)) < 10
            
            slider.MajorTicks = slider.Limits(1):1:slider.Limits(2);
            slider.MinorTicks = [];
            
        end
        
        if (10 < length(slider.Limits(1):1:slider.Limits(2))) &&  ( length(slider.Limits(1):1:slider.Limits(2))< 100)
            
            slider.MajorTicks = slider.Limits(1):10:slider.Limits(2);
            slider.MinorTicks = slider.Limits(1):1:slider.Limits(2);
            
        end
        
        if length(slider.Limits(1):1:slider.Limits(2)) > 100
            
            slider.MajorTicks = slider.Limits(1):100:slider.Limits(2);
            slider.MinorTicks = slider.Limits(1):10:slider.Limits(2);
            
        end
        
        
        if ~isempty(allchannelnames)
            
            path = strcat(pathwayimport,'\', names{slider.Value});
            
            if isempty(whichchannelforcelldetect)
                
                whichchannelforcelldetect = 1;
                
            end
            
            if isempty(channeltoshowval) || channeltoshowval == 0
                
                channeltoshowval = 1;
                
            end
            
            b = imfinfo(path);
            stacknum = numel(b);
            
            count = 1;
            M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
            for k = channeltoshowval:length(allchannelnames):stacknum
                
                M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
                
            end
            
            montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax)
            
            try   title(allchannelnames(channeltoshowval), 'Parent', ax , 'FontWeight', 'bold', 'FontSize', 20)
                
            catch
                
            end
        end
        
        slidervalue2 = 1;
        updateresultstable(tableresults, slidervalue2, p3_feedbackfield);
        
    catch
        
        p1_feedbackfield.Value = 'Pathway for import seems to be empty or incorrect';
        p2_feedbackfield.Value = 'Pathway for import seems to be empty or incorrect';
        p3_feedbackfield.Value = 'Pathway for import seems to be empty or incorrect';
    end
    
    checkboxpathwaytodatafolder.Value = 0;
end

end


% fct to get pathway to save images
function checkboxpathwaytosaveimagesfcn(checkboxpathwaytosaveimages, ef2)
global pathwayexportimages

if checkboxpathwaytosaveimages.Value == 1
    
    pathwayexportimages = uigetdir;
    ef2.Value = string(pathwayexportimages);
    checkboxpathwaytosaveimages.Value =0;
end

end


% fct to get patwhay to save data
function checkboxpathwaytosavedatafcn(checkboxpathwaytosavedata, ef3)
global pathwayexportdata

if checkboxpathwaytosavedata.Value == 1
    
    pathwayexportdata = uigetdir;
    ef3.Value = string(pathwayexportdata);
    checkboxpathwaytosavedata.Value = 0;
end

end


% fct for rerun by masks: check
function maskimport_fct(maskimport, event, tmask, efmaskpathway, tmaskphrase, efmaskphrase, p1_feedbackfield, checkboxpathwaytosaveimportmaskfolder)
global buttonimportmasksofcells
buttonimportmasksofcells = maskimport.Value;

if buttonimportmasksofcells == 0
    tmask.Enable = 'off';
    tmaskphrase.Enable = 'off';
    
    efmaskpathway.Enable = 'off';
    efmaskpathway.Editable = 'off';
    efmaskphrase.Enable = 'off';
    efmaskphrase.Editable = 'off';
    checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
    
    
else
    tmask.Enable = 'on';
    tmaskphrase.Enable = 'on';
    
    efmaskpathway.Enable = 'on';
    efmaskpathway.Editable = 'on';
    efmaskphrase.Enable = 'on';
    efmaskphrase.Editable = 'on';
    checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
    
    
end

end


% fct for rerun by masks: pathway
function pathwaytoimportmask(efmaskpathway, maskimport, p1_feedbackfield)
global maskimportphrasetofind pathwayimport numberofimagesmask numberofimages ...
    namesmask names pathwaymaskimport buttonimportmasksofcells

if ~isempty(buttonimportmasksofcells)
    pathwaymaskimport = string(efmaskpathway.Value);
    files = dir(pathwaymaskimport);
    
    namesmask = {files.name};
    
    
    
    count = 1;
    addit = zeros(1,1);
    numberofnames = size(namesmask,2);
    
    
    for zaehler_names = 1:numberofnames
        
        % as for pathway . / .. / ..., ... are involved as well, these ones need to be deleted
        if strfind(namesmask{zaehler_names}, maskimportphrasetofind)
            
        else
            addit(count) = zaehler_names;
            count = count + 1;
        end
    end
    
    
    
    namesmask(addit) = [];
    clear count
    if isempty(namesmask)
        p1_feedbackfield.Value = 'No valid image with phrase found';
    else
        
        numberofimagesmask = size(namesmask,2);
        
        if numberofimagesmask == numberofimages
            txt = 'Number of masks and number of images on import pathways are the same.';
            p1_feedbackfield.Value = txt;
            
            
            count_stacknumid = 0;
            count_stacknumnotid = 0;
            count_heightwithid = 0;
            count_heightwithnotid = 0;
            
            global allchannelnames
            if isempty(allchannelnames)
                lengthofchannels = 1;
            else
                lengthofchannels = length(allchannelnames);
            end
            for value = 1:numberofimages
                path1 = strcat(pathwayimport,'\', names{value});
                path2 = strcat(pathwaymaskimport, '\', namesmask{value});
                
                b1 = imfinfo(path1);
                stacknum1 = numel(b1);
                
                b2 = imfinfo(path2);
                stacknum2 = numel(b2).* lengthofchannels;
                
                if stacknum1 == stacknum2
                    
                    count_stacknumid = count_stacknumid + 1;
                    
                    if b1(1).Height == b2(1).Height && b1(1).Width == b2(1).Width
                        
                        count_heightwithid = count_heightwithid + 1;
                        
                    else
                        
                        count_heightwithnotid = count_heightwithnotid + 1;
                        
                        
                    end
                    
                    
                else
                    
                    count_stacknumnotid = count_stacknumnotid + 1;
                    
                end
                
            end
            
            
            if count_stacknumid == numberofimages
                txt = [txt, '\n', ['Number of z layer is the same: ',num2str(stacknum1)]];
                p1_feedbackfield.Value  = splitlines(compose(txt));
            end
            
            if count_stacknumnotid > 0
                
                txt = [txt, '\n', [num2str(count_stacknumnotid),' of', num2str(numberofimages), ' times the number of z layer is not the same: for last image data ',num2str(stacknum1), 'and for last mask data ', num2str(stacknum2)]];
                p1_feedbackfield.Value  = splitlines(compose(txt));
                
            end
            
            if count_heightwithid == numberofimages
                txt = [txt, '\n', 'Mask image with corresponding data image: same height and width'];
                p1_feedbackfield.Value =   splitlines(compose(txt));
            end
            
            if  count_heightwithnotid > 0
                txt = [txt, '\n', ['Mask image with corresponding data image: not same height and width for ', num2str(count_heightwithnotid), ' cases']];
                p1_feedbackfield.Value  = splitlines(compose(txt));
            end
            
            
            
        else
            txt = ['Number of masks and number of images on import pathways are not the same.', '\n', 'Please make sure that data image pathway was taken as input before mask image pathway.'];
            p1_feedbackfield.Value  = splitlines(compose(txt));
            efmaskpathway.Value = '';
            pathwaymaskimport = [];
            buttonimportmasksofcells = 0;
            maskimport.Value = 0;
        end
    end
    
    
end

end


% fct for rerun by masks: pathway via checkbox
function checkboxpathwaytosaveimportmaskfolderfcn(checkboxpathwaytosaveimportmaskfolder, efmaskpathway, maskimport, p1_feedbackfield)
global maskimportphrasetofind pathwayimport numberofimagesmask numberofimages ...
    namesmask names pathwaymaskimport buttonimportmasksofcells

if checkboxpathwaytosaveimportmaskfolder.Value
    pathwaymaskimport = uigetdir;
    efmaskpathway.Value = string(pathwaymaskimport);
    
    
    if ~isempty(buttonimportmasksofcells) && buttonimportmasksofcells == 1
        pathwaymaskimport = efmaskpathway.Value;
        files = dir(pathwaymaskimport);
        
        namesmask = {files.name};
        
        
        count = 1;
        addit = zeros(1,1);
        numberofnames = size(namesmask,2);
        
        
        for zaehler_names = 1:numberofnames
            
            % as for pathway . / .. / ..., ... are involved as well, these ones need to be deleted
            if strfind(namesmask{zaehler_names}, maskimportphrasetofind)
                
            else
                addit(count) = zaehler_names;
                count = count + 1;
            end
        end
        
        
        namesmask(addit) = [];
        clear count
        
        if isempty(namesmask)
            p1_feedbackfield.Value = 'No valid image with phrase found';
        else
            
            
            numberofimagesmask = size(names,2);
            
            if numberofimagesmask == numberofimages
                txt = 'Number of masks and number of images on import pathways are the same.';
                p1_feedbackfield.Value = txt;
                
                
                count_stacknumid = 0;
                count_stacknumnotid = 0;
                count_heightwithid = 0;
                count_heightwithnotid = 0;
                
                
                global allchannelnames
                if isempty(allchannelnames)
                    lengthofchannels = 1;
                else
                    lengthofchannels = length(allchannelnames);
                end
                for value = 1:numberofimages
                    
                    path1 = strcat(pathwayimport,'\', names{value});
                    path2 = strcat(pathwaymaskimport, '\', namesmask{value});
                    
                    
                    b1 = imfinfo(path1);
                    stacknum1 = numel(b1);
                    
                    b2 = imfinfo(path2);
                    stacknum2 = numel(b2).* lengthofchannels;
                    
                    if stacknum1 == stacknum2
                        
                        count_stacknumid = count_stacknumid + 1;
                        
                        
                        
                        if b1(1).Height == b2(1).Height && b1(1).Width == b2(1).Width
                            
                            
                            
                            count_heightwithid = count_heightwithid + 1;
                            
                            
                            
                        else
                            
                            count_heightwithnotid = count_heightwithnotid + 1;
                            
                            
                        end
                        
                        
                    else
                        
                        count_stacknumnotid = count_stacknumnotid + 1;
                        
                    end
                    
                    
                end
                
                
                if count_stacknumid == numberofimages
                    txt = [txt, '\n', ['Number of z layer is the same: ',num2str(stacknum1)]];
                    
                end
                
                if count_stacknumnotid > 0
                    txt = [txt, '\n', num2str(count_stacknumnotid),' of', num2str(numberofimages), ' times the number of z layer is not the same: for last image data ',num2str(stacknum1), 'and for last mask data ', num2str(stacknum2)];
                    
                end
                
                if count_heightwithid == numberofimages
                    txt = [txt, '\n', 'Mask image with corresponding data image: same height and width'];
                    
                end
                
                if  count_heightwithnotid > 0
                    txt = [txt, '\n', ['Mask image with corresponding data image: not same height and width for ', num2str(count_heightwithnotid), ' cases']];
                    
                end
                
                uebergang = splitlines(compose(txt));
                if isempty(uebergang{1})  &&  length(uebergang)>=2
                    p1_feedbackfield.Value =   splitlines(compose(txt(3:end)));
                else
                    p1_feedbackfield.Value =  splitlines(compose(txt));
                end
                
                
            else
                txt = ['Number of masks and number of images on import pathways are not the same.', '\n', 'Please make sure that data image pathway was taken as input before mask image pathway.'];
                p1_feedbackfield.Value = splitlines(compose(txt));
                
                pathwaymaskimport = [];
                buttonimportmasksofcells = 0;
                maskimport.Value = 0;
                
            end
            
        end
        
        
    end
    checkboxpathwaytosaveimportmaskfolder.Value = 0;
end

end


% fct to run through folder of mask searching for phrase
function phraserunthroughfoldersmask(efmaskphrase, event)
global maskimportphrasetofind
maskimportphrasetofind = string(efmaskphrase.Value);
end



% fct for view of all parameter settings checkbox
function checkbox_allatonceparametersfcn(checkbox_allatonceparameters, paneltohideimportexport, ...
    paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption, paneltohidedatasetrerunoptions,...
    buttonsliderlefthidepanels, buttonsliderrighthidepanels, ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal,...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport,nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
    axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings,...
    axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, axes_paneltohidedatasetrerunoptions, ...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6, description_resetsettingsafterdone)
global allatonce_parameters sliderhidepanelsvalue decisionviewoption decisionimageoption
allatonce_parameters = checkbox_allatonceparameters.Value;
global  image_panelimportexport image_panelchannel image_paneltohidemeasurementsettings ...
    image_paneltohidedetectionoption image_paneltohideanalysisoption image_paneltohidedatasetrerunoptions


if allatonce_parameters
    
    paneltohideimportexport.Visible = 'off';
    paneltohidechannel.Visible = 'off';
    paneltohidemeasurementsettings.Visible = 'off';
    paneltohidedetectionoption.Visible = 'off';
    paneltohideanalysisoption.Visible = 'off';
    paneltohidedatasetrerunoptions.Visible = 'off';
    buttonsliderlefthidepanels.Enable = 'off';
    buttonsliderlefthidepanels.Visible = 'off';
    buttonsliderrighthidepanels.Enable = 'off';
    buttonsliderrighthidepanels.Visible = 'off';
    image_panelimportexport.Visible = 'off';
    image_panelchannel.Visible = 'off';
    image_paneltohidemeasurementsettings.Visible = 'off';
    image_paneltohidedetectionoption.Visible = 'off';
    image_paneltohideanalysisoption.Visible = 'off';
    image_paneltohidedatasetrerunoptions.Visible = 'off';
    
    
    % import/export panel
    
    describ1.Enable = 'on';
    describ1b.Enable = 'on';
    t1.Enable = 'on';
    t1b.Enable = 'on';
    describ2.Enable = 'on';
    describ1export.Enable = 'on';
    t2.Enable = 'on';
    ef2.Enable = 'on';
    t3.Enable = 'on';
    ef3.Enable = 'on';
    ef1b.Enable = 'on';
    ef1c.Enable = 'on';
    resetsettingsafterdone.Enable = 'on';
    loadsettings.Enable = 'on';
    ef1.Enable = 'on';
    checkboxpathwaytodatafolder.Enable = 'on';
    checkboxpathwaytosaveimagesfolder.Enable = 'on';
    checkboxpathwaytosavedatafolder.Enable = 'on';
    description_resetsettingsafterdone.Enable = 'on';
    
    % channel panel:
    
    describ3.Enable = 'on';
    describ4.Enable = 'on';
    t4.Enable = 'on';
    describ4b.Enable = 'on';
    ef4b.Enable = 'on';
    ef4.Enable = 'on';
    
    
    %measurement panel
    
    describpix.Enable = 'on';
    describ1settingpix.Enable = 'on';
    t1ca.Enable = 'on';
    efpixx.Enable = 'on';
    t1cb.Enable = 'on';
    efpixy.Enable = 'on';
    t1cc.Enable = 'on';
    efpixz.Enable = 'on';
    describ_bit14.Enable = 'on';
    
    %detection panel
    
    checkifconfocal.Enable = 'on';
    describconfocal.Enable = 'on';
    describ1confocal.Enable = 'on';
    
    %analysis panel
    
    describoptionpar.Enable = 'on';
    describ1analysis.Enable = 'on';
    allparametersoption.Enable = 'on';
    viewandexportoption.Enable = 'on';
    
    
    %rerun panel
    
    describoptionalsheading.Enable = 'on';
    describoptionals.Enable = 'on';
    describ4c.Enable = 'on';
    savingparametersofcellimport.Enable = 'on';
    nottotakeofcellimport.Enable = 'on';
    describ4mask.Enable = 'on';
    
    maskimport.Enable = 'on';
    maskimport.Value
    global buttonimportmasksofcells
    buttonimportmasksofcells
    
    if maskimport.Value == 1
        tmask.Enable = 'on';
        efmaskpathway.Enable = 'on';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
        tmaskphrase.Enable = 'on';
        efmaskphrase.Enable = 'on';
        
    end
    
    if maskimport.Value == 0
        tmask.Enable = 'off';
        efmaskpathway.Enable = 'off';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
        tmaskphrase.Enable = 'off';
        efmaskphrase.Enable = 'off';
        
        
    end
    
    
    
    
else
    
    sliderhidepanelsvalue = 0;
    
    % introduce colors of lab logo
    R = 0;
    G = 158 / 255;
    B = 224 / 255;
    geigerlabblue = [R G B];
    
    geigerlabwhite = [1 1 1];
    
    R = 187 / 255;
    G = 51 / 255;
    B = 108 / 255;
    geigerlabpink = [R G B];
    
    
    R = 77 / 255;
    G = 77 / 255;
    B = 77 / 255;
    geigerlabdarkgrey = [R G B];
    
    R = 123 / 255;
    G = 137 / 255;
    B = 159 / 255;
    bluishgreymid = [R G B];
    
    R = 173 / 255;
    G = 187 / 255;
    B = 209 / 255;
    bluishgrey = [R G B];
    
    R = 44 / 255;
    G = 112 / 255;
    B = 141 / 255;
    darkbluishgrey = [R G B];
    
    
    
    
    
    
    if decisionviewoption == 1
        
        
        if decisionimageoption == 1
            % images
            
            describpanel_1.BackgroundColor = [1.0 1.0 1.0];
            describpanel_1.FontColor = geigerlabpink;
            
            
            
            
            describpanel_2.BackgroundColor = [1.0 1.0 1.0];
            describpanel_2.FontColor = hiddenpanelcolor2;
            
            describpanel_3.BackgroundColor = [0 0 0];
            describpanel_3.FontColor = hiddenpanelcolor3;
            
            
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = hiddenpanelcolor4;
            
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = hiddenpanelcolor5;
            
            
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = hiddenpanelcolor6;
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor1;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor2;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor3;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor5;
            
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor6;
            
            axes_panelimportexport.Position =   [-60 -85 650*1.2 550*1.2];
            image_panelimportexport = imshow('panel_importexporttrial.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            
            
            axes_panelchannel.Position = [-80 -80 615*1.3 320*1.3];
            image_panelchannel = imshow('channelpanelb800dpitest.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidemeasurementsettings.Position = [-35 -45 250*1.2 280*1.2];
            image_paneltohidemeasurementsettings = imshow('panel_measurementsettings.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltest.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohideanalysisoption.Position = [-25 -35 250*1.3 180*1.3];
            image_paneltohideanalysisoption = imshow('panel_analysisoptionb.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedatasetrerunoptions.Position = [-25 -35 660*1.1 450*1.1];
            image_paneltohidedatasetrerunoptions = imshow('panel_rerun.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
        end
        
        
        
        
        
        
        if decisionimageoption == 2
            % images written
            
            
            describpanel_1.BackgroundColor = [1.0 1.0 1.0];
            describpanel_1.FontColor = geigerlabpink;
            
            
            
            
            describpanel_2.BackgroundColor = [1.0 1.0 1.0];
            describpanel_2.FontColor = hiddenpanelcolor2;
            
            describpanel_3.BackgroundColor = [0 0 0];
            describpanel_3.FontColor = hiddenpanelcolor3;
            
            
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = hiddenpanelcolor4;
            
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = hiddenpanelcolor5;
            
            
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = hiddenpanelcolor6;
            
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor1;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor2;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor3;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor5;
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor6;
            
            
            
            axes_panelimportexport.Position = [-60 -20 650*1.05 550*1.05];
            image_panelimportexport = imshow('importpanel_testwritten.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            
            
            
            axes_panelchannel.Position = [-80 -85 615*1.3 320*1.3];
            image_panelchannel = imshow('channelpanelb800dpitestwritten.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            
            
            
            axes_paneltohidemeasurementsettings.Position = [-35 -45 250*1.2 280*1.2];
            image_paneltohidemeasurementsettings = imshow('panel_measurementsettingswritten.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal,...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltestwritten.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohideanalysisoption.Position = [-25 -35 250*1.3 180*1.3];
            image_paneltohideanalysisoption = imshow('panel_analysisoptionb.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidedatasetrerunoptions.Position = [-25 -35 660*1.2 450*1.2];
            image_paneltohidedatasetrerunoptions = imshow('panel_rerunwritten.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
        end
        
        if decisionimageoption == 3
            % icons
        end
        
        if decisionimageoption == 4
            % logo water print
            
            
            
            
            describpanel_1.BackgroundColor =geigerlabwhite;
            describpanel_1.FontColor = geigerlabblue;
            
            
            
            
            describpanel_2.BackgroundColor = geigerlabwhite;
            describpanel_2.FontColor = geigerlabblue;
            
            describpanel_3.BackgroundColor = geigerlabwhite;
            describpanel_3.FontColor = geigerlabblue;
            
            
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = geigerlabblue;
            
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = geigerlabblue;
            
            
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = geigerlabblue;
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor4;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedatasetrerunoptions.BackgroundColor = hiddenpanelcolor4;
            
            
            
            axes_panelimportexport.Position =   [-80 -85 650*1.2 550*1.2];
            image_panelimportexport = imshow('importpanel_testwatermark2.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            axes_panelchannel.Position = [-400 -220 615*2.3 320*2.3];
            image_panelchannel = imshow('importpanel_testwatermark2.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidemeasurementsettings.Position = [-100 -105 250*1.7 280*1.7];
            image_paneltohidemeasurementsettings = imshow('importpanel_testwatermark2.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltestwatermark.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohideanalysisoption.Position = [-63 -72 250*1.67 180*1.67];
            image_paneltohideanalysisoption = imshow('confocalpaneltestwatermark.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedatasetrerunoptions.Position = [-165 -145 660*1.5 450*1.5];
            image_paneltohidedatasetrerunoptions = imshow('importpanel_testwatermark2.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
        end
        
        
        
        
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        buttonsliderlefthidepanels.Enable = 'on';
        buttonsliderlefthidepanels.Visible = 'on';
        buttonsliderrighthidepanels.Enable = 'on';
        buttonsliderrighthidepanels.Visible = 'on';
        
        
        
        
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
        
        
        % import/export panel
        
        describ1.Enable = 'on';
        describ1b.Enable = 'on';
        t1.Enable = 'on';
        t1b.Enable = 'on';
        describ2.Enable = 'on';
        describ1export.Enable = 'on';
        t2.Enable = 'on';
        ef2.Enable = 'on';
        t3.Enable = 'on';
        ef3.Enable = 'on';
        ef1b.Enable = 'on';
        ef1c.Enable = 'on';
        resetsettingsafterdone.Enable = 'on';
        description_resetsettingsafterdone.Enable = 'on';
        loadsettings.Enable = 'on';
        ef1.Enable = 'on';
        checkboxpathwaytodatafolder.Enable = 'on';
        checkboxpathwaytosaveimagesfolder.Enable = 'on';
        checkboxpathwaytosavedatafolder.Enable = 'on';
        
        % panelchannel:
        
        describ3.Enable = 'on';
        describ4.Enable = 'on';
        t4.Enable = 'on';
        describ4b.Enable = 'on';
        ef4b.Enable = 'on';
        ef4.Enable = 'on';
        
        %measurement panel
        
        describpix.Enable = 'on';
        describ1settingpix.Enable = 'on';
        t1ca.Enable = 'on';
        efpixx.Enable = 'on';
        t1cb.Enable = 'on';
        efpixy.Enable = 'on';
        t1cc.Enable = 'on';
        efpixz.Enable = 'on';
        describ_bit14.Enable = 'on';
        
        %detection panel
        
        checkifconfocal.Enable = 'on';
        describconfocal.Enable = 'on';
        describ1confocal.Enable = 'on';
        %analysis panel
        
        describoptionpar.Enable = 'on';
        describ1analysis.Enable = 'on';
        allparametersoption.Enable = 'on';
        viewandexportoption.Enable = 'on';
        
        
        %rerun panel
        
        describoptionalsheading.Enable = 'on';
        describoptionals.Enable = 'on';
        describ4c.Enable = 'on';
        savingparametersofcellimport.Enable = 'on';
        nottotakeofcellimport.Enable = 'on';
        describ4mask.Enable = 'on';
        
        maskimport.Enable = 'on';
        
        if maskimport.Value == 1
            tmask.Enable = 'on';
            efmaskpathway.Enable = 'on';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
            tmaskphrase.Enable = 'on';
            efmaskphrase.Enable = 'on';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
        
        
        
        
        
        
    end
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    if decisionviewoption == 2
        
        
        
        if decisionimageoption == 1
            
            describpanel_1.BackgroundColor = [1.0 1.0 1.0];
            describpanel_1.FontColor = geigerlabpink;
            
            describpanel_2.BackgroundColor = [1.0 1.0 1.0];
            describpanel_2.FontColor = hiddenpanelcolor2;
            
            describpanel_3.BackgroundColor = [0 0 0];
            describpanel_3.FontColor = hiddenpanelcolor3;
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = hiddenpanelcolor4;
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = hiddenpanelcolor5;
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = hiddenpanelcolor6;
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor1;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor2;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor3;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor5;
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor6;
            
            
            
            % images
            axes_panelimportexport.Position =   [-60 -85 650*1.2 550*1.2];
            image_panelimportexport = imshow('panel_importexporttrial.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            
            
            axes_panelchannel.Position = [-80 -80 615*1.3 320*1.3];
            image_panelchannel = imshow('channelpanelb800dpitest.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidemeasurementsettings.Position = [-35 -45 250*1.2 280*1.2];
            image_paneltohidemeasurementsettings = imshow('panel_measurementsettings.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltest.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohideanalysisoption.Position = [-25 -35 250*1.3 180*1.3];
            image_paneltohideanalysisoption = imshow('panel_analysisoptionb.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal,...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedatasetrerunoptions.Position = [-25 -35 660*1.1 450*1.1];
            image_paneltohidedatasetrerunoptions = imshow('panel_rerun.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
        end
        
        if decisionimageoption == 2
            
            describpanel_1.BackgroundColor = [1.0 1.0 1.0];
            describpanel_1.FontColor = geigerlabpink;
            
            describpanel_2.BackgroundColor = [1.0 1.0 1.0];
            describpanel_2.FontColor = hiddenpanelcolor2;
            
            describpanel_3.BackgroundColor = [0 0 0];
            describpanel_3.FontColor = hiddenpanelcolor3;
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = hiddenpanelcolor4;
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = hiddenpanelcolor5;
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = hiddenpanelcolor6;
            
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor1;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor2;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor3;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor5;
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor6;
            
            
            % images written
            axes_panelimportexport.Position = [-60 -20 650*1.05 550*1.05];
            image_panelimportexport = imshow('importpanel_testwritten.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            
            
            
            axes_panelchannel.Position = [-80 -85 615*1.3 320*1.3];
            image_panelchannel = imshow('channelpanelb800dpitestwritten.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidemeasurementsettings.Position = [-35 -45 250*1.2 280*1.2];
            image_paneltohidemeasurementsettings = imshow('panel_measurementsettingswritten.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltestwritten.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohideanalysisoption.Position = [-25 -35 250*1.3 180*1.3];
            image_paneltohideanalysisoption = imshow('panel_analysisoptionb.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
            axes_paneltohidedatasetrerunoptions.Position = [-25 -35 660*1.2 450*1.2];
            image_paneltohidedatasetrerunoptions = imshow('panel_rerunwritten.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
        end
        
        if decisionimageoption == 3
            % icons
        end
        
        if decisionimageoption == 4
            % logo water print
            
            describpanel_1.BackgroundColor = geigerlabwhite;
            describpanel_1.FontColor = geigerlabblue;
            
            describpanel_2.BackgroundColor = geigerlabwhite;
            describpanel_2.FontColor = geigerlabblue;
            
            describpanel_3.BackgroundColor = geigerlabwhite;
            describpanel_3.FontColor = geigerlabblue;
            
            describpanel_4.BackgroundColor = geigerlabwhite;
            describpanel_4.FontColor = geigerlabblue;
            
            describpanel_5.BackgroundColor = geigerlabwhite;
            describpanel_5.FontColor = geigerlabblue;
            
            describpanel_6.BackgroundColor = geigerlabwhite;
            describpanel_6.FontColor = geigerlabblue;
            
            
            axes_panelimportexport.BackgroundColor = hiddenpanelcolor4;
            axes_panelchannel.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidemeasurementsettings.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedetectionoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohideanalysisoption.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedatasetrerunoptions.BackgroundColor= hiddenpanelcolor4;
            axes_paneltohidedatasetrerunoptions.BackgroundColor = hiddenpanelcolor4;
            
            axes_panelimportexport.Position =   [-80 -85 650*1.2 550*1.2];
            image_panelimportexport = imshow('importpanel_testwatermark2.png', 'Parent', axes_panelimportexport, 'Border', 'tight');
            image_panelimportexport.ButtonDownFcn = @(btn,event) ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
            axes_panelchannel.Position = [-400 -220 615*2.3 320*2.3];
            image_panelchannel = imshow('importpanel_testwatermark2.png', 'Parent', axes_panelchannel, 'Border', 'tight');
            image_panelchannel.ButtonDownFcn = @(btn,event)  ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidemeasurementsettings.Position = [-100 -105 250*1.7 280*1.7];
            image_paneltohidemeasurementsettings = imshow('importpanel_testwatermark2.png', 'Parent', axes_paneltohidemeasurementsettings, 'Border', 'tight');
            image_paneltohidemeasurementsettings.ButtonDownFcn = @(btn,event) ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedetectionoption.Position = [-25 -45 250*1.3 150*1.3];
            image_paneltohidedetectionoption = imshow('confocalpaneltestwatermark.png', 'Parent', axes_paneltohidedetectionoption, 'Border', 'tight');
            image_paneltohidedetectionoption.ButtonDownFcn = @(btn,event) ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohideanalysisoption.Position = [-63 -72 250*1.67 180*1.67];
            image_paneltohideanalysisoption = imshow('confocalpaneltestwatermark.png', 'Parent', axes_paneltohideanalysisoption, 'Border', 'tight');
            image_paneltohideanalysisoption.ButtonDownFcn = @(btn,event) ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            axes_paneltohidedatasetrerunoptions.Position = [-165 -145 660*1.5 450*1.5];
            image_paneltohidedatasetrerunoptions = imshow('importpanel_testwatermark2.png', 'Parent', axes_paneltohidedatasetrerunoptions, 'Border', 'tight');
            image_paneltohidedatasetrerunoptions.ButtonDownFcn = @(btn,event) ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase);
            
            
        end
        
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        buttonsliderlefthidepanels.Enable = 'on';
        buttonsliderlefthidepanels.Visible = 'on';
        buttonsliderrighthidepanels.Enable = 'on';
        buttonsliderrighthidepanels.Visible = 'on';
        
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
        
        % import/export panel
        
        describ1.Enable = 'on';
        describ1b.Enable = 'on';
        t1.Enable = 'on';
        t1b.Enable = 'on';
        describ2.Enable = 'on';
        describ1export.Enable = 'on';
        t2.Enable = 'on';
        ef2.Enable = 'on';
        t3.Enable = 'on';
        ef3.Enable = 'on';
        ef1b.Enable = 'on';
        ef1c.Enable = 'on';
        resetsettingsafterdone.Enable = 'on';
        loadsettings.Enable = 'on';
        ef1.Enable = 'on';
        checkboxpathwaytodatafolder.Enable = 'on';
        checkboxpathwaytosaveimagesfolder.Enable = 'on';
        checkboxpathwaytosavedatafolder.Enable = 'on';
        description_resetsettingsafterdone.Enable = 'on';
        % panelchannel:
        
        describ3.Enable = 'on';
        describ4.Enable = 'on';
        t4.Enable = 'on';
        describ4b.Enable = 'on';
        ef4b.Enable = 'on';
        ef4.Enable = 'on';
        
        %measurement panel
        
        describpix.Enable = 'on';
        describ1settingpix.Enable = 'on';
        t1ca.Enable = 'on';
        efpixx.Enable = 'on';
        t1cb.Enable = 'on';
        efpixy.Enable = 'on';
        t1cc.Enable = 'on';
        efpixz.Enable = 'on';
        describ_bit14.Enable = 'on';
        
        %detection panel
        
        checkifconfocal.Enable = 'on';
        describconfocal.Enable = 'on';
        describ1confocal.Enable = 'on';
        %analysis panel
        
        describoptionpar.Enable = 'on';
        describ1analysis.Enable = 'on';
        allparametersoption.Enable = 'on';
        viewandexportoption.Enable = 'on';
        
        
        %rerun panel
        
        describoptionalsheading.Enable = 'on';
        describoptionals.Enable = 'on';
        describ4c.Enable = 'on';
        savingparametersofcellimport.Enable = 'on';
        nottotakeofcellimport.Enable = 'on';
        describ4mask.Enable = 'on';
        
        maskimport.Enable = 'on';
        
        if maskimport.Value == 1
            tmask.Enable = 'on';
            efmaskpathway.Enable = 'on';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
            tmaskphrase.Enable = 'on';
            efmaskphrase.Enable = 'on';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    if decisionviewoption == 3
        
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if decisionviewoption == 4
        
        paneltohideimportexport.Visible = 'off';
        paneltohidechannel.Visible = 'off';
        paneltohidemeasurementsettings.Visible = 'off';
        paneltohidedetectionoption.Visible = 'off';
        paneltohideanalysisoption.Visible = 'off';
        paneltohidedatasetrerunoptions.Visible = 'off';
        buttonsliderlefthidepanels.Enable = 'on';
        buttonsliderlefthidepanels.Visible = 'on';
        buttonsliderrighthidepanels.Enable = 'on';
        buttonsliderrighthidepanels.Visible = 'on';
        
        
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
        % text parts: Enable off
        
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % panelchannel:
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        %measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        %detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        %analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        
        %rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        nottotakeofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
        
    end
    
end

end


function buttonsliderrighthidepanelsfcn(~,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions, ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal,...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone)
global sliderhidepanelsvalue decisionviewoption
global    image_panelimportexport image_panelchannel image_paneltohidemeasurementsettings image_paneltohidedetectionoption  ...
    image_paneltohideanalysisoption image_paneltohidedatasetrerunoptions

if sliderhidepanelsvalue + 1 <= 6
    sliderhidepanelsvalue = sliderhidepanelsvalue + 1;
else
end
sliderhidepanelsvaluenow = sliderhidepanelsvalue;

txt = '';

if decisionviewoption == 1
    
    % import/export panel
    
    describ1.Enable = 'on';
    describ1b.Enable = 'on';
    t1.Enable = 'on';
    t1b.Enable = 'on';
    describ2.Enable = 'on';
    describ1export.Enable = 'on';
    t2.Enable = 'on';
    ef2.Enable = 'on';
    t3.Enable = 'on';
    ef3.Enable = 'on';
    ef1b.Enable = 'on';
    ef1c.Enable = 'on';
    resetsettingsafterdone.Enable = 'on';
    loadsettings.Enable = 'on';
    ef1.Enable = 'on';
    checkboxpathwaytodatafolder.Enable = 'on';
    checkboxpathwaytosaveimagesfolder.Enable = 'on';
    checkboxpathwaytosavedatafolder.Enable = 'on';
    description_resetsettingsafterdone.Enable = 'on';
    % panelchannel:
    
    describ3.Enable = 'on';
    describ4.Enable = 'on';
    t4.Enable = 'on';
    describ4b.Enable = 'on';
    ef4b.Enable = 'on';
    ef4.Enable = 'on';
    
    %measurement panel
    
    describpix.Enable = 'on';
    describ1settingpix.Enable = 'on';
    t1ca.Enable = 'on';
    efpixx.Enable = 'on';
    t1cb.Enable = 'on';
    efpixy.Enable = 'on';
    t1cc.Enable = 'on';
    efpixz.Enable = 'on';
    describ_bit14.Enable = 'on';
    
    %detection panel
    
    checkifconfocal.Enable = 'on';
    describconfocal.Enable = 'on';
    describ1confocal.Enable = 'on';
    
    %analysis panel
    
    describoptionpar.Enable = 'on';
    describ1analysis.Enable = 'on';
    allparametersoption.Enable = 'on';
    viewandexportoption.Enable = 'on';
    
    %rerun panel
    
    describoptionalsheading.Enable = 'on';
    describoptionals.Enable = 'on';
    describ4c.Enable = 'on';
    savingparametersofcellimport.Enable = 'on';
    describ4mask.Enable = 'on';
    
    maskimport.Enable = 'on';
    
    if maskimport.Value == 1
        tmask.Enable = 'on';
        efmaskpathway.Enable = 'on';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
        tmaskphrase.Enable = 'on';
        efmaskphrase.Enable = 'on';
        
    end
    
    if maskimport.Value == 0
        tmask.Enable = 'off';
        efmaskpathway.Enable = 'off';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
        tmaskphrase.Enable = 'off';
        efmaskphrase.Enable = 'off';
        
        
    end
    
    
    if sliderhidepanelsvalue == 0
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    
    if sliderhidepanelsvalue == 1
        
        % importexport;
        paneltohideimportexport.Visible = 'off';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    if sliderhidepanelsvalue == 2
        global phrasetofind numberofimages names pathwayimport ...
            pathwayexportimages pathwayexportdata
        
        if ~isempty(pathwayimport) && ~isempty(names) && ~isempty(numberofimages) && ~isempty(phrasetofind) ...
                && ~isempty(pathwayexportimages) && ~isempty(pathwayexportdata)
            
            ef1.BackgroundColor = 'w';
            ef1b.BackgroundColor = 'w';
            ef2.BackgroundColor = 'w';
            ef3.BackgroundColor = 'w';
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'off';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            image_panelimportexport.Visible = 'on';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'on';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'on';
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            
            if isempty(pathwayimport) || isempty(numberofimages)  || numberofimages == 0
                txt = [txt, '\n', 'Pathway to Data Folder is missing or no fitting images found on path'];
                ef1.BackgroundColor = 'y';
            else
                ef1.BackgroundColor = 'w';
            end
            
            if isempty(phrasetofind) || phrasetofind(1) == ""
                txt = [txt, '\n',  'No word to find in every file. Please add a common term in the images going for analysis.'];
                ef1b.BackgroundColor = 'y';
            else
                ef1b.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportimages) || pathwayexportimages(1) == ""
                txt = [txt, '\n',  'Pathway to save images is missing.'];
                ef2.BackgroundColor = 'y';
            else
                ef2.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportdata)
                txt = [txt, '\n',  'Pathway to save data is missing.'];
                ef3.BackgroundColor = 'y';
            else
                ef3.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        global toignore channelnames allchannelnames whichchannelforcelldetect
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && whichchannelforcelldetect <= length(allchannelnames)  && allchannelnames(1) ~= ""
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'off';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            image_panelimportexport.Visible = 'on';
            image_panelchannel.Visible = 'on';
            image_paneltohidemeasurementsettings.Visible = 'off';
            image_paneltohidedetectionoption.Visible = 'on';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'on';
            
            txt = ['Chosen Channels:' channelnames, ' with ignored channel numbers', num2str(toignore) ];
            p1_feedbackfield.Value = txt;
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            % txt = '';
            if isempty(allchannelnames) ||  allchannelnames(1) == ""
                txt = [txt, '\n','Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt,'\n', 'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt,'\n', 'Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 4
        global pixel_x pixel_y voxel_z % bitsize14
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z)  && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'off';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            image_panelimportexport.Visible = 'on';
            image_panelchannel.Visible = 'on';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'off';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'on';
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt, '\n','No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt, '\n', 'No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt, '\n', 'No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
            
        end
        
    end
    
    if sliderhidepanelsvalue == 5
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'off';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    if sliderhidepanelsvalue == 6
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'off';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    sliderhidepanelsvalue = sliderhidepanelsvaluenow;
    
    uebergang = splitlines(compose(txt));
    
    
    if isempty(uebergang{1})  &&  length(uebergang)>=2
        p1_feedbackfield.Value =  splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value=  splitlines(compose(txt));
    end
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if decisionviewoption == 2
    
    % import/export panel
    
    describ1.Enable = 'on';
    describ1b.Enable = 'on';
    t1.Enable = 'on';
    t1b.Enable = 'on';
    describ2.Enable = 'on';
    describ1export.Enable = 'on';
    t2.Enable = 'on';
    ef2.Enable = 'on';
    t3.Enable = 'on';
    ef3.Enable = 'on';
    ef1b.Enable = 'on';
    ef1c.Enable = 'on';
    resetsettingsafterdone.Enable = 'on';
    loadsettings.Enable = 'on';
    ef1.Enable = 'on';
    checkboxpathwaytodatafolder.Enable = 'on';
    checkboxpathwaytosaveimagesfolder.Enable = 'on';
    checkboxpathwaytosavedatafolder.Enable = 'on';
    description_resetsettingsafterdone.Enable = 'on';
    
    % panelchannel
    
    describ3.Enable = 'on';
    describ4.Enable = 'on';
    t4.Enable = 'on';
    describ4b.Enable = 'on';
    ef4b.Enable = 'on';
    ef4.Enable = 'on';
    
    %measurement panel
    
    describpix.Enable = 'on';
    describ1settingpix.Enable = 'on';
    t1ca.Enable = 'on';
    efpixx.Enable = 'on';
    t1cb.Enable = 'on';
    efpixy.Enable = 'on';
    t1cc.Enable = 'on';
    efpixz.Enable = 'on';
    describ_bit14.Enable = 'on';
    
    %detection panel
    
    checkifconfocal.Enable = 'on';
    describconfocal.Enable = 'on';
    describ1confocal.Enable = 'on';
    
    %analysis panel
    
    describoptionpar.Enable = 'on';
    describ1analysis.Enable = 'on';
    allparametersoption.Enable = 'on';
    viewandexportoption.Enable = 'on';
    
    %rerun panel
    
    describoptionalsheading.Enable = 'on';
    describoptionals.Enable = 'on';
    describ4c.Enable = 'on';
    savingparametersofcellimport.Enable = 'on';
    describ4mask.Enable = 'on';
    
    maskimport.Enable = 'on';
    
    if maskimport.Value == 1
        tmask.Enable = 'on';
        efmaskpathway.Enable = 'on';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
        tmaskphrase.Enable = 'on';
        efmaskphrase.Enable = 'on';
        
    end
    
    if maskimport.Value == 0
        tmask.Enable = 'off';
        efmaskpathway.Enable = 'off';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
        tmaskphrase.Enable = 'off';
        efmaskphrase.Enable = 'off';
        
    end
    
    if sliderhidepanelsvalue == 0
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    
    if sliderhidepanelsvalue == 1
        
        % importexport;
        paneltohideimportexport.Visible = 'off';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'on';
        
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    if sliderhidepanelsvalue == 2
        global phrasetofind numberofimages names pathwayimport ...
            pathwayexportimages pathwayexportdata
        
        if ~isempty(pathwayimport) && ~isempty(names) && ~isempty(numberofimages) && ~isempty(phrasetofind) ...
                && ~isempty(pathwayexportimages) && ~isempty(pathwayexportdata)
            
            ef1.BackgroundColor = 'w';
            ef1b.BackgroundColor = 'w';
            ef2.BackgroundColor = 'w';
            ef3.BackgroundColor = 'w';
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'off';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            
            
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'off';
            image_paneltohideanalysisoption.Visible = 'off';
            image_paneltohidedatasetrerunoptions.Visible = 'off';
            
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            
            
            if isempty(pathwayimport) || isempty(numberofimages)  || numberofimages == 0 % || length(pathwayimport) == 0
                txt = [txt, '\n', 'Pathway to Data Folder is missing or no fitting images found on path'];
                ef1.BackgroundColor = 'y';
            else
                ef1.BackgroundColor = 'w';
            end
            
            if isempty(phrasetofind) || phrasetofind(1) == ""
                txt = [txt, '\n','No word to find in every file. Please add a common term in the images going for analysis.'];
                ef1b.BackgroundColor = 'y';
            else
                ef1b.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportimages) || pathwayexportimages(1) == ""
                txt = [txt, '\n','Pathway to save images is missing.'];
                ef2.BackgroundColor = 'y';
            else
                ef2.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportdata)
                txt = [txt,'\n', 'Pathway to save data is missing.'];
                ef3.BackgroundColor = 'y';
            else
                ef3.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        global toignore channelnames allchannelnames whichchannelforcelldetect
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && whichchannelforcelldetect <= length(allchannelnames)  && allchannelnames(1) ~= ""
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'off';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'off';
            image_paneltohidedetectionoption.Visible = 'on';
            image_paneltohideanalysisoption.Visible = 'off';
            image_paneltohidedatasetrerunoptions.Visible = 'off';
            
            txt = ['Chosen Channels:' channelnames, ' with ignored channel numbers', num2str(toignore) ];
            p1_feedbackfield.Value = txt;
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            % txt = '';
            if isempty(allchannelnames) ||  allchannelnames(1) == ""
                txt = [txt, '\n','Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt,'\n', 'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt, '\n','Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 4
        global pixel_x pixel_y voxel_z % bitsize14
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z)  && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'off';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'off';
            image_paneltohidedetectionoption.Visible = 'off';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'off';
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt,'\n', 'No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt, '\n','No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt, '\n','No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
            
        end
        
    end
    
    if sliderhidepanelsvalue == 5
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'off';
        paneltohidedatasetrerunoptions.Visible = 'on';
        
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    if sliderhidepanelsvalue == 6
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'off';
        
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    sliderhidepanelsvalue = sliderhidepanelsvaluenow;
    
    uebergang = splitlines(compose(txt));
    if isempty(uebergang{1}) &&  length(uebergang)>=2
        p1_feedbackfield.Value =   splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value =  splitlines(compose(txt));
    end
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if decisionviewoption == 3
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if decisionviewoption == 4
    
    paneltohideimportexport.Visible = 'off';
    paneltohidechannel.Visible = 'off';
    paneltohidemeasurementsettings.Visible = 'off';
    paneltohidedetectionoption.Visible = 'off';
    paneltohideanalysisoption.Visible = 'off';
    paneltohidedatasetrerunoptions.Visible = 'off';
    image_panelimportexport.Visible = 'off';
    image_panelchannel.Visible = 'off';
    image_paneltohidemeasurementsettings.Visible = 'off';
    image_paneltohidedetectionoption.Visible = 'off';
    image_paneltohideanalysisoption.Visible = 'off';
    image_paneltohidedatasetrerunoptions.Visible = 'off';
    
    
    if sliderhidepanelsvalue == 0
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        
        % panelchannel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        %measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        %detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        %analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        %rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
    end
    
    
    if sliderhidepanelsvalue == 1
        
        % import/export panel
        
        describ1.Enable = 'on';
        describ1b.Enable = 'on';
        t1.Enable = 'on';
        t1b.Enable = 'on';
        describ2.Enable = 'on';
        describ1export.Enable = 'on';
        t2.Enable = 'on';
        ef2.Enable = 'on';
        t3.Enable = 'on';
        ef3.Enable = 'on';
        ef1b.Enable = 'on';
        ef1c.Enable = 'on';
        resetsettingsafterdone.Enable = 'on';
        loadsettings.Enable = 'on';
        ef1.Enable = 'on';
        checkboxpathwaytodatafolder.Enable = 'on';
        checkboxpathwaytosaveimagesfolder.Enable = 'on';
        checkboxpathwaytosavedatafolder.Enable = 'on';
        description_resetsettingsafterdone.Enable = 'on';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        %measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        %detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        %analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        %rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
        
    end
    
    
    if sliderhidepanelsvalue == 2
        global phrasetofind numberofimages names pathwayimport ...
            pathwayexportimages pathwayexportdata
        
        
        if ~isempty(pathwayimport) && ~isempty(names) && ~isempty(numberofimages) && ~isempty(phrasetofind) ...
                && ~isempty(pathwayexportimages) && ~isempty(pathwayexportdata)
            
            ef1.BackgroundColor = 'w';
            ef1b.BackgroundColor = 'w';
            ef2.BackgroundColor = 'w';
            ef3.BackgroundColor = 'w';
            
            % import/export panel
            
            describ1.Enable = 'off';
            describ1b.Enable = 'off';
            t1.Enable = 'off';
            t1b.Enable = 'off';
            describ2.Enable = 'off';
            describ1export.Enable = 'off';
            t2.Enable = 'off';
            ef2.Enable = 'off';
            t3.Enable = 'off';
            ef3.Enable = 'off';
            ef1b.Enable = 'off';
            ef1c.Enable = 'off';
            resetsettingsafterdone.Enable = 'off';
            loadsettings.Enable = 'off';
            ef1.Enable = 'off';
            checkboxpathwaytodatafolder.Enable = 'off';
            checkboxpathwaytosaveimagesfolder.Enable = 'off';
            checkboxpathwaytosavedatafolder.Enable = 'off';
            description_resetsettingsafterdone.Enable = 'off';
            % panelchannel:
            
            describ3.Enable = 'on';
            describ4.Enable = 'on';
            t4.Enable = 'on';
            describ4b.Enable = 'on';
            ef4b.Enable = 'on';
            ef4.Enable = 'on';
            
            %measurement panel
            
            describpix.Enable = 'off';
            describ1settingpix.Enable = 'off';
            t1ca.Enable = 'off';
            efpixx.Enable = 'off';
            t1cb.Enable = 'off';
            efpixy.Enable = 'off';
            t1cc.Enable = 'off';
            efpixz.Enable = 'off';
            describ_bit14.Enable = 'off';
            
            %detection panel
            
            checkifconfocal.Enable = 'off';
            describconfocal.Enable = 'off';
            describ1confocal.Enable = 'off';
            
            %analysis panel
            
            describoptionpar.Enable = 'off';
            describ1analysis.Enable = 'off';
            allparametersoption.Enable = 'off';
            viewandexportoption.Enable = 'off';
            
            %rerun panel
            
            describoptionalsheading.Enable = 'off';
            describoptionals.Enable = 'off';
            describ4c.Enable = 'off';
            savingparametersofcellimport.Enable = 'off';
            describ4mask.Enable = 'off';
            
            maskimport.Enable = 'off';
            
            if maskimport.Value == 1
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            if maskimport.Value == 0
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
                
            end
            
            
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            
            if isempty(pathwayimport) || isempty(numberofimages)  || numberofimages == 0
                txt = [txt,'\n', 'Pathway to Data Folder is missing or no fitting images found on path'];
                ef1.BackgroundColor = 'y';
            else
                ef1.BackgroundColor = 'w';
            end
            
            if isempty(phrasetofind) || phrasetofind(1) == ""
                txt = [txt,'\n', 'No word to find in every file. Please add a common term in the images going for analysis.'];
                ef1b.BackgroundColor = 'y';
            else
                ef1b.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportimages) || pathwayexportimages(1) == ""
                txt = [txt,'\n', 'Pathway to save images is missing.'];
                ef2.BackgroundColor = 'y';
            else
                ef2.BackgroundColor = 'w';
            end
            
            if isempty(pathwayexportdata)
                txt = [txt,'\n', 'Pathway to save data is missing.'];
                ef3.BackgroundColor = 'y';
            else
                ef3.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        global toignore channelnames allchannelnames whichchannelforcelldetect
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && whichchannelforcelldetect <= length(allchannelnames)  && allchannelnames(1) ~= ""
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            % import/export panel
            
            describ1.Enable = 'off';
            describ1b.Enable = 'off';
            t1.Enable = 'off';
            t1b.Enable = 'off';
            describ2.Enable = 'off';
            describ1export.Enable = 'off';
            t2.Enable = 'off';
            ef2.Enable = 'off';
            t3.Enable = 'off';
            ef3.Enable = 'off';
            ef1b.Enable = 'off';
            ef1c.Enable = 'off';
            resetsettingsafterdone.Enable = 'off';
            loadsettings.Enable = 'off';
            ef1.Enable = 'off';
            checkboxpathwaytodatafolder.Enable = 'off';
            checkboxpathwaytosaveimagesfolder.Enable = 'off';
            checkboxpathwaytosavedatafolder.Enable = 'off';
            description_resetsettingsafterdone.Enable = 'off';
            % channel panel
            
            describ3.Enable = 'off';
            describ4.Enable = 'off';
            t4.Enable = 'off';
            describ4b.Enable = 'off';
            ef4b.Enable = 'off';
            ef4.Enable = 'off';
            
            % measurement panel
            
            describpix.Enable = 'on';
            describ1settingpix.Enable = 'on';
            t1ca.Enable = 'on';
            efpixx.Enable = 'on';
            t1cb.Enable = 'on';
            efpixy.Enable = 'on';
            t1cc.Enable = 'on';
            efpixz.Enable = 'on';
            describ_bit14.Enable = 'on';
            
            % detection panel
            
            checkifconfocal.Enable = 'off';
            describconfocal.Enable = 'off';
            describ1confocal.Enable = 'off';
            
            % analysis panel
            
            describoptionpar.Enable = 'off';
            describ1analysis.Enable = 'off';
            allparametersoption.Enable = 'off';
            viewandexportoption.Enable = 'off';
            
            %rerun panel
            
            describoptionalsheading.Enable = 'off';
            describoptionals.Enable = 'off';
            describ4c.Enable = 'off';
            savingparametersofcellimport.Enable = 'off';
            describ4mask.Enable = 'off';
            
            maskimport.Enable = 'off';
            
            if maskimport.Value == 1
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            if maskimport.Value == 0
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            txt = ['Chosen Channels:' channelnames, ' with ignored channel numbers', num2str(toignore) ];
            p1_feedbackfield.Value = txt;
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            
            if isempty(allchannelnames) ||  allchannelnames(1) == ""
                txt = [txt, '\n','Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt,'\n', 'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt,'\n', 'Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 4
        global pixel_x pixel_y voxel_z % bitsize14
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z)  && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            
            % import/export panel
            
            describ1.Enable = 'off';
            describ1b.Enable = 'off';
            t1.Enable = 'off';
            t1b.Enable = 'off';
            describ2.Enable = 'off';
            describ1export.Enable = 'off';
            t2.Enable = 'off';
            ef2.Enable = 'off';
            t3.Enable = 'off';
            ef3.Enable = 'off';
            ef1b.Enable = 'off';
            ef1c.Enable = 'off';
            resetsettingsafterdone.Enable = 'off';
            loadsettings.Enable = 'off';
            ef1.Enable = 'off';
            checkboxpathwaytodatafolder.Enable = 'off';
            checkboxpathwaytosaveimagesfolder.Enable = 'off';
            checkboxpathwaytosavedatafolder.Enable = 'off';
            description_resetsettingsafterdone.Enable = 'off';
            % channel panel
            
            describ3.Enable = 'off';
            describ4.Enable = 'off';
            t4.Enable = 'off';
            describ4b.Enable = 'off';
            ef4b.Enable = 'off';
            ef4.Enable = 'off';
            
            % measurement panel
            
            describpix.Enable = 'off';
            describ1settingpix.Enable = 'off';
            t1ca.Enable = 'off';
            efpixx.Enable = 'off';
            t1cb.Enable = 'off';
            efpixy.Enable = 'off';
            t1cc.Enable = 'off';
            efpixz.Enable = 'off';
            describ_bit14.Enable = 'off';
            
            % detection panel
            
            checkifconfocal.Enable = 'on';
            describconfocal.Enable = 'on';
            describ1confocal.Enable = 'on';
            
            % analysis panel
            
            describoptionpar.Enable = 'off';
            describ1analysis.Enable = 'off';
            allparametersoption.Enable = 'off';
            viewandexportoption.Enable = 'off';
            
            
            % rerun panel
            
            describoptionalsheading.Enable = 'off';
            describoptionals.Enable = 'off';
            describ4c.Enable = 'off';
            savingparametersofcellimport.Enable = 'off';
            describ4mask.Enable = 'off';
            
            maskimport.Enable = 'off';
            
            if maskimport.Value == 1
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            if maskimport.Value == 0
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue - 1;
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt, '\n','No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt,'\n', 'No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt, '\n','No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
            
        end
        
    end
    
    if sliderhidepanelsvalue == 5
        
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'on';
        describ1analysis.Enable = 'on';
        allparametersoption.Enable = 'on';
        viewandexportoption.Enable = 'on';
        
        %rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
    end
    
    if sliderhidepanelsvalue == 6
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        % rerun panel
        
        describoptionalsheading.Enable = 'on';
        describoptionals.Enable = 'on';
        describ4c.Enable = 'on';
        savingparametersofcellimport.Enable = 'on';
        describ4mask.Enable = 'on';
        
        maskimport.Enable = 'on';
        
        if maskimport.Value == 1
            tmask.Enable = 'on';
            efmaskpathway.Enable = 'on';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
            tmaskphrase.Enable = 'on';
            efmaskphrase.Enable = 'on';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
    end
    sliderhidepanelsvalue = sliderhidepanelsvaluenow;
    
    uebergang = splitlines(compose(txt));
    if isempty(uebergang{1}) &&  length(uebergang)>=2
        p1_feedbackfield.Value =   splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value =  splitlines(compose(txt));
    end
    
end


end



% fct for button slider left clicked
function buttonsliderlefthidepanelsfcn(~, p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,  ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone )
global sliderhidepanelsvalue decisionviewoption
global  image_panelimportexport image_panelchannel image_paneltohidemeasurementsettings image_paneltohidedetectionoption  ...
    image_paneltohideanalysisoption image_paneltohidedatasetrerunoptions

if sliderhidepanelsvalue - 1 >= 0
    sliderhidepanelsvalue = sliderhidepanelsvalue - 1;
else
end
txt = '';
sliderhidepanelsvaluenow = sliderhidepanelsvalue;

if decisionviewoption == 1
    
    
    % import/export panel
    
    describ1.Enable = 'on';
    describ1b.Enable = 'on';
    t1.Enable = 'on';
    t1b.Enable = 'on';
    describ2.Enable = 'on';
    describ1export.Enable = 'on';
    t2.Enable = 'on';
    ef2.Enable = 'on';
    t3.Enable = 'on';
    ef3.Enable = 'on';
    ef1b.Enable = 'on';
    ef1c.Enable = 'on';
    resetsettingsafterdone.Enable = 'on';
    loadsettings.Enable = 'on';
    ef1.Enable = 'on';
    checkboxpathwaytodatafolder.Enable = 'on';
    checkboxpathwaytosaveimagesfolder.Enable = 'on';
    checkboxpathwaytosavedatafolder.Enable = 'on';
    description_resetsettingsafterdone.Enable = 'on';
    % channel panel
    
    describ3.Enable = 'on';
    describ4.Enable = 'on';
    t4.Enable = 'on';
    describ4b.Enable = 'on';
    ef4b.Enable = 'on';
    ef4.Enable = 'on';
    
    % measurement panel
    
    describpix.Enable = 'on';
    describ1settingpix.Enable = 'on';
    t1ca.Enable = 'on';
    efpixx.Enable = 'on';
    t1cb.Enable = 'on';
    efpixy.Enable = 'on';
    t1cc.Enable = 'on';
    efpixz.Enable = 'on';
    describ_bit14.Enable = 'on';
    
    % detection panel
    
    checkifconfocal.Enable = 'on';
    describconfocal.Enable = 'on';
    describ1confocal.Enable = 'on';
    
    % analysis panel
    
    describoptionpar.Enable = 'on';
    describ1analysis.Enable = 'on';
    allparametersoption.Enable = 'on';
    viewandexportoption.Enable = 'on';
    
    % rerun panel
    
    describoptionalsheading.Enable = 'on';
    describoptionals.Enable = 'on';
    describ4c.Enable = 'on';
    savingparametersofcellimport.Enable = 'on';
    describ4mask.Enable = 'on';
    
    maskimport.Enable = 'on';
    
    if maskimport.Value == 1
        tmask.Enable = 'on';
        efmaskpathway.Enable = 'on';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
        tmaskphrase.Enable = 'on';
        efmaskphrase.Enable = 'on';
        
    end
    
    if maskimport.Value == 0
        tmask.Enable = 'off';
        efmaskpathway.Enable = 'off';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
        tmaskphrase.Enable = 'off';
        efmaskphrase.Enable = 'off';
        
        
    end
    
    
    if sliderhidepanelsvalue == 0
        
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
        
    end
    
    
    if sliderhidepanelsvalue == 1
        % coming from 2 Channel options
        global numberofchannels toignore channelnames allchannelnames ...
            whichchannelforcelldetect  channeltoshowval
        % importexport;
        
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && ...
                whichchannelforcelldetect <= length(allchannelnames) && allchannelnames(1) ~= ""
            
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            
            paneltohideimportexport.Visible = 'off';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'on';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'on';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'on';
            
            
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            if isempty(allchannelnames)  ||  allchannelnames(1) == ""
                txt = [txt, '\n','Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt, '\n',...
                    'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt,'\n',...
                    'Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 2
        % coming from 3 / Pixel Measurement Settings
        global pixel_x pixel_y voxel_z
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z) && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'off';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            
            image_panelimportexport.Visible = 'on';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'on';
            image_paneltohideanalysisoption.Visible = 'on';
            image_paneltohidedatasetrerunoptions.Visible = 'on';
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt,'\n', 'No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt,'\n', 'No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt, '\n','No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        % coming from 4 confocal
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'off';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    if sliderhidepanelsvalue == 4
        % coming from 5 analysis options
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'off';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    if sliderhidepanelsvalue == 5
        % coming from data set rerun
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'off';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    
    if sliderhidepanelsvalue == 6
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'off';
        
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'on';
        image_paneltohidemeasurementsettings.Visible = 'on';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    uebergang = splitlines(compose(txt));
    if isempty(uebergang{1}) &&  length(uebergang)>=2
        p1_feedbackfield.Value =  splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value =  splitlines(compose(txt));
    end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if decisionviewoption == 2
    
    % import/export panel
    
    describ1.Enable = 'on';
    describ1b.Enable = 'on';
    t1.Enable = 'on';
    t1b.Enable = 'on';
    describ2.Enable = 'on';
    describ1export.Enable = 'on';
    t2.Enable = 'on';
    ef2.Enable = 'on';
    t3.Enable = 'on';
    ef3.Enable = 'on';
    ef1b.Enable = 'on';
    ef1c.Enable = 'on';
    resetsettingsafterdone.Enable = 'on';
    loadsettings.Enable = 'on';
    ef1.Enable = 'on';
    checkboxpathwaytodatafolder.Enable = 'on';
    checkboxpathwaytosaveimagesfolder.Enable = 'on';
    checkboxpathwaytosavedatafolder.Enable = 'on';
    description_resetsettingsafterdone.Enable = 'on';
    % channel panel
    
    describ3.Enable = 'on';
    describ4.Enable = 'on';
    t4.Enable = 'on';
    describ4b.Enable = 'on';
    ef4b.Enable = 'on';
    ef4.Enable = 'on';
    
    % measurement panel
    
    describpix.Enable = 'on';
    describ1settingpix.Enable = 'on';
    t1ca.Enable = 'on';
    efpixx.Enable = 'on';
    t1cb.Enable = 'on';
    efpixy.Enable = 'on';
    t1cc.Enable = 'on';
    efpixz.Enable = 'on';
    describ_bit14.Enable = 'on';
    
    % detection panel
    
    checkifconfocal.Enable = 'on';
    describconfocal.Enable = 'on';
    describ1confocal.Enable = 'on';
    
    % analysis panel
    
    describoptionpar.Enable = 'on';
    describ1analysis.Enable = 'on';
    allparametersoption.Enable = 'on';
    viewandexportoption.Enable = 'on';
    
    % rerun panel
    
    describoptionalsheading.Enable = 'on';
    describoptionals.Enable = 'on';
    describ4c.Enable = 'on';
    savingparametersofcellimport.Enable = 'on';
    describ4mask.Enable = 'on';
    
    maskimport.Enable = 'on';
    
    if maskimport.Value == 1
        tmask.Enable = 'on';
        efmaskpathway.Enable = 'on';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
        tmaskphrase.Enable = 'on';
        efmaskphrase.Enable = 'on';
        
    end
    
    if maskimport.Value == 0
        tmask.Enable = 'off';
        efmaskpathway.Enable = 'off';
        checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
        tmaskphrase.Enable = 'off';
        efmaskphrase.Enable = 'off';
        
    end
    
    
    if sliderhidepanelsvalue == 0
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        
        image_panelimportexport.Visible = 'on';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    
    if sliderhidepanelsvalue == 1
        % coming from 2 Channel options
        global numberofchannels toignore channelnames allchannelnames ...
            whichchannelforcelldetect  channeltoshowval
        % importexport;
        
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && ...
                whichchannelforcelldetect <= length(allchannelnames) && allchannelnames(1) ~= ""
            
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            
            paneltohideimportexport.Visible = 'off';
            paneltohidechannel.Visible = 'on';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'on';
            image_paneltohidemeasurementsettings.Visible = 'off';
            image_paneltohidedetectionoption.Visible = 'off';
            image_paneltohideanalysisoption.Visible = 'off';
            image_paneltohidedatasetrerunoptions.Visible = 'off';
            
            
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            if isempty(allchannelnames)  ||  allchannelnames(1) == ""
                txt = [txt, '\n', 'Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt, '\n',...
                    'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt, '\n',...
                    'Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 2
        % coming from 3 / Pixel Measurement Settings
        global pixel_x pixel_y voxel_z
        
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z) && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            
            paneltohideimportexport.Visible = 'on';
            paneltohidechannel.Visible = 'off';
            paneltohidemeasurementsettings.Visible = 'on';
            paneltohidedetectionoption.Visible = 'on';
            paneltohideanalysisoption.Visible = 'on';
            paneltohidedatasetrerunoptions.Visible = 'on';
            
            image_panelimportexport.Visible = 'off';
            image_panelchannel.Visible = 'off';
            image_paneltohidemeasurementsettings.Visible = 'on';
            image_paneltohidedetectionoption.Visible = 'off';
            image_paneltohideanalysisoption.Visible = 'off';
            image_paneltohidedatasetrerunoptions.Visible = 'off';
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt,'\n', 'No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt,'\n', 'No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt,'\n', 'No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        % coming from 4 confocal
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'off';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'on';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    if sliderhidepanelsvalue == 4
        % coming from 5 analysis options
        
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'off';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'on';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
        
        
    end
    
    if sliderhidepanelsvalue == 5
        % coming from data set rerun
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'off';
        paneltohidedatasetrerunoptions.Visible = 'on';
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'on';
        
    end
    
    
    if sliderhidepanelsvalue == 6
        
        paneltohideimportexport.Visible = 'on';
        paneltohidechannel.Visible = 'on';
        paneltohidemeasurementsettings.Visible = 'on';
        paneltohidedetectionoption.Visible = 'on';
        paneltohideanalysisoption.Visible = 'on';
        paneltohidedatasetrerunoptions.Visible = 'off';
        
        image_panelimportexport.Visible = 'off';
        image_panelchannel.Visible = 'off';
        image_paneltohidemeasurementsettings.Visible = 'off';
        image_paneltohidedetectionoption.Visible = 'off';
        image_paneltohideanalysisoption.Visible = 'off';
        image_paneltohidedatasetrerunoptions.Visible = 'off';
        
    end
    
    uebergang = splitlines(compose(txt));
    if isempty(uebergang{1}) &&  length(uebergang)>=2
        p1_feedbackfield.Value =    splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value=  splitlines(compose(txt));
    end
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if decisionviewoption == 3
    
    
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if decisionviewoption == 4
    
    paneltohideimportexport.Visible = 'off';
    paneltohidechannel.Visible = 'off';
    paneltohidemeasurementsettings.Visible = 'off';
    paneltohidedetectionoption.Visible = 'off';
    paneltohideanalysisoption.Visible = 'off';
    paneltohidedatasetrerunoptions.Visible = 'off';
    
    image_panelimportexport.Visible = 'off';
    image_panelchannel.Visible = 'off';
    image_paneltohidemeasurementsettings.Visible = 'off';
    image_paneltohidedetectionoption.Visible = 'off';
    image_paneltohideanalysisoption.Visible = 'off';
    image_paneltohidedatasetrerunoptions.Visible = 'off';
    
    
    if sliderhidepanelsvalue == 0
        
        
        ef1.BackgroundColor = 'w';
        ef1b.BackgroundColor = 'w';
        ef2.BackgroundColor = 'w';
        ef3.BackgroundColor = 'w';
        ef4.BackgroundColor = 'w';
        ef4b.BackgroundColor = 'w';
        efpixx.BackgroundColor = 'w';
        efpixy.BackgroundColor = 'w';
        efpixz.BackgroundColor = 'w';
        
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        
        % rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
        
    end
    
    
    if sliderhidepanelsvalue == 1
        % coming from 2 Channel options
        global numberofchannels toignore channelnames allchannelnames ...
            whichchannelforcelldetect  channeltoshowval
        % importexport;
        
        
        if ~isempty(allchannelnames) && whichchannelforcelldetect >0 && ...
                whichchannelforcelldetect <= length(allchannelnames) && allchannelnames(1) ~= ""
            
            
            ef4.BackgroundColor = 'w';
            ef4b.BackgroundColor = 'w';
            
            % import/export panel
            
            describ1.Enable = 'on';
            describ1b.Enable = 'on';
            t1.Enable = 'on';
            t1b.Enable = 'on';
            describ2.Enable = 'on';
            describ1export.Enable = 'on';
            t2.Enable = 'on';
            ef2.Enable = 'on';
            t3.Enable = 'on';
            ef3.Enable = 'on';
            ef1b.Enable = 'on';
            ef1c.Enable = 'on';
            resetsettingsafterdone.Enable = 'on';
            loadsettings.Enable = 'on';
            ef1.Enable = 'on';
            checkboxpathwaytodatafolder.Enable = 'on';
            checkboxpathwaytosaveimagesfolder.Enable = 'on';
            checkboxpathwaytosavedatafolder.Enable = 'on';
            description_resetsettingsafterdone.Enable = 'on';
            % channel panel
            
            describ3.Enable = 'off';
            describ4.Enable = 'off';
            t4.Enable = 'off';
            describ4b.Enable = 'off';
            ef4b.Enable = 'off';
            ef4.Enable = 'off';
            
            % measurement panel
            
            describpix.Enable = 'off';
            describ1settingpix.Enable = 'off';
            t1ca.Enable = 'off';
            efpixx.Enable = 'off';
            t1cb.Enable = 'off';
            efpixy.Enable = 'off';
            t1cc.Enable = 'off';
            efpixz.Enable = 'off';
            describ_bit14.Enable = 'off';
            
            % detection panel
            
            checkifconfocal.Enable = 'off';
            describconfocal.Enable = 'off';
            describ1confocal.Enable = 'off';
            
            % analysis panel
            
            describoptionpar.Enable = 'off';
            describ1analysis.Enable = 'off';
            allparametersoption.Enable = 'off';
            viewandexportoption.Enable = 'off';
            
            %rerun panel
            
            describoptionalsheading.Enable = 'off';
            describoptionals.Enable = 'off';
            describ4c.Enable = 'off';
            savingparametersofcellimport.Enable = 'off';
            describ4mask.Enable = 'off';
            
            maskimport.Enable = 'off';
            
            if maskimport.Value == 1
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            if maskimport.Value == 0
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
                
            end
            
        else
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            if isempty(allchannelnames)  ||  allchannelnames(1) == ""
                txt = [txt,  '\n','Name Channels field is empty. Please fill it out.'];
                ef4.BackgroundColor = 'y';
            else
                ef4.BackgroundColor = 'w';
            end
            ef4b_count = 0;
            if whichchannelforcelldetect <= 0
                txt = [txt,'\n', ...
                    'Channel for cell detection value is below/equal to 0. Not possible. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if whichchannelforcelldetect > length(allchannelnames)
                txt = [txt, '\n',...
                    'Channel for cell detection value is above possible channel number. Please change.'];
                ef4b.BackgroundColor = 'y';
            else
                ef4b_count = ef4b_count + 1;
            end
            
            if ef4b_count == 2
                ef4b.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 2
        % coming from 3 / Pixel Measurement Settings
        global pixel_x pixel_y voxel_z
        
        if ~isempty(pixel_x) && ~isempty(pixel_y) && ~isempty(voxel_z) && pixel_x > 0 && pixel_y > 0 && voxel_z > 0
            
            efpixx.BackgroundColor = 'w';
            efpixy.BackgroundColor = 'w';
            efpixz.BackgroundColor = 'w';
            
            
            % import/export panel
            
            describ1.Enable = 'off';
            describ1b.Enable = 'off';
            t1.Enable = 'off';
            t1b.Enable = 'off';
            describ2.Enable = 'off';
            describ1export.Enable = 'off';
            t2.Enable = 'off';
            ef2.Enable = 'off';
            t3.Enable = 'off';
            ef3.Enable = 'off';
            ef1b.Enable = 'off';
            ef1c.Enable = 'off';
            resetsettingsafterdone.Enable = 'off';
            loadsettings.Enable = 'off';
            ef1.Enable = 'off';
            checkboxpathwaytodatafolder.Enable = 'off';
            checkboxpathwaytosaveimagesfolder.Enable = 'off';
            checkboxpathwaytosavedatafolder.Enable = 'off';
            description_resetsettingsafterdone.Enable = 'off';
            % channel panel
            
            describ3.Enable = 'on';
            describ4.Enable = 'on';
            t4.Enable = 'on';
            describ4b.Enable = 'on';
            ef4b.Enable = 'on';
            ef4.Enable = 'on';
            
            % measurement panel
            
            describpix.Enable = 'off';
            describ1settingpix.Enable = 'off';
            t1ca.Enable = 'off';
            efpixx.Enable = 'off';
            t1cb.Enable = 'off';
            efpixy.Enable = 'off';
            t1cc.Enable = 'off';
            efpixz.Enable = 'off';
            describ_bit14.Enable = 'off';
            
            % detection panel
            
            checkifconfocal.Enable = 'off';
            describconfocal.Enable = 'off';
            describ1confocal.Enable = 'off';
            
            % analysis panel
            
            describoptionpar.Enable = 'off';
            describ1analysis.Enable = 'off';
            allparametersoption.Enable = 'off';
            viewandexportoption.Enable = 'off';
            
            %rerun panel
            
            describoptionalsheading.Enable = 'off';
            describoptionals.Enable = 'off';
            describ4c.Enable = 'off';
            savingparametersofcellimport.Enable = 'off';
            describ4mask.Enable = 'off';
            
            maskimport.Enable = 'off';
            
            if maskimport.Value == 1
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
            if maskimport.Value == 0
                tmask.Enable = 'off';
                efmaskpathway.Enable = 'off';
                checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
                tmaskphrase.Enable = 'off';
                efmaskphrase.Enable = 'off';
                
            end
            
        else
            
            sliderhidepanelsvaluenow = sliderhidepanelsvalue + 1;
            
            if isempty(pixel_x) || pixel_x <= 0
                txt = [txt, '\n','No allowed value for pixel width x (nm).'];
                efpixx.BackgroundColor = 'y';
            else
                efpixx.BackgroundColor = 'w';
            end
            
            if isempty(pixel_y) || pixel_y <= 0
                txt = [txt, '\n','No allowed value for pixel height y (nm).'];
                efpixy.BackgroundColor = 'y';
            else
                efpixy.BackgroundColor = 'w';
            end
            
            if isempty(voxel_z)|| voxel_z <= 0
                txt = [txt, '\n','No allowed value for voxel depth z (nm).'];
                efpixz.BackgroundColor = 'y';
            else
                efpixz.BackgroundColor = 'w';
            end
            
        end
        
    end
    
    if sliderhidepanelsvalue == 3
        % coming from 4 confocal
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'on';
        describ1settingpix.Enable = 'on';
        t1ca.Enable = 'on';
        efpixx.Enable = 'on';
        t1cb.Enable = 'on';
        efpixy.Enable = 'on';
        t1cc.Enable = 'on';
        efpixz.Enable = 'on';
        describ_bit14.Enable = 'on';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        % rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        
    end
    
    if sliderhidepanelsvalue == 4
        % coming from 5 analysis options
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'on';
        describconfocal.Enable = 'on';
        describ1confocal.Enable = 'on';
        
        % analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        % rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
    end
    
    if sliderhidepanelsvalue == 5
        % coming from data set rerun
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'on';
        describ1analysis.Enable = 'on';
        allparametersoption.Enable = 'on';
        viewandexportoption.Enable = 'on';
        
        % rerun panel
        
        describoptionalsheading.Enable = 'off';
        describoptionals.Enable = 'off';
        describ4c.Enable = 'off';
        savingparametersofcellimport.Enable = 'off';
        describ4mask.Enable = 'off';
        
        maskimport.Enable = 'off';
        
        if maskimport.Value == 1
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
            
        end
        
    end
    
    
    if sliderhidepanelsvalue == 6
        
        % import/export panel
        
        describ1.Enable = 'off';
        describ1b.Enable = 'off';
        t1.Enable = 'off';
        t1b.Enable = 'off';
        describ2.Enable = 'off';
        describ1export.Enable = 'off';
        t2.Enable = 'off';
        ef2.Enable = 'off';
        t3.Enable = 'off';
        ef3.Enable = 'off';
        ef1b.Enable = 'off';
        ef1c.Enable = 'off';
        resetsettingsafterdone.Enable = 'off';
        loadsettings.Enable = 'off';
        ef1.Enable = 'off';
        checkboxpathwaytodatafolder.Enable = 'off';
        checkboxpathwaytosaveimagesfolder.Enable = 'off';
        checkboxpathwaytosavedatafolder.Enable = 'off';
        description_resetsettingsafterdone.Enable = 'off';
        % channel panel
        
        describ3.Enable = 'off';
        describ4.Enable = 'off';
        t4.Enable = 'off';
        describ4b.Enable = 'off';
        ef4b.Enable = 'off';
        ef4.Enable = 'off';
        
        % measurement panel
        
        describpix.Enable = 'off';
        describ1settingpix.Enable = 'off';
        t1ca.Enable = 'off';
        efpixx.Enable = 'off';
        t1cb.Enable = 'off';
        efpixy.Enable = 'off';
        t1cc.Enable = 'off';
        efpixz.Enable = 'off';
        describ_bit14.Enable = 'off';
        
        % detection panel
        
        checkifconfocal.Enable = 'off';
        describconfocal.Enable = 'off';
        describ1confocal.Enable = 'off';
        
        % analysis panel
        
        describoptionpar.Enable = 'off';
        describ1analysis.Enable = 'off';
        allparametersoption.Enable = 'off';
        viewandexportoption.Enable = 'off';
        
        % rerun panel
        
        describoptionalsheading.Enable = 'on';
        describoptionals.Enable = 'on';
        describ4c.Enable = 'on';
        savingparametersofcellimport.Enable = 'on';
        describ4mask.Enable = 'on';
        
        maskimport.Enable = 'on';
        
        if maskimport.Value == 1
            tmask.Enable = 'on';
            efmaskpathway.Enable = 'on';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'on';
            tmaskphrase.Enable = 'on';
            efmaskphrase.Enable = 'on';
            
        end
        
        if maskimport.Value == 0
            tmask.Enable = 'off';
            efmaskpathway.Enable = 'off';
            checkboxpathwaytosaveimportmaskfolder.Enable = 'off';
            tmaskphrase.Enable = 'off';
            efmaskphrase.Enable = 'off';
            
        end
        
    end
    
    uebergang = splitlines(compose(txt));
    if isempty(uebergang{1})&&  length(uebergang)>=2
        p1_feedbackfield.Value =    splitlines(compose(txt(3:end)));
    else
        p1_feedbackfield.Value =  splitlines(compose(txt));
    end
    
    
end


sliderhidepanelsvalue = sliderhidepanelsvaluenow;

end

% fct for single layer images
function singlelayercellsfct(ef1c,~)
global buttonsinglelayer
buttonsinglelayer = ef1c.Value;
end


% fct for calculating all parameters like normalized dipole moment, dipole
% moment, ... with all normalization possibilities
function [dipolmomentnormalized11 dipolmomentnormalized21 dipolmomentnormalized12 dipolmomentnormalized22 ...
    dipolmomentnormalized13 dipolmomentnormalized23 dipolmomentnormalized14 dipolmomentnormalized24 ...
    dipolmomentnormalized15 dipolmomentnormalized25 dipolmomentnormalized16 dipolmomentnormalized26 ...
    dipolmoment Rnormalized1 Rnormalized2 diameter_maxvec diameter_avvec qnormalized1 ...
    qnormalized2 qnormalized3 qnormalized4 qnormalized5 qnormalized6...
    qposvec numberofpixels numberofpixelspos avintensity RposRmean intensityvaluetotal RnegRmean ...
    RposRneg displacementRposRnegMRposMRneg displacementDipoleMomentfromMiddle sumofdistancesqRpos ...
    percoverphi countessphi distancetoavvalphi zaehlerhowlonghowoftenphi endpointsphi percovertheta ...
    countesstheta distancetoavvaltheta zaehlerhowlonghowoftentheta endpointstheta howmuchoveritatallphi ...
    howmuchoveritatalltheta startpointsphi meanpointsphi lengthpointsphi histogramvaluesphi distancetonextphi ...
    distancetomeanphi clusterallphi clusterlengthphi allclusterinputphi clusterpercentphi clusterpercenttoallpixelsposphi ...
    arrayofclusterstrengthphi arrayofclustersdistancephi arrayofclustersphi startpointstheta  meanpointstheta ...
    lengthpointstheta histogramvaluestheta distancetonexttheta distancetomeantheta clusteralltheta clusterlengththeta ...
    allclusterinputtheta clusterpercenttheta clusterpercenttoallpixelspostheta arrayofclusterstrengththeta ...
    arrayofclustersdistancetheta arrayofclusterstheta, ...
    final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
    sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
    sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist] = ...
    polarityquantificationallnormalizations(path, z, numberofimages, names, ...
    allchannelnames, toignore, mask, stackstotake, pixlength_x, pixlength_y, pixlength_z, pathwaytoexportimages,...
    saveimagesyes, buttongeneralqnormalization, buttondiameter, dipolmomentnormalized11, dipolmomentnormalized21,...
    dipolmomentnormalized12, dipolmomentnormalized22, dipolmomentnormalized13, dipolmomentnormalized23,...
    dipolmomentnormalized14, dipolmomentnormalized24, dipolmomentnormalized15, dipolmomentnormalized25, ...
    dipolmomentnormalized16, dipolmomentnormalized26, dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, ...
    diameter_avvec, qnormalized1, qnormalized2, qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, ...
    RnegRmean, RposRneg, displacementRposRnegMRposMRneg, displacementDipoleMomentfromMiddle, sumofdistancesqRpos, percoverphi, ...
    countessphi, distancetoavvalphi, zaehlerhowlonghowoftenphi, endpointsphi, percovertheta, countesstheta, distancetoavvaltheta, ...
    zaehlerhowlonghowoftentheta, endpointstheta, howmuchoveritatallphi, howmuchoveritatalltheta, startpointsphi, meanpointsphi, ...
    lengthpointsphi, histogramvaluesphi, distancetonextphi,distancetomeanphi,clusterallphi,clusterlengthphi,allclusterinputphi, ...
    clusterpercentphi, clusterpercenttoallpixelsposphi, arrayofclusterstrengthphi,arrayofclustersdistancephi,arrayofclustersphi, ...
    startpointstheta, meanpointstheta, lengthpointstheta, histogramvaluestheta, distancetonexttheta,distancetomeantheta, ...
    clusteralltheta,clusterlengththeta,allclusterinputtheta, clusterpercenttheta, clusterpercenttoallpixelspostheta, ...
    arrayofclusterstrengththeta,arrayofclustersdistancetheta,arrayofclusterstheta, ...
    final_distancestrengthlist, sorted_volumelist,sorted_centroidlist, sorted_equivdiameterlist,  sorted_voxellistlist, ...
    sorted_surfacearealist,   sorted_voxelvalueslist, sorted_weightedcentroidlist, ...
    sorted_meanintensitylist, sorted_maxintensitylist, arrayfixed4distancelist, arrayfixed5strengthlist, sorted_array_tofilldistancelist, sorted_array_tofillstrengthlist)
close all
global buttonimportmasksofcells
if isempty(saveimagesyes)
    saveimagesyes = 1;
end

if saveimagesyes ==1 && ~isempty(pathwaytoexportimages)
    %save mask as tiff
    t = Tiff(strcat(pathwaytoexportimages, '\',string(names{z}),' Masked Cell ',num2str(z), '.tif'), 'w');
    tagstruct.ImageLength = size(mask,1);
    tagstruct.ImageWidth = size(mask,2);
    tagstruct.Photometric = Tiff.Photometric.Mask;
    tagstruct.BitsPerSample = 8;
    tagstruct.SamplesPerPixel = 1;
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.Compression = Tiff.Compression.None;
    tagstruct.Software = 'MATLAB';
    setTag(t, tagstruct)
    setTag(t, 'XResolution', pixlength_x);
    setTag(t, 'YResolution', pixlength_y);
    
    
    write(t, squeeze(im2uint8(mask(:,:,1))));
    
    for m = 2:size(mask,3)
        writeDirectory(t);
        setTag(t, tagstruct);
        write(t, squeeze(im2uint8(mask(:,:,m))));
    end
    
    close(t)
end

if  buttonimportmasksofcells == 1
    mask = mask./max(max(max(mask)));
end

% don't need whole mask:
mask_original = mask;
clear   mask
mask = mask_original(:,:,stackstotake);


mask_background = zeros(size(mask));
mask_background(mask == 0) = 1;


indices = 1:length(allchannelnames);
indices(toignore) = [];


b = imfinfo(path);
stacknum = length(stackstotake);




global bitsize14
if bitsize14 ==1
    max_val12 = 2^14-1;
else
    try
        if ~isempty(b(1).SampleFormat)
            if isequal(b(1).SampleFormat, "Two's complement signed integer")
                max_val12 = 2^(b(1).BitDepth/2) - 1;
            else
                max_val12 = 2^(b(1).BitDepth) - 1;
            end
            
        else
            max_val12 = 2^(b(1).BitDepth) - 1;
        end
    catch
        max_val12 = 2^(b(1).BitDepth) - 1;
    end
end


pixel_vol = pixlength_x * pixlength_y * pixlength_z;
M = zeros(b(1).Height, b(1).Width, length(stackstotake));

for uka = indices
    
    count = 1;
    
    for k = uka+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):uka+length(allchannelnames)*(stackstotake(end)-1)
        M(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    if saveimagesyes == 1 && ~isempty(pathwaytoexportimages)
        try
            montage(double(M).*double(mask)./double(max(max(max(M)))));
            set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
            saveas(gcf,strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), '.png'));
        catch
        end
        close all
    end
    
    av_background = 0;
    background = 0;
    count_back = 0;
    
    
    for t = 1:stacknum
        for i = 1:size(mask_background,1)
            for j = 1:size(mask_background,2)
                
                if mask_background(i,j,t) == 1
                    background = background + double(M(i,j,t));
                    count_back = count_back + 1;
                end
                
            end
        end
    end
    % get average background by dividing total background through count
    av_background = background / count_back;
    av_background
    % correct the signal, by subtracting the average background
    
    M = double(M) - av_background;
    
    bound_x = 0; %values of frontier
    bound_y = 0; % values of frontier
    bound_z = 0; % values of frontier
    
    
    for i = 1:stacknum
        
        roiboundaries = bwboundaries(mask(:,:,i));
        
        try xy = roiboundaries{1};
            x = xy(:,2);
            y = xy(:,1);
            bound_x = [bound_x; x];
            bound_y = [bound_y; y];
            bound_z = [bound_z; repelem(i, size(xy,1))' ];
        catch
        end
        
    end
    
    bound_x(1) = [];
    bound_y(1) = [];
    bound_z(1) = [];
    
    % Sum over all signal values, divide by new count to get average value
    
    value = 0;
    
    count = 0;
    
    
    
    
    for t = 1:stacknum
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    value = value + double(M(j,k,t));
                    count = count + 1;
                    
                    
                    
                end
            end
        end
    end
    
    count_intensity = value;
    
    
    %------------------------------
    
    
    
    av_val = value/count;
    
    
    avintensity(z,uka) = av_val;
    
    global buttoneachcellnormalizedtoaveragevalue1
    if buttoneachcellnormalizedtoaveragevalue1 ==1
        count = 0;
        value = 0;
        M = double(M)./av_val;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    
    global buttoneachcellchargenormalizedcorrespondingtototalvalue1
    if buttoneachcellchargenormalizedcorrespondingtototalvalue1 == 1
        count = 0;
        value = 0;
        M = double(M)./count_intensity;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    max_val6 = av_val * count;
    
    %%%%%%%
    % goal: get 'charge' density for every pixel of masked signal area
    
    clear mask_pos;
    clear mask_neg;
    clear N;
    clear r_posx;
    clear r_posy;
    clear r_posz;
    clear q_pos;
    clear r_negx;
    clear r_negy;
    clear r_negz;
    clear q_neg;
    
    r_posx = zeros(1);
    r_posy = zeros(1);
    r_posz = zeros(1);
    q_pos = zeros(1);
    
    r_negx = zeros(1);
    r_negy = zeros(1);
    r_negz = zeros(1);
    q_neg = zeros(1);
    
    zaehler_pos = 0;
    zaehler_neg = 0;
    zaehler_tot = 0;
    list_pos = zeros(1,5);
    list_neg = zeros(1,5);
    
    
    qposmax34 = 0;
    
    for t = 1:stacknum
        
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    N(j,k,t) = (double(M(j,k,t)) - double(av_val))/pixel_vol;
                    % N: 3D Matrix with 'charge' density values
                    zaehler_tot = zaehler_tot + 1; %total count of voxels
                    
                    if N(j,k,t)>0 % for positive 'charge' density
                        
                        r_posx = r_posx + j * N(j,k,t); % here: sum(q * <r>)
                        r_posy = r_posy + k * N(j,k,t); % here: sum(q * <r>)
                        r_posz = r_posz + t * N(j,k,t); % here: sum(q * <r>)
                        q_pos = q_pos + N(j,k,t); % here: sum(q)
                        
                        % sum(q * <r>) / sum(q) later calculated;
                        
                        
                        if N(j,k,t) > qposmax34
                            qposmax34 = N(j,k,t);
                        end
                        
                        
                        
                        
                        zaehler_pos = zaehler_pos + 1; % important later for normalization of Dipole Moment
                        list_pos(zaehler_pos,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                        
                    end
                    
                    if N(j,k,t)<0 % if negative density
                        % case == 0: no impact on where high or low charge, left out
                        
                        r_negx = r_negx + j * N(j,k,t);
                        r_negy = r_negy + k * N(j,k,t);
                        r_negz = r_negz + t * N(j,k,t);
                        q_neg = q_neg + N(j,k,t);
                        zaehler_neg = zaehler_neg + 1;
                        list_neg(zaehler_neg,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                    end % for == 0: no impact on where high or low charge, left out
                end
            end
        end
    end
    
    cd(pathwaytoexportimages)
    save( [char( 'list_pos cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'list_pos', '-v7.3');
    save( [char( 'list_neg cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'list_neg', '-v7.3');
    
    % sum(q * <r>) / sum(q)
    % as Matrix-definition to x and y is different:
    % need to adjust for it and change x and y
    
    R_pos = [r_posy/q_pos, r_posx/q_pos, r_posz/q_pos];
    % weighted mean position of positive 'charge' density
    
    R_neg = [r_negy/q_neg, r_negx/q_neg, r_negz/q_neg];
    % weighted mean position of negative 'charge' denstiy
    
    save( [char( 'R_pos cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'R_pos', '-v7.3');
    save( [char( 'R_neg cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'R_neg', '-v7.3');
    
    distances = zeros(1, size(list_pos,1));
    
    for k = 1:size(list_pos,1)
        distances(k) = ((list_pos(k,1)-R_pos(2))^2 + (list_pos(k,2)-R_pos(1))^2 + (list_pos(k,3)-R_pos(3))^2)^0.5;
    end
    
    sumofdistancesqRpos(uka,z) = sum(distances);
    
    %R_eval = norm(R_pos - R_neg);
    % distance between R_pos and R_neg
    
    % now: in nm
    % herefore: I defined center of voxel as the position of value.
    % thus, always -0.5 pixlength
    
    R_posnm = [ (R_pos(1) -0.5) * pixlength_x, (R_pos(2)- 0.5) * pixlength_y, (R_pos(3) - 0.5) * pixlength_z];
    
    R_negnm = [ (R_neg(1)-0.5) * pixlength_x, (R_neg(2) - 0.5)* pixlength_y, (R_neg(3) - 0.5) * pixlength_z];
    
    R_evalnm = norm(R_posnm - R_negnm);
    
    %%%%%%%%%%%%%
    % goal: get the center of volume of interest and the maximal diameter / average radius ,...
    
    % restructure the mask with its 0 and 1 values into 3D coordinates of the
    % positions of the 1 values
    pixList = regionprops(mask, 'PixelList'); % (struct, 3D Matrix with doubles)
    pixsM2 = pixList.PixelList; % values in pixel,
    %through changing from matrix to structure: 1st column x, 2nd column y, 3rd
    %column z
    pixsM(:,1) = ((pixsM2(:,1)-0.5)* pixlength_x); % values in nm
    pixsM(:,2) = ((pixsM2(:,2)-0.5)* pixlength_y); % values in nm
    global buttonsinglelayer
    if buttonsinglelayer == 0
        try pixsM(:,3) = ((pixsM2(:,3)-0.5)* pixlength_z); % values in nm
        catch
            pixsM(:,3) = ones(size(pixsM,1),1);
        end
    else
        pixsM(:,3) = ones(size(pixsM,1),1);
    end
    
    if buttonsinglelayer ==1
       pixsM2(:,3) = ones(size(pixsM2,1),1); 
    end
    
    Mmeanpix = [mean(pixsM2(:,1)), mean(pixsM2(:,2)), mean(pixsM2(:,3))];
    if uka ==1
        save( [char( 'Mmean pix cell'), num2str(z), char(allchannelnames(uka)),'.mat'], 'Mmeanpix', '-v7.3');
    end
    
    
    xlist = list_pos(:,2) - Mmeanpix(1);
    ylist = list_pos(:,1) - Mmeanpix(2);
    zlist = list_pos(:,3) - Mmeanpix(3);
    Mlist = list_pos(:,5);
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    
    Mlist2 = Mlist - mean(Mlist);
    index_totake = find(Mlist2 > 0);
    Mlist3 = Mlist(index_totake);
    xlist3 = xlist(index_totake);
    ylist3 = ylist(index_totake);
    zlist3 = zlist(index_totake);
    
    
    y_min = min(list_pos(:,1));
    y_max = max(list_pos(:,1));
    x_min = min(list_pos(:,2));
    x_max = max(list_pos(:,2));
    z_min = min(list_pos(:,3));
    z_max = max(list_pos(:,3));
    
    
    Mpos = zeros(y_max + 10, x_max + 10, z_max - z_min);
    
    %     for i = 1:length(Mlist3)
    %
    %         Mpos(ylist3(i) + Mmeanpix(2), xlist3(i) + Mmeanpix(1), zlist3(i)+ Mmeanpix(3)- z_min + 1) = Mlist3(i);
    %
    %     end
    %
    %     Mpos_normalized = Mpos ./ max(max(max(Mpos)));
    %     figure()
    %     montage(Mpos_normalized);
    %     title([string(allchannelnames(uka)), ': qpos of qpos '])
    %     set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    %     saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qposofqpos.png'))
    
    
    for i = 1:length(Mlist3)
        
        Mpos(ylist(index_totake(i)) + Mmeanpix(2), xlist(index_totake(i)) + Mmeanpix(1), zlist(index_totake(i)) + Mmeanpix(3)- z_min + 1) = Mlist3(i);
        
    end
    
    Mpos_normalized = Mpos ./ max(max(max(Mpos)));
    figure()
    montage(Mpos_normalized);
    title([string(allchannelnames(uka)), ': qpos of qpos '])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qposofqpos.png'))
    
    
    Mposjustqpos = zeros(y_max + 10, x_max + 10, z_max - z_min);
    
    for i = 1:length(Mlist)
        
        Mposjustqpos(ylist(i) + Mmeanpix(2), xlist(i) + Mmeanpix(1), zlist(i) + Mmeanpix(3)- z_min + 1) = Mlist(i);
        
    end
    
    Mposjustqpos_normalized = Mposjustqpos ./ max(max(max(Mposjustqpos)));
    figure()
    montage(Mposjustqpos_normalized);
    title([string(allchannelnames(uka)), ': qpos'])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qpos.png'))
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    se = strel('disk',1);
    afterOpening = imopen(Mpos_normalized,se);
    
    figure()
    montage(afterOpening)
    title([string(allchannelnames(uka)), ': qpos of qpos after opening'])
    set(gca,'Units','normalized','OuterPosition',[0 0 1 1]);
    saveas(gcf, strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'qposofqposafteropening.png'))
    
    C = bwconncomp(afterOpening, 26);
    
    numPixelsC = cellfun(@numel,C.PixelIdxList);
    totakeclusters = find(numPixelsC > 50);
    
    stats = regionprops3(C, afterOpening,  "all");
    findstats = find(table2array(stats(:,1))<50);
    
    
    stats(findstats,:) = [];
    stats
    volume = table2array(stats(:,1))
    centroid = table2array(stats(:,2))
    equivdiameter = table2array(stats(:,6));
    voxellist = table2array(stats(:,8));
    surfacearea = table2array(stats(:,18));
    voxelvalues = table2array(stats(:,19));
    weightedcentroid = table2array(stats(:,20));
    meanintensity = table2array(stats(:,21));
    maxintensity = table2array(stats(:,22));
    
    [sorted_volume sorted_index] = sort(volume, 'desc')
    sorted_centroid = centroid(sorted_index,:);
    sorted_equivdiameter = equivdiameter(sorted_index);
    sorted_voxellist = voxellist(sorted_index);
    sorted_surfacearea = surfacearea(sorted_index);
    sorted_voxelvalues = voxelvalues(sorted_index);
    sorted_weightedcentroid = weightedcentroid(sorted_index,:);
    sorted_meanintensity = meanintensity(sorted_index);
    sorted_maxintensity = maxintensity(sorted_index);
    
    
    strengthclusters3d = sorted_volume ./ sum(sorted_volume);
    array_tofillstrength = zeros(1,length(strengthclusters3d));
    array_tofilldistance = zeros(1,length(strengthclusters3d));
    
    
    try
        maxclusterdirection = sorted_centroid(1,:) - Mmeanpix;
        projectedtoxy = maxclusterdirection(1,1:2);
    catch
        maxclusterdirection = [NaN, NaN , NaN];
        projectedtoxy = [NaN NaN];
        
    end
    
    arrayfixed5strength = zeros(5,1);
    arrayfixed4distance = zeros(4,1);
    
    for i = 1:length(strengthclusters3d)
        
        if strengthclusters3d(i) >= 0.60
            array_tofillstrength(i) = 1;
            arrayfixed5strength(1) =  arrayfixed5strength(1) + 1;
        end
        if  0.4 <= strengthclusters3d(i) && strengthclusters3d(i) <0.6
            array_tofillstrength(i) = 2;
            arrayfixed5strength(2) =  arrayfixed5strength(2) + 1;
        end
        if  0.2 <= strengthclusters3d(i) && strengthclusters3d(i) <0.4
            array_tofillstrength(i) = 3;
            arrayfixed5strength(3) =  arrayfixed5strength(3) + 1;
        end
        if  0.1 <= strengthclusters3d(i) && strengthclusters3d(i) <0.2
            array_tofillstrength(i) = 4;
            arrayfixed5strength(4) =  arrayfixed5strength(4) + 1;
        end
        if  0 <= strengthclusters3d(i) && strengthclusters3d(i) <0.1
            array_tofillstrength(i) = 5;
            arrayfixed5strength(5) =  arrayfixed5strength(5) + 1;
        end
        
        
        
        
        alpharad = acos(dot(projectedtoxy, sorted_centroid(i,1:2)- Mmeanpix(1:2)) / (sqrt(dot(projectedtoxy, projectedtoxy)) * sqrt(dot( sorted_centroid(i,1:2)- Mmeanpix(1:2),  sorted_centroid(i,1:2)- Mmeanpix(1:2)))));
        alphadeg = alpharad / (2* pi()) * 360;
        
        if alphadeg <= 45
            array_tofilldistance(i) = 1;
            arrayfixed4distance(1) = arrayfixed4distance(1) + 1;
        end
        if alphadeg <= 90 && alphadeg > 45
            array_tofilldistance(i) = 2;
            arrayfixed4distance(2) = arrayfixed4distance(2) + 1;
        end
        if alphadeg <= 135 && alphadeg > 90
            array_tofilldistance(i) = 3;
            arrayfixed4distance(3) = arrayfixed4distance(3) + 1;
        end
        if alphadeg <= 180 && alphadeg > 135
            array_tofilldistance(i) = 4;
            arrayfixed4distance(4) = arrayfixed4distance(4) + 1;
        end
        
        
        
        
    end
    
    
    [array_tofillstrengthsorted index_sortedstrengtharray] = sort(array_tofillstrength, 'asc');
    array_tofilldistancesorted = array_tofilldistance(index_sortedstrengtharray);
    
    final_array = 0;
    for let = 1:length(array_tofillstrengthsorted)
        
        final_array = final_array + array_tofillstrengthsorted(let).* 10^(length(array_tofillstrengthsorted)- let + 1);
        final_array = final_array + array_tofilldistancesorted(let).* 10^(2*length(array_tofillstrengthsorted)-let +2);
        
        
    end
    
    final_distancestrengthlist(z, uka) = final_array;
    
    arrayfixed4distancelist(z,uka,:) = arrayfixed4distance;
    arrayfixed5strengthlist(z,uka,:) = arrayfixed5strength;
    
    sorted_array_tofilldistancelist{z,uka} = array_tofilldistancesorted;
    sorted_array_tofillstrengthlist{z,uka}= array_tofillstrengthsorted;
    sorted_volumelist{z, uka} = sorted_volume;
    sorted_centroidlist{z, uka} = sorted_centroid;
    sorted_equivdiameterlist{z, uka} = sorted_equivdiameter;
    sorted_voxellistlist{z, uka} = sorted_voxellist;
    sorted_surfacearealist{z, uka} = sorted_surfacearea;
    sorted_voxelvalueslist{z, uka} = sorted_voxelvalues;
    sorted_weightedcentroidlist{z, uka} = sorted_weightedcentroid;
    sorted_meanintensitylist{z, uka} = sorted_meanintensity;
    sorted_maxintensitylist{z, uka} = sorted_maxintensity;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    r = (xlist3.^2 + ylist3.^2 + zlist3.^2);
    theta = acos(zlist3./(xlist3.^2 + ylist3.^2 + zlist3.^2).^0.5); % 0 bis pi
    phi = zeros(1,length(xlist3));                   % 0 bis 2 pi
    
    
    for q = 1:length(xlist3)
        if xlist3(q) >= 0
            phi(q) = atan(ylist3(q)./xlist3(q)) + pi()/2;
        else
            phi(q) = atan(ylist3(q)./xlist3(q)) + 3/2 *pi();
        end
    end
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    
    thetadeg = rad2deg(theta);
    phideg = rad2deg(phi);
    binedgestotakeforphi = 0:10:360;
    randval = 1 / (length(binedgestotakeforphi) - 1);
    
    global pathwayexportdata
    save([char(pathwayexportdata),'\phideg', char(num2str(z)), 'channel', char(num2str(uka)), '.mat'], 'phideg', '-v7.3');
    save([char(pathwayexportdata),'\thetadeg', char(num2str(z)), 'channel', char(num2str(uka)), '.mat'], 'thetadeg', '-v7.3');
    
    
    
    
    
    figure()
    subplot(1,2,1)
    ahistogram = histogram(phideg, 'BinEdges', binedgestotakeforphi, 'Normalization', 'probability');
    title('\phi from 0° to 360° in 10° bins')
    xlabel('Binned Degree (°)')
    ylabel('Normalized Probability')
    
    data_ahistogram = ahistogram.Values;
    whatisaboverandom = data_ahistogram - randval;
    whatisaboverandom(whatisaboverandom < 0) = 0;
    
    countess = 0;
    howlonghowoften = zeros(1);
    tocount = 0;
    zaehlerhowlong = 1;
    
    findabove0forstart = find(whatisaboverandom == 0);
    start = findabove0forstart(1);
    
    endpoints = zeros(1);
    zaehlerendpoints = 1;
    
    howmuchoverit = 0;
    howmuchoveritatall = [];
    zaehlerhowmuchoverit = 1;
    
    
    if start == 1 || sum(findabove0forstart == 36) == 1
        % start: first bin, that 0 (not over average); if not possibility that above random for bin 1 and 36
        for i = 1:length(whatisaboverandom)
            if whatisaboverandom(i)>0
                countess = countess + 1;
                tocount = tocount + 1;
                howmuchoverit = howmuchoverit + whatisaboverandom(i);
                if i == length(whatisaboverandom)
                    howlonghowoften(zaehlerhowlong) = tocount;
                    endpoints(zaehlerendpoints) = i;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                end
                
                
            else
                if tocount ~=0
                    howlonghowoften(zaehlerhowlong) = tocount;
                    zaehlerhowlong = zaehlerhowlong + 1;
                    tocount = 0;
                    endpoints(zaehlerendpoints) = i -1;
                    zaehlerendpoints = zaehlerendpoints + 1;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    howmuchoverit = 0;
                    zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                end
            end
            
        end
        
        
    else % could go over 36 / 1 bin
        
        for i = start:36 + start - 1
            
            if i <=36
                if whatisaboverandom(i)>0
                    countess = countess + 1;
                    tocount = tocount + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandom(i);
                    if i == 36 + start - 1
                        howlonghowoften(zaehlerhowlong) = tocount;
                        endpoints(zaehlerendpoints) = i;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocount ~=0
                        howlonghowoften(zaehlerhowlong) = tocount;
                        zaehlerhowlong = zaehlerhowlong + 1;
                        tocount = 0;
                        endpoints(zaehlerendpoints) = i-1;
                        zaehlerendpoints = zaehlerendpoints + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            else
                
                zaehler_start = i - 36;
                if whatisaboverandom(zaehler_start)>0
                    countess = countess + 1;
                    tocount = tocount + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandom(zaehler_start);
                    if i == 36 + start - 1
                        howlonghowoften(zaehlerhowlong) = tocount;
                        endpoints(zaehlerendpoints) = i ;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocount ~=0
                        howlonghowoften(zaehlerhowlong) = tocount;
                        zaehlerhowlong = zaehlerhowlong + 1;
                        tocount = 0;
                        endpoints(zaehlerendpoints) = i -1 ;
                        zaehlerendpoints = zaehlerendpoints + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            end
            
        end
        
        
    end
    
    startpoints = endpoints - howlonghowoften + 1;
    meanpoints = (endpoints + startpoints) / 2;
    lengthpoints = endpoints - startpoints + 1;
    
    
    distancetonext = zeros(length(startpoints),1);
    for i = 1:length(startpoints)
        
        if i == length(startpoints)
            if endpoints(end) > 36
                
                distancetonext(i) = startpoints(1) - (endpoints(end)-36);
            else
                distancetonext(i) = startpoints(1) - endpoints(end);
            end
        else
            distancetonext(i) = startpoints(i+1) - endpoints(i);
        end
    end
    
    meanpoints2 = meanpoints;
    meanpoints2(end +1) = meanpoints2(1);
    
    distancetomean = diff(meanpoints2);
    distancetomean(distancetomean<0) = distancetomean(distancetomean<0) + 36;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    clusterphi = {};
    for i = 1:length(howmuchoveritatall)
        
        tosavevariable = [];
        if endpoints(i) <= 36
            
            for j = 1:length(phideg)
                if startpoints(i)*10 - 10 <= phideg(j) && phideg(j) <= endpoints(i)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            
            clusterphi{i} =  tosavevariable;
            tosavevariable = [];
            
        else
            
            for j = 1:length(phideg)
                if startpoints(i)*10 - 10 <= phideg(j) || phideg(j) <= (endpoints(i)-36)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            
            clusterphi{i} =  tosavevariable;
            tosavevariable = [];
            
        end
        
    end
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    clusterlength =  cellfun(@length, clusterphi);
    allclusterinput = sum(clusterlength);
    clusterpercent = clusterlength / allclusterinput;
    clusterpercenttoallpixelspos = clusterlength / size(xlist3,1);
    
    arrayofclusterstrength = zeros(5,1);
    arrayofclustersdistance = zeros(5,1);
    arrayofclusters = zeros(length(clusterlength),3);
    arrayofclusters(:,1) = clusterpercent;
    
    maxclusterpercentposition = find(clusterpercent == max(clusterpercent));
    if length(maxclusterpercentposition)>1
        maxclusterpercentposition = maxclusterpercentposition(1);
    end
    
    for i = 1:length(clusterpercent)
        
        if clusterpercent(i) >=0.60
            arrayofclusterstrength(1) = arrayofclusterstrength(1) +1;
        end
        if 0.4 <= clusterpercent(i) && clusterpercent(i) <0.6
            arrayofclusterstrength(2) = arrayofclusterstrength(2) +1;
        end
        if 0.2 <= clusterpercent(i) && clusterpercent(i) <0.4
            arrayofclusterstrength(3) = arrayofclusterstrength(3) +1;
        end
        if 0.1 <= clusterpercent(i) && clusterpercent(i) <0.2
            arrayofclusterstrength(4) = arrayofclusterstrength(4) +1;
        end
        if 0 <= clusterpercent(i) && clusterpercent(i) <0.1
            arrayofclusterstrength(5) = arrayofclusterstrength(5) +1;
        end
        
        
        if abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10 >180
            
            abseval = 360 - abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            arrayofclusters(i,3) = abseval;
            arrayofclusters(i,2) = (meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            
            if abseval <= 45
                arrayofclustersdistance(1) = arrayofclustersdistance(1) + 1;
            end
            
            if abseval <= 90 && abseval > 45
                arrayofclustersdistance(2) = arrayofclustersdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclustersdistance(3) = arrayofclustersdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclustersdistance(4) = arrayofclustersdistance(4) + 1;
            end
            
        else
            
            abseval = abs(meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            arrayofclusters(i,3) = abseval;
            arrayofclusters(i,2) = (meanpoints(maxclusterpercentposition) - meanpoints(i) )*10;
            
            
            if abseval <= 45
                arrayofclustersdistance(1) = arrayofclustersdistance(1) + 1;
            end
            
            if abseval  <= 90 && abseval > 45
                arrayofclustersdistance(2) = arrayofclustersdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclustersdistance(3) = arrayofclustersdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclustersdistance(4) = arrayofclustersdistance(4) + 1;
            end
        end
        
        
    end
    
    
    % rules
    % find biggest cluster; if >=60% of values: very big; if >=40 big; if
    % 20-40%: middle; if 10-20% small, if 0-10% very small
    
    %from biggest one, meanpoints: +/- 45°: next element;
    % from 45° till 90° and -90° till -45°: same side;
    % from 90° till 135°,  -90° till - 135° other side;
    % from 135 to 180°, -135°, -180°: opposite side;
    
    
    % result:
    % 1 very big; 2 very small (opposite and other side)
    
    
    howmuchoveritatallphi{uka,z} = howmuchoveritatall;
    percover = countess / 36 * 100;
    
    percoverphi(uka, z) = percover;
    countessphi(uka,z) = countess;
    
    
    distancetoavval = sum(((data_ahistogram - randval).^2).^0.5);
    distancetoavvalphi(uka, z) = distancetoavval;
    
    zaehlerhowlonghowoftenphi{uka,z} = howlonghowoften;
    endpointsphi{uka,z} = endpoints;
    
    startpointsphi{uka,z} = startpoints;
    meanpointsphi{uka,z} = meanpoints;
    lengthpointsphi{uka,z} = lengthpoints;
    histogramvaluesphi(z,uka,:) =  data_ahistogram;
    distancetonextphi{uka,z} = distancetonext;
    distancetomeanphi{uka,z} = distancetomean;
    clusterallphi{uka,z} = clusterphi; % arrayofclusters;
    clusterlengthphi{uka,z} = clusterlength;
    allclusterinputphi(uka,z) = allclusterinput;
    clusterpercentphi{uka,z} =  clusterpercent;
    clusterpercenttoallpixelsposphi{uka,z} = clusterpercenttoallpixelspos;
    arrayofclusterstrengthphi(z, uka,:) = arrayofclusterstrength;
    arrayofclustersdistancephi(z, uka,:) = arrayofclustersdistance;
    arrayofclustersphi{uka,z} = arrayofclusters;
    
    subplot(1,2,2)
    binsedgestotakefortheta = 0:10:180;
    randval = 1 / (length(binsedgestotakefortheta) - 1);
    
    bhistogram = histogram(thetadeg, 'BinEdges', binsedgestotakefortheta, 'Normalization', 'probability');
    data_bhistogram = bhistogram.Values;
    whatisaboverandomtheta = data_bhistogram - randval;
    whatisaboverandomtheta(whatisaboverandomtheta < 0) = 0;
    title('\theta from 0° to 180° in 10° bins')
    xlabel('Binned Degree (°)')
    ylabel('Normalized Probability')
    
    countessthetaa = 0;
    howlonghowoftentheta = zeros(1);
    tocounttheta = 0;
    zaehlerhowlongtheta = 1;
    
    
    findabove0forstart = find(whatisaboverandomtheta == 0);
    start = findabove0forstart(1);
    endpointstheta2 = zeros(1);
    zaehlerendpointstheta = 1;
    howmuchoverit = 0;
    howmuchoveritatall = [];
    zaehlerhowmuchoverit = 1;
    
    saveas(gcf,strcat(pathwaytoexportimages, '\', names{z}, allchannelnames(uka), 'phiandtheta','.png'));
    close all
    
    if start == 1 || sum(findabove0forstart == 18) == 1
        for i = 1:length(whatisaboverandomtheta)
            if whatisaboverandomtheta(i)>0
                countessthetaa = countessthetaa + 1;
                tocounttheta = tocounttheta + 1;
                howmuchoverit = howmuchoverit + whatisaboverandomtheta(i);
                if i == length(whatisaboverandomtheta)
                    howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                    endpointstheta2(zaehlerendpointstheta) = i;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                end
                
                
            else
                if tocounttheta ~=0
                    howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                    zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                    tocounttheta = 0;
                    endpointstheta2(zaehlerendpointstheta) = i -1;
                    zaehlerendpointstheta = zaehlerendpointstheta + 1;
                    howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    howmuchoverit = 0;
                    zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                end
            end
            
        end
        
        
    else
        
        for i = start:18 + start - 1
            
            
            if i <=18
                if whatisaboverandomtheta(i)>0
                    countessthetaa = countessthetaa + 1;
                    tocounttheta = tocounttheta + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandomtheta(i);
                    if i == 18 + start - 1
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        endpointstheta2(zaehlerendpointstheta) = i;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocounttheta ~=0
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                        tocounttheta = 0;
                        endpointstheta2(zaehlerendpointstheta) = i-1;
                        zaehlerendpointstheta = zaehlerendpointstheta + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            else
                
                zaehler_start = i - 18;
                if whatisaboverandomtheta(zaehler_start)>0
                    countessthetaa = countessthetaa + 1;
                    tocounttheta = tocounttheta + 1;
                    howmuchoverit = howmuchoverit + whatisaboverandomtheta(zaehler_start);
                    if i == 18 + start - 1
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        endpointstheta2(zaehlerendpointstheta) = i ;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                    end
                    
                    
                else
                    if tocounttheta ~=0
                        howlonghowoftentheta(zaehlerhowlongtheta) = tocounttheta;
                        zaehlerhowlongtheta = zaehlerhowlongtheta + 1;
                        tocounttheta = 0;
                        endpointstheta2(zaehlerendpointstheta) = i -1 ;
                        zaehlerendpointstheta = zaehlerendpointstheta + 1;
                        howmuchoveritatall(zaehlerhowmuchoverit) = howmuchoverit;
                        howmuchoverit = 0;
                        zaehlerhowmuchoverit = zaehlerhowmuchoverit + 1;
                    end
                end
                
                
            end
            
        end
        
        
    end
    
    
    startpoints = endpointstheta2 - howlonghowoftentheta + 1;
    meanpoints = (endpointstheta2 + startpoints) / 2;
    lengthpoints = endpointstheta2 - startpoints + 1;
    
    
    distancetonext = zeros(length(startpoints),1);
    for i = 1:length(startpoints)
        
        if i == length(startpoints)
            if endpointstheta2(end) > 18
                
                distancetonext(i) = startpoints(1) - (endpointstheta2(end)-18);
            else
                distancetonext(i) = startpoints(1) - endpointstheta2(end);
            end
        else
            distancetonext(i) = startpoints(i+1) - endpointstheta2(i);
        end
    end
    
    meanpoints2 = meanpoints;
    meanpoints2(end +1) = meanpoints2(1);
    
    
    distancetomean = diff(meanpoints2);
    distancetomean(distancetomean<0) = distancetomean(distancetomean<0) + 18;
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    clustertheta = {};
    
    for i = 1:length(howmuchoveritatall)
        
        tosavevariable = [];
        if endpointstheta2(i) <= 18
            
            for j = 1:length(thetadeg)
                if startpoints(i)*10 - 10 <= thetadeg(j) && thetadeg(j) <= endpointstheta2(i)*10
                    tosavevariable = [tosavevariable, j];
                    
                end
            end
            
            clustertheta{i} =  tosavevariable;
            tosavevariable = [];
            
        else
            
            for j = 1:length(thetadeg)
                if startpoints(i)*10 - 10 <= thetadeg(j) || thetadeg(j) <= (endpointstheta2(i)-18)*10
                    tosavevariable = [tosavevariable, j];
                end
            end
            
            clustertheta{i} =  tosavevariable;
            tosavevariable = [];
            
        end
        
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    clusterthetalength =  cellfun(@length, clustertheta);
    allclusterthetainput = sum(clusterthetalength);
    clusterthetapercent = clusterthetalength / allclusterthetainput;
    clusterthetapercenttoallpixelspos = clusterthetalength / size(xlist3,1);
    
    arrayofclusterthetastrength = zeros(5,1);
    arrayofclusterthetasdistance = zeros(5,1);
    arrayofclusterthetas = zeros(length(clusterthetalength),3);
    arrayofclusterthetas(:,1) = clusterthetapercent;
    
    maxclusterthetapercentposition = find(clusterthetapercent == max(clusterthetapercent));
    if length(maxclusterthetapercentposition)>1
        maxclusterthetapercentposition = maxclusterthetapercentposition(1);
    end
    
    for i = 1:length(clusterthetapercent)
        if clusterthetapercent(i) >=0.60
            arrayofclusterthetastrength(1) = arrayofclusterthetastrength(1) +1;
        end
        if 0.4 <= clusterthetapercent(i) && clusterthetapercent(i) <0.6
            arrayofclusterthetastrength(2) = arrayofclusterthetastrength(2) +1;
        end
        if 0.2 <= clusterthetapercent(i) && clusterthetapercent(i) <0.4
            arrayofclusterthetastrength(3) = arrayofclusterthetastrength(3) +1;
        end
        if 0.1 <= clusterthetapercent(i) && clusterthetapercent(i) <0.2
            arrayofclusterthetastrength(4) = arrayofclusterthetastrength(4) +1;
        end
        if 0 <= clusterthetapercent(i) && clusterthetapercent(i) <0.1
            arrayofclusterthetastrength(5) = arrayofclusterthetastrength(5) +1;
        end
        
        if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 >180
            %  should not be possible as [0, 180]
            abseval =  180 - (abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 - 180);
            arrayofclusterthetas(i,3) = 180 - (abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 - 180);
            arrayofclusterthetas(i,2) = (meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            
            if abseval <= 45
                arrayofclusterthetasdistance(1) = arrayofclusterthetasdistance(1) + 1;
            end
            
            if abseval <= 90 && abseval > 45
                arrayofclusterthetasdistance(2) = arrayofclusterthetasdistance(2) + 1;
            end
            
            if abseval <= 135 && abseval > 90
                arrayofclusterthetasdistance(3) = arrayofclusterthetasdistance(3) + 1;
            end
            
            if abseval <= 180 && abseval > 135
                arrayofclusterthetasdistance(4) = arrayofclusterthetasdistance(4) + 1;
            end
            
        else
            
            arrayofclusterthetas(i,3) = abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            arrayofclusterthetas(i,2) = (meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10;
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 45
                arrayofclusterthetasdistance(1) = arrayofclusterthetasdistance(1) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 90 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 45
                arrayofclusterthetasdistance(2) = arrayofclusterthetasdistance(2) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 135 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 90
                arrayofclusterthetasdistance(3) = arrayofclusterthetasdistance(3) + 1;
            end
            
            if abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 <= 180 && abs(meanpoints(maxclusterthetapercentposition) - meanpoints(i) )*10 > 135
                arrayofclusterthetasdistance(4) = arrayofclusterthetasdistance(4) + 1;
            end
        end
    end
    
    
    howmuchoveritatalltheta{uka,z} = howmuchoveritatall;
    
    percoverthetaa = countessthetaa / 18 * 100;
    percovertheta(uka, z) = percoverthetaa;
    countesstheta(uka,z) = countessthetaa;
    
    
    distancetoavvaltheta2 = sum(((data_bhistogram - randval).^2).^0.5);
    distancetoavvaltheta(uka, z) = distancetoavvaltheta2;
    
    zaehlerhowlonghowoftentheta{uka,z} = howlonghowoftentheta;
    endpointstheta{uka,z} = endpointstheta2;
    
    
    startpointstheta{uka,z} = startpoints;
    meanpointstheta{uka,z} = meanpoints;
    lengthpointstheta{uka,z} = lengthpoints;
    histogramvaluestheta(z,uka,:) =  data_bhistogram;
    distancetonexttheta{uka,z} = distancetonext;
    distancetomeantheta{uka,z} = distancetomean;
    clusteralltheta{uka,z} = clustertheta; % arrayofclusters;
    clusterlengththeta{uka,z} = clusterthetalength;
    allclusterinputtheta(uka,z) = allclusterthetainput;
    clusterpercenttheta{uka,z} =  clusterthetapercent;
    clusterpercenttoallpixelspostheta{uka,z} = clusterthetapercenttoallpixelspos;
    arrayofclusterstrengththeta(z,uka,:) = arrayofclusterthetastrength;
    arrayofclustersdistancetheta(z,uka,:) = arrayofclusterthetasdistance;
    arrayofclusterstheta{uka,z} = arrayofclusterthetas;
    
    
    %center of masked signal volume
    Mmean = [mean(pixsM(:,1)), mean(pixsM(:,2)),  mean(pixsM(:,3))];
    
    % diameter: here: usage of boundary
    pixs = [bound_x, bound_y, bound_z];
    % now in nm
    pixs2 = [(pixs(:,1)- 0.5)* pixlength_x, (pixs(:,2)- 0.5)* pixlength_y, (pixs(:,3)-0.5)* pixlength_z];
    
    distances = pdist(pixs2); % all distances are calculated
    
    aver_radius = ( (pixs2(:,1) - repmat(mean(pixsM(:,1)), size(bound_x,1),1)).^2 + (pixs2(:,2) - repmat(mean(pixsM(:,2)), size(bound_x,1),1)).^2 + (pixs2(:,3) - repmat(mean(pixsM(:,3)), size(bound_z,1),1)).^2 ).^(0.5);
    
    % as output: av_radius, max_radius, max_diameter
    
    %averaged radius
    av_radius = mean(aver_radius);
    
    %maximal diameter
    max_diameter = max(distances);
    
    
    
    %%%% later at output: normalized R evalnm calculated
    
    
    
    %%%%%
    % goal: calculate Dipole moment and its normalizations
    %Definition: Dipolmoment_norm = (q_pos*pixelvol = charge) / Q_gesamt * d / av_radius;
    
    % dipolnormalizedgeneral: if ==1: calculated by zaehler_tot/2 else:
    % zaehler_pos
    %Dipolmoment = q_pos * pixel_vol * R_evalnm;
    
    
    
    %    global buttongeneralqnormalization
    % dropdownifgeneralqnormalization = uidropdown(p2b, 'Position', [320 a(4)-870 350 40], 'Items', {'Charge normalized dependent on volume of cell (bit)', ...
    %     'Charge normalized dependent on protein distribution of cell (bit)', ...
    %     'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges', ...
    %     'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges', ...
    %     'Own max for each cell (else: dependent on bit)', ...
    %     'Own max for each cell (spread, else: dependent on bit)'}, 'ItemsData', [1 0 2 3 4 5], ...
    %     'ValueChangedFcn', @(dropdownifgeneralqnormalization, event) dropdownifgeneralqnormalization_fcn(dropdownifgeneralqnormalization, event));
    % buttongeneralqnormalization = dropdownifgeneralqnormalization.Value;
    
    %  if buttongeneralqnormalization == 1
    % 'Charge normalized dependent on volume of cell (bit)'
    dipolmomentnormalized21(z,uka) = q_pos / (zaehler_tot/2 * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized11(z,uka) = q_pos / (zaehler_tot/2 * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized1(z,uka) = q_pos / (zaehler_tot / 2 * (max_val12 - av_background - av_val) / pixel_vol);
    %  end
    
    
    %   if buttongeneralqnormalization == 2
    % 'Charge normalized dependent on protein distribution of cell (bit)'
    dipolmomentnormalized22(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized12(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized2(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol);
    %   end
    
    
    %   if buttongeneralqnormalization == 3
    %  'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges'
    dipolmomentnormalized23(z,uka) = q_pos / (qposmax34 * zaehler_pos)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized13(z,uka) = q_pos / (qposmax34 * zaehler_pos)  * R_evalnm / max_diameter;
    qnormalized3(z,uka) = q_pos / (qposmax34 * zaehler_pos);
    
    %   end
    
    %    if buttongeneralqnormalization == 4
    % 'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges'
    dipolmomentnormalized24(z,uka) = q_pos / (qposmax34 * zaehler_tot/2)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized14(z,uka) = q_pos / (qposmax34 * zaehler_tot / 2)  * R_evalnm / max_diameter;
    qnormalized4(z,uka) = q_pos / (qposmax34 * zaehler_tot / 2);
    %   end
    
    
    % if buttongeneralqnormalization == 5
    % 'Own max for each cell normalized by mean value of qpos'
    dipolmomentnormalized25(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized15(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / max_diameter;
    qnormalized5(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2);
    
    %  end
    
    % if buttongeneralqnormalization == 6
    %  'Own max for each cell (else: dependent on bit)'
    dipolmomentnormalized26(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol)/ (max_val6 / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized16(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val6 / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized6(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val6 / pixel_vol) ;
    %   end
    
    Rnormalized2(z,uka) = R_evalnm / (2*av_radius);
    
    Rnormalized1(z,uka) = R_evalnm / max_diameter ;
    intensityvaluetotal(z, uka) = count_intensity;
    
    diameter_maxvec(z) = max_diameter;
    diameter_avvec(z) = 2* av_radius;
    
    
    dipolmoment(z,uka,:) = q_pos * pixel_vol * (R_posnm - R_negnm);
    qposvec(z,uka) = q_pos;
    numberofpixels(z) = zaehler_tot;
    numberofpixelspos(z,uka) = zaehler_pos;
    RposRmean(z, uka, :) = R_posnm - Mmean;
    RnegRmean(z, uka, :) = R_negnm - Mmean;
    RposRneg(z, uka, :) = R_posnm - R_negnm;
    alpharad = 0;
    anglealphadeg = 0;
    
    veca = R_posnm - Mmean;
    vecb = R_posnm - R_negnm;
    alpharad = acos(dot(veca, vecb) / (sqrt(dot(veca, veca)) * sqrt(dot(vecb, vecb))));
    anglealphadeg = alpharad / (2* pi()) * 360;
    
    displacementRposRnegMRposMRneg(z,uka) = sin(anglealphadeg) * norm(R_posnm - Mmean);
    displacementDipoleMomentfromMiddle(z,uka) = norm((R_posnm + R_negnm )./2 - Mmean);
end


end



% fct to calculate essential parameters for polarity quantification with
% all normalization possiblities
function  [dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
    dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
    dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26, ...
    dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
    qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
    numberofpixels, numberofpixelspos, avintensity, RposRmean, intensityvaluetotal, RnegRmean, RposRneg] = ...
    polarityquantificationnotallparametersallnormalizations(path, z, numberofimages, names, allchannelnames, ...
    toignore, mask,  stackstotake, pixlength_x, pixlength_y, pixlength_z, pathwayexportimages,...
    saveimagesyes, buttongeneralqnormalization, buttondiameter, ...
    dipolmomentnormalized11, dipolmomentnormalized21, dipolmomentnormalized12, dipolmomentnormalized22, ...
    dipolmomentnormalized13, dipolmomentnormalized23, dipolmomentnormalized14, dipolmomentnormalized24,...
    dipolmomentnormalized15, dipolmomentnormalized25, dipolmomentnormalized16, dipolmomentnormalized26,...
    dipolmoment, Rnormalized1, Rnormalized2, diameter_maxvec, diameter_avvec, qnormalized1, qnormalized2, ...
    qnormalized3, qnormalized4, qnormalized5, qnormalized6, qposvec, ...
    numberofpixels, numberofpixelspos, avintensity, RposRmean, ax, intensityvaluetotal, RnegRmean, RposRneg)
close all
global buttonimportmasksofcells

if saveimagesyes ==1 && ~isempty(pathwayexportimages)
    %save mask as tiff
    t = Tiff(strcat(pathwayexportimages, '\',string(names{z}),' Masked Cell ',num2str(z), '.tif'), 'w');
    tagstruct.ImageLength = size(mask,1);
    tagstruct.ImageWidth = size(mask,2);
    tagstruct.Photometric = Tiff.Photometric.Mask;
    tagstruct.BitsPerSample = 8;
    tagstruct.SamplesPerPixel = 1;
    tagstruct.PlanarConfiguration = Tiff.PlanarConfiguration.Chunky;
    tagstruct.Compression = Tiff.Compression.None;
    tagstruct.Software = 'MATLAB';
    setTag(t, tagstruct)
    setTag(t, 'XResolution', pixlength_x);
    setTag(t, 'YResolution', pixlength_y);
    
    write(t, squeeze(im2uint8(mask(:,:,1))));
    
    for m = 2:size(mask,3)
        writeDirectory(t);
        setTag(t, tagstruct);
        write(t, squeeze(im2uint8(mask(:,:,m))));
    end
    
    close(t)
end

if  buttonimportmasksofcells == 1
    mask = mask./max(max(max(mask)));
end



% don't need whole mask:
mask_original = mask;
clear mask
mask = mask_original(:,:,stackstotake);


mask_background = zeros(size(mask));
mask_background(mask == 0) = 1;


indices = 1:length(allchannelnames);
indices(toignore) = [];


b = imfinfo(path);
stacknum = length(stackstotake);


global bitsize14
if bitsize14 ==1
    max_val12 = 2^14-1;
else
    try
        if ~isempty(b(1).SampleFormat)
            if isequal(b(1).SampleFormat, "Two's complement signed integer")
                max_val12 = 2^(b(1).BitDepth/2) - 1;
            else
                max_val12 = 2^(b(1).BitDepth) - 1;
            end
            
        else
            max_val12 = 2^(b(1).BitDepth) - 1;
        end
    catch
        max_val12 = 2^(b(1).BitDepth) - 1;
    end
end

pixel_vol = pixlength_x * pixlength_y * pixlength_z;

M = zeros(b(1).Height, b(1).Width, length(stackstotake));
for uka = indices
    
    count = 1;
    
    for k = uka+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):uka+length(allchannelnames)*(stackstotake(end)-1)
        M(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
        count = count + 1;
    end
    
    if saveimagesyes ==1 && ~isempty(pathwayexportimages)
        
        montage(double(M).*double(mask)./double(max(max(max(M)))));
        saveas(gcf,strcat(pathwayexportimages, '\', names{z}, allchannelnames(uka), '.png'));
        
        close all
    end
    
    av_background = 0;
    background = 0;
    count_back = 0;
    for t = 1:stacknum
        for i = 1:size(mask_background,1)
            for j = 1:size(mask_background,2)
                
                if mask_background(i,j,t) == 1
                    background = background + double(M(i,j,t));
                    count_back = count_back + 1;
                end
                
            end
        end
    end
    % get average background by dividing total background through count
    av_background = background / count_back;
    
    % correct the signal, by subtracting the average background
    M = double(M) - av_background;
    
    bound_x = 0; %values of frontier
    bound_y = 0; % values of frontier
    bound_z = 0; % values of frontier
    
    
    for i = 1:stacknum
        
        roiboundaries = bwboundaries(mask(:,:,i));
        
        try xy = roiboundaries{1};
            x = xy(:,2);
            y = xy(:,1);
            bound_x = [bound_x; x];
            bound_y = [bound_y; y];
            bound_z = [bound_z; repelem(i, size(xy,1))' ];
        catch
        end
        
    end
    
    bound_x(1) = [];
    bound_y(1) = [];
    bound_z(1) = [];
    
    % Sum over all signal values, divide by new count to get average value
    
    value = 0;
    count = 0;
    
    
    for t = 1:stacknum
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    value = value + double(M(j,k,t));
                    count = count + 1;
                end
            end
        end
    end
    
    
    
    count_intensity = value;
    av_val = value/count;
    
    avintensity(z, uka) = av_val;
    
    global buttoneachcellnormalizedtoaveragevalue1
    if buttoneachcellnormalizedtoaveragevalue1 ==1
        count = 0;
        value = 0;
        M = double(M)./av_val;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        
        avintensity(z, uka) = av_val;
        
    end
    
    
    global buttoneachcellchargenormalizedcorrespondingtototalvalue1
    if buttoneachcellchargenormalizedcorrespondingtototalvalue1 == 1
        count = 0;
        value = 0;
        M = double(M)./count_intensity;
        
        for t = 1:stacknum
            for k = 1:size(mask,2)
                for j = 1:size(mask,1)
                    
                    if mask(j,k,t) ==1
                        value = value + double(M(j,k,t));
                        count = count + 1;
                    end
                end
            end
        end
        
        av_val = value/count;
        avintensity(z, uka) = av_val;
        
    end
    
    max_val6 = av_val * count;
    
    
    %%%%%%%
    % goal: get 'charge' density for every pixel of masked signal area
    
    clear mask_pos;
    clear mask_neg;
    clear N;
    clear r_posx;
    clear r_posy;
    clear r_posz;
    clear q_pos;
    clear r_negx;
    clear r_negy;
    clear r_negz;
    clear q_neg;
    
    r_posx = zeros(1);
    r_posy = zeros(1);
    r_posz = zeros(1);
    q_pos = zeros(1);
    
    r_negx = zeros(1);
    r_negy = zeros(1);
    r_negz = zeros(1);
    q_neg = zeros(1);
    
    zaehler_pos = 0;
    zaehler_neg = 0;
    zaehler_tot = 0;
    
    qposmax34 = 0;
    
    for t = 1:stacknum
        
        for k = 1:size(mask,2)
            for j = 1:size(mask,1)
                
                if mask(j,k,t) ==1
                    N(j,k,t) = (double(M(j,k,t)) - double(av_val))/pixel_vol;
                    % N: 3D Matrix with 'charge' density values
                    zaehler_tot = zaehler_tot + 1; %total count of voxels
                    
                    if N(j,k,t)>0 % for positive 'charge' density
                        
                        r_posx = r_posx + j * N(j,k,t); % here: sum(q * <r>)
                        r_posy = r_posy + k * N(j,k,t); % here: sum(q * <r>)
                        r_posz = r_posz + t * N(j,k,t); % here: sum(q * <r>)
                        q_pos = q_pos + N(j,k,t); % here: sum(q)
                        
                        % sum(q * <r>) / sum(q) later calculated;
                        
                        zaehler_pos = zaehler_pos + 1; % important later for normalization of Dipole Moment
                        % list_pos(zaehler_pos,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                        
                        
                        if N(j,k,t) > qposmax34
                            qposmax34 = N(j,k,t);
                        end
                        
                    end
                    
                    if N(j,k,t)<0 % if negative density
                        % case == 0: no impact on where high or low charge, left out
                        
                        r_negx = r_negx + j * N(j,k,t);
                        r_negy = r_negy + k * N(j,k,t);
                        r_negz = r_negz + t * N(j,k,t);
                        q_neg = q_neg + N(j,k,t);
                        zaehler_neg = zaehler_neg + 1;
                        %   list_neg(zaehler_neg,:) = [j, k, t, N(j,k,t), M(j,k,t)];
                    end % for == 0: no impact on where high or low charge, left out
                end
            end
        end
    end
    
    
    
    
    % sum(q * <r>) / sum(q)
    % as Matrix-definition to x and y is different:
    % need to adjust for it and change x and y
    
    
    
    R_pos = [r_posy/q_pos, r_posx/q_pos, r_posz/q_pos];
    % weighted mean position of positive 'charge' density
    
    R_neg = [r_negy/q_neg, r_negx/q_neg, r_negz/q_neg];
    % weighted mean position of negative 'charge' denstiy
    
    
    
    %R_eval = norm(R_pos - R_neg);
    % distance between R_pos and R_neg
    
    % now: in nm
    % herefore: I defined center of voxel as the position of value.
    % thus, always -0.5 pixlength
    
    R_posnm = [ (R_pos(1) -0.5) * pixlength_x, (R_pos(2)- 0.5) * pixlength_y, (R_pos(3) - 0.5) * pixlength_z];
    
    R_negnm = [ (R_neg(1)-0.5) * pixlength_x, (R_neg(2) - 0.5)* pixlength_y, (R_neg(3) - 0.5) * pixlength_z];
    
    R_evalnm = norm(R_posnm - R_negnm);
    
    %%%%%%%%%%%%%
    % goal: get the center of volume of interest and the maximal diameter / average radius ,...
    
    % restructure the mask with its 0 and 1 values into 3D coordinates of the
    % positions of the 1 values
    pixList = regionprops(mask, 'PixelList'); % (struct, 3D Matrix with doubles)
    pixsM2 = pixList.PixelList; % values in pixel,
    %through changing from matrix to structure: 1st column x, 2nd column y, 3rd
    %column z
    pixsM(:,1) = ((pixsM2(:,1)-0.5)* pixlength_x); % values in nm
    pixsM(:,2) = ((pixsM2(:,2)-0.5)* pixlength_y); % values in nm
    
    global buttonsinglelayer
    if buttonsinglelayer == 0
        try pixsM(:,3) = ((pixsM2(:,3)-0.5)* pixlength_z); % values in nm
        catch
            pixsM(:,3) = ones(size(pixsM,1),1);
        end
    else
        pixsM(:,3) = ones(size(pixsM,1),1);
    end
    
    %  pixsM(:,3) = ((pixsM2(:,3)-0.5)* pixlength_z); % values in nm
    
    %center of masked signal volume
    Mmean = [mean(pixsM(:,1)), mean(pixsM(:,2)),  mean(pixsM(:,3))];
    
    % diameter: here: usage of boundary
    pixs = [bound_x, bound_y, bound_z];
    % now in nm
    pixs2 = [(pixs(:,1)- 0.5)* pixlength_x, (pixs(:,2)- 0.5)* pixlength_y, (pixs(:,3)-0.5)* pixlength_z];
    
    distances = pdist(pixs2); % all distances are calculated
    
    aver_radius = ( (pixs2(:,1) - repmat(mean(pixsM(:,1)), size(bound_x,1),1)).^2 + (pixs2(:,2) - repmat(mean(pixsM(:,2)), size(bound_x,1),1)).^2 + (pixs2(:,3) - repmat(mean(pixsM(:,3)), size(bound_z,1),1)).^2 ).^(0.5);
    
    % as output: av_radius, max_radius, max_diameter
    
    %averaged radius
    av_radius = mean(aver_radius);
    
    %maximal diameter
    max_diameter = max(distances);
    
    
    
    %%%% later at output: normalized R evalnm calculated
    
    
    
    %%%%%
    % goal: calculate Dipole moment and its normalizations
    %Definition: Dipolmoment_norm = (q_pos*pixelvol = charge) / Q_gesamt * d / av_radius;
    
    % dipolnormalizedgeneral: if ==1: calculated by zaehler_tot/2 else:
    % zaehler_pos
    %Dipolmoment = q_pos * pixel_vol * R_evalnm;
    
    
    % if buttongeneralqnormalization == 1
    % 'Charge normalized dependent on volume of cell (bit)'
    dipolmomentnormalized21(z,uka) = q_pos / (zaehler_tot/2 * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized11(z,uka) = q_pos / (zaehler_tot/2 * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized1(z,uka) = q_pos / (zaehler_tot / 2 * (max_val12 - av_background - av_val) / pixel_vol);
    %  end
    
    % if buttongeneralqnormalization == 2
    % 'Charge normalized dependent on protein distribution of cell (bit)'
    dipolmomentnormalized22(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized12(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized2(z,uka) = q_pos / (zaehler_pos * (max_val12 - av_background - av_val) / pixel_vol);
    %  end
    
    
    % if buttongeneralqnormalization == 3
    %  'Cell charge normalized corresponding to maximal value of charge multiplied by number of positive charges'
    dipolmomentnormalized23(z,uka) = q_pos / (qposmax34 * zaehler_pos)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized13(z,uka) = q_pos / (qposmax34 * zaehler_pos)  * R_evalnm / max_diameter;
    qnormalized3(z,uka) = q_pos / (qposmax34 * zaehler_pos);
    %  end
    
    
    % if buttongeneralqnormalization == 4
    % 'Cell charge normalized corresponding to maximal value of charge multiplied by halved number of total charges'
    dipolmomentnormalized24(z,uka) = q_pos / (qposmax34 * zaehler_tot/2)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized14(z,uka) = q_pos / (qposmax34 * zaehler_tot / 2)  * R_evalnm / max_diameter;
    qnormalized4(z,uka) = q_pos / (qposmax34 * zaehler_tot / 2);
    
    %  end
    
    
    % if buttongeneralqnormalization == 5
    % 'Own max for each cell normalized by mean value of q_pos'
    dipolmomentnormalized25(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized15(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2)  * R_evalnm / max_diameter;
    qnormalized5(z,uka) = q_pos / (q_pos / zaehler_pos * zaehler_tot / 2);
    %   end
    
    %  if buttongeneralqnormalization == 6
    %  'Own max for each cell (else: dependent on bit)'
    % max_val6
    % q_pos
    % av_val
    dipolmomentnormalized26(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol)/ (max_val6 / pixel_vol)  * R_evalnm / (2*av_radius);
    dipolmomentnormalized16(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val6 / pixel_vol)  * R_evalnm / max_diameter;
    qnormalized6(z,uka) = (q_pos + (av_val * zaehler_pos)/pixel_vol) / (max_val6 / pixel_vol) ;
    %  end
    
    Rnormalized2(z,uka) = R_evalnm / (2*av_radius);
    Rnormalized1(z,uka) = R_evalnm / max_diameter ;
    intensityvaluetotal(z, uka) = count_intensity;
    
    diameter_maxvec(z) = max_diameter;
    diameter_avvec(z) = 2* av_radius;
    
    dipolmoment(z,uka,:) = q_pos * pixel_vol * (R_posnm - R_negnm);
    qposvec(z,uka) = q_pos;
    numberofpixels(z) = zaehler_tot;
    numberofpixelspos(z,uka) = zaehler_pos;
    RposRmean(z, uka, :) = R_posnm - Mmean;
    RnegRmean(z, uka, :) = R_negnm - Mmean;
    RposRneg(z, uka, :) = R_posnm - R_negnm;
    
end


end



% fct decision of views
function decisionviewfcn(decisionview, checkbox_allatonceparameters,  paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions, buttonsliderlefthidepanels, buttonsliderrighthidepanels,  ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase,  axes_panelimportexport ,axes_panelchannel, ...
    axes_paneltohidemeasurementsettings, axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, axes_paneltohidedatasetrerunoptions,...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6)
global decisionviewoption sliderhidepanelsvalue
decisionviewoption = decisionview.Value;
sliderhidepanelsvalue = 0;

checkbox_allatonceparametersfcn(checkbox_allatonceparameters, ...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions,...
    buttonsliderlefthidepanels, buttonsliderrighthidepanels, ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b,ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
    axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
    axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, axes_paneltohidedatasetrerunoptions, ...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6, description_resetsettingsafterdone)


end




function ImagePanelImportExportFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        
        if sliderhidepanelsvalue == 0
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal,...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
        if sliderhidepanelsvalue == 2
            
            buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone )
            
        end
        
    end
end


end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ImagePanelChannelFcn(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        
        if sliderhidepanelsvalue == 1
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
        if sliderhidepanelsvalue == 3
            
            buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone )
            
        end
        
    end
end


end


%%%%%%%%

function ImagePanelMeasurementSettings(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        if sliderhidepanelsvalue == 2
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
        if sliderhidepanelsvalue == 4
            buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone )
            
        end
        
    end
end


end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ImagePanelDetectionOption(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        if sliderhidepanelsvalue == 3
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
        if sliderhidepanelsvalue == 5
            buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal,...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone )
            
        end
        
    end
end


end

%%%%%%%%%

function ImagePanelAnalysis(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        if sliderhidepanelsvalue == 4
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
        if sliderhidepanelsvalue == 6
            buttonsliderlefthidepanelsfcn(buttonsliderlefthidepanels,  p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,     ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal, describ1confocal,...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone)
            
        end
        
    end
end


end


%%%%%%%%%%%%%%%%%%%%%%%%%

function ImagePanelRerun(buttonsliderlefthidepanels, buttonsliderrighthidepanels,  p1_feedbackfield,...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
    paneltohidedatasetrerunoptions,     ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase)
global decisionviewoption allatonce_parameters sliderhidepanelsvalue

if allatonce_parameters == 1
    
else
    
    if decisionviewoption == 1 || decisionviewoption == 2
        if sliderhidepanelsvalue == 5
            
            buttonsliderrighthidepanelsfcn(buttonsliderrighthidepanels, p1_feedbackfield,...
                paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, paneltohidedetectionoption,paneltohideanalysisoption, ...
                paneltohidedatasetrerunoptions,    ...
                describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
                ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
                describ3, describ4,t4,describ4b,ef4b, ef4, ...
                describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
                checkifconfocal,describconfocal,describ1confocal, ...
                describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
                describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, describ4mask, maskimport, ...
                tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, description_resetsettingsafterdone);
            
        end
        
    end
end


end





function decisionimagefcn(decisionimage, checkbox_allatonceparameters,  paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions, buttonsliderlefthidepanels, buttonsliderrighthidepanels,...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,description_resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b, ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal, describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
    axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
    axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, ...
    axes_paneltohidedatasetrerunoptions, ...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6)

global decisionimageoption sliderhidepanelsvalue
decisionimageoption = decisionimage.Value;

sliderhidepanelsvalue = 0;

checkbox_allatonceparametersfcn(checkbox_allatonceparameters, ...
    paneltohideimportexport, paneltohidechannel, paneltohidemeasurementsettings, ...
    paneltohidedetectionoption,paneltohideanalysisoption ,paneltohidedatasetrerunoptions,...
    buttonsliderlefthidepanels, buttonsliderrighthidepanels, ...
    describ1, describ1b, t1,t1b,describ2,describ1export,t2,ef2,t3,ef3,ef1b,ef1c,resetsettingsafterdone,loadsettings,...
    ef1, checkboxpathwaytodatafolder, checkboxpathwaytosaveimagesfolder, checkboxpathwaytosavedatafolder, ...
    describ3, describ4,t4,describ4b,ef4b,ef4, ...
    describpix, describ1settingpix, t1ca,efpixx,t1cb,efpixy,t1cc,efpixz,describ_bit14,...
    checkifconfocal,describconfocal,describ1confocal, ...
    describoptionpar, describ1analysis, allparametersoption, viewandexportoption, ...
    describoptionalsheading, describoptionals, describ4c, savingparametersofcellimport, nottotakeofcellimport, describ4mask, maskimport, ...
    tmask,efmaskpathway,checkboxpathwaytosaveimportmaskfolder,tmaskphrase,efmaskphrase, ...
    axes_panelimportexport ,axes_panelchannel, axes_paneltohidemeasurementsettings, ...
    axes_paneltohidedetectionoption, axes_paneltohideanalysisoption, axes_paneltohidedatasetrerunoptions, ...
    hiddenpanelcolor1, hiddenpanelcolor2, hiddenpanelcolor3, hiddenpanelcolor4, hiddenpanelcolor5, hiddenpanelcolor6,  p1_feedbackfield, ...
    describpanel_1,  describpanel_2,  describpanel_3,  describpanel_4,  describpanel_5,  describpanel_6, description_resetsettingsafterdone)

end




function cellnumbertoshow(efcellnumbershownandcanbeputin, slider2, event, ax2, ...
    p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection)
global slidervalue2 numberofimages
slidervalue2go2 = efcellnumbershownandcanbeputin.Value;

if ~isempty(numberofimages)
    if slidervalue2go2 <= numberofimages && slidervalue2go2 > 0
        
        slidervalue2 = slidervalue2go2;
        slider2.Value = slidervalue2;
        SliderValueChanged2(slider2, event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection, efcellnumbershownandcanbeputin)
        
    else
        efcellnumbershownandcanbeputin.Value = slidervalue2;
        
    end
    
else
    if slidervalue2go2 <= 2 && slidervalue2go2 > 0
        
        slidervalue2 = slidervalue2go2;
        slider2.Value = slidervalue2;
        SliderValueChanged2(slider2, event, ax2, p3_feedbackfield, tableresults, checkifnottotakeresult, checkifrerun, checkoverviewchannels2, buttonifcellrecognitionseveralchannels , channelsforcelldetection,efcellnumbershownandcanbeputin )
    else
        efcellnumbershownandcanbeputin.Value = slidervalue2;
    end
    
    
end


end



function pearsonscorrelationcoefficient(mask, stackstotake, path, z)
global Pearson_finished toignore allchannelnames
timer = 1;


% || length(stackstotake) == 1
if sum(sum(sum(mask))) == 0  || isempty(stackstotake)
    
    Pearson_finished(z,timer) = NaN;
    
else
    
    mask_original = mask;
    mask = mask_original(:,:,stackstotake);
    
    b = imfinfo(path);
    
    channel1 = zeros(b(1).Height, b(1).Width, length(stackstotake));
    channel2 = zeros(b(1).Height, b(1).Width, length(stackstotake));
    indices = 1:length(allchannelnames);
    indices(toignore) = [];
    
    lengthindices = length(indices);
    
    for uka = 1:lengthindices - 1
        for uka2 = uka +1 :  lengthindices
            count = 1;
            
            for k = indices(uka)+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):indices(uka)+length(allchannelnames)*(stackstotake(end)-1)
                channel1(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
            end
            count = 1;
            for k = indices(uka2)+length(allchannelnames)*(stackstotake(1)-1):length(allchannelnames):indices(uka2)+length(allchannelnames)*(stackstotake(end)-1)
                channel2(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
            end
            
            indices_pixels = find(mask ~= 0);
            
            global names
            
            channel1pixelvalues = channel1(indices_pixels);
            channel2pixelvalues = channel2(indices_pixels);
            
            mean_channel1pixelvalues = mean(channel1pixelvalues);
            mean_channel2pixelvalues = mean(channel2pixelvalues);
            
            Pearson_finished(z,timer) = sum((channel1pixelvalues - mean_channel1pixelvalues).* (channel2pixelvalues - mean_channel2pixelvalues))./ ( sum((channel1pixelvalues - mean_channel1pixelvalues).^2) .* sum((channel2pixelvalues - mean_channel2pixelvalues).^2) ).^0.5
            
            
            
            
            timer = timer + 1;
            
        end
    end
    
end

end


function slidernumber_fcn(slidernumber, slider, event, ax, p2_feedbackfield)
global numberofimages

if slidernumber.Value >=1 && slidernumber.Value <= numberofimages
    
    SliderValueChanged_slidernumberfcn(slidernumber.Value, slider, ax, p2_feedbackfield)
end
if slidernumber.Value < 1
    p2_feedbackfield.Value = 'Chosen number not in limits of images';
    slidernumber.Value = slider.Value;
end
if slidernumber.Value > numberofimages
    p2_feedbackfield.Value = 'Chosen number not in limits of images';
    slidernumber.Value = slider.Value;
end


end



function SliderValueChanged_slidernumberfcn(slidernumber, app, ax, p2_feedbackfield)
global buttonforapplythreshold slidervalue names pathwayimport allchannelnames ...
    whichchannelforcelldetect numberofimages channeltoshowval

slidervalue = slidernumber;
set(app, 'Value', slidervalue);

%try app.Limits = [1 numberofimages];
%catch
%    app.Limits = [1 2];
%end

app.MajorTicks = app.Limits(1):1:app.Limits(2);

if length(app.Limits(1):1:app.Limits(2)) < 10
    
    app.MajorTicks = app.Limits(1):1:app.Limits(2);
    app.MinorTicks = [];
    
else
    
    app.MajorTicks = app.Limits(1):10:app.Limits(2);
    app.MinorTicks = app.Limits(1):1:app.Limits(2);
    
end

if length(app.Limits(1):1:app.Limits(2)) < 10
    
    app.MajorTicks = app.Limits(1):1:app.Limits(2);
    app.MinorTicks = [];
    
end

if (10 < length(app.Limits(1):1:app.Limits(2))) &&  ( length(app.Limits(1):1:app.Limits(2))< 100)
    
    app.MajorTicks = app.Limits(1):10:app.Limits(2);
    app.MinorTicks = app.Limits(1):1:app.Limits(2);
    
end

if length(app.Limits(1):1:app.Limits(2)) > 100
    
    app.MajorTicks = app.Limits(1):100:app.Limits(2);
    app.MinorTicks = app.Limits(1):10:app.Limits(2);
    
end


if isempty(pathwayimport)
    
    p2_feedbackfield.Value = 'Need of import pathway';
    
else
    p2_feedbackfield.Value = 'Import pathway there';
    
    path = strcat(pathwayimport,'\', names{slidervalue});
    
    if isempty(whichchannelforcelldetect)
        whichchannelforcelldetect = 1;
    end
    
    if isempty(channeltoshowval) || channeltoshowval == 0
        channeltoshowval = 1;
    end
    
    if buttonforapplythreshold == 0
        if channeltoshowval <= length(allchannelnames)
            
            b = imfinfo(path);
            stacknum = numel(b);
            
            count = 1;
            M_original = zeros(b(1).Height, b(1).Width, stacknum./length(allchannelnames));
            for k = channeltoshowval:length(allchannelnames):stacknum
                
                M_original(1:b(1).Height, 1:b(1).Width,count) = imread(path,k);
                count = count + 1;
                
            end
            
            montage(double(M_original(:,:,:))./max(max(double(M_original(:,:,:))))  , 'Parent', ax)
            title(allchannelnames(channeltoshowval), 'Parent', ax ,  'FontWeight', 'bold', 'FontSize', 20)
            
        else
            
            p2_feedbackfield.Value = 'No valid channel number';
            
        end
        
        
    else % buttonforapplythreshold ~= 0 --> now applied
        % buttonforcomparison: now taken into account
        
        if  channeltoshowval <= length(allchannelnames)
            
            global buttonforjuststructure buttonoverviewoverchannels buttonifcellrecognitionseveralchannels  channelsforcelldetection ...
                frontierthrshK1 frontierthrshK2 anpassungotsuthreshK1 anpassungotsuthreshK2 anpassungotsuthreshK3 frontier3 ...
                anpassungotsuthreshKsubtr thresholdnumpixelsforrangefilt thresholdnumpixelsforrangefiltmaximum anpassungotsuthresh1 anpassungotsuthresh2 ...
                frontieraddition1 threshforveryfaint anpassungintensotsufrontier1 buttonforoutoffocuslight buttontoshow...
                tomodulate maxnumofimagescell minnumofimagescell maxpixnumlayer minpixnumlayer minnumberpixelstodetectforcell maxnumpixelwholecell...
                buttonforcomparison buttonifconfocal stackstotakeforcertainimagenumber
            
            runyes = 0;
            % if no run through all images (runyes = 0), comments to cell detection appear in the feedbackfield
            [ mask imagetoshow stackstotake] =  previewcell(path, numberofimages, allchannelnames, whichchannelforcelldetect,   frontierthrshK1,frontierthrshK2, anpassungotsuthreshK1, anpassungotsuthreshK2, anpassungotsuthreshK3, frontier3, anpassungotsuthreshKsubtr, thresholdnumpixelsforrangefilt, thresholdnumpixelsforrangefiltmaximum, ...
                anpassungotsuthresh1, anpassungotsuthresh2, frontieraddition1, threshforveryfaint,anpassungintensotsufrontier1, buttonforoutoffocuslight, buttontoshow, tomodulate, maxnumofimagescell , minnumofimagescell, maxpixnumlayer, minpixnumlayer, minnumberpixelstodetectforcell, maxnumpixelwholecell, channeltoshowval, buttonforjuststructure, p2_feedbackfield, ax , buttonforcomparison, buttonifconfocal, runyes, buttonoverviewoverchannels, buttonifcellrecognitionseveralchannels , channelsforcelldetection) ;
            % original image with overlaid mask is shown thanks to
            % fct toshow() of fct previewcell()
            
            stackstotakeforcertainimagenumber = {slidervalue, stackstotake, mask};
            
        else
            
            p2_feedbackfield.Value = 'No valid channel number';
            
        end
        
    end
    
end

end







